using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using System.Data.OracleClient;
using System.Data;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Drawing;
using System.Net;
using System.Net.Mail;
using System.Text.RegularExpressions;
using System.Xml;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Linq;

using System.Web;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Linq;
using System.Drawing.Imaging;




namespace FinWebRESTService
{

    public class FinWebService : FinWebApics
    {
        public static string constr, Cstr, Squery, mq, mq0, mq1,mq_ss, mq_wip_fg;

        //public static string api_paths = "http://213.136.94.9";
        //public static string api_paths = "http://164.52.208.47";


        public static string api_paths = "http://mis.finsys.biz";

        public static string final_Qry = "";
        public static string fullname, c, IP, Co, co_cd, sp_cd, srv, pk_error = "Y";
        public static string home_curr = "", home_div_iden = "", home_divider = "", numbr_fmt = "", numbr_fmt2 = "", branch_cd = "";
        public static string rm_lot_mode = "";

        //rm_lot_mode= 1 :: all reel (sgrp /mega) , 2 :: PRT_RAV ="Y" ( reel + other item ), 3 :: PRT_RAV ="N" ( NO reel + all other item)

        public static OracleConnection con; public static OracleDataAdapter da;
        public static DataTable dt, dt1;
        public static DataSet ds, ds1;
        string sender_id, pwd, vsmtp;
        int vssl, vport;
        public static void makeCur(string cd)
        {
            home_curr = "INR";
            home_divider = "10000000";
            home_div_iden = "(Cr)";
            numbr_fmt = "999,99.99";

            if (cd == "BAUS" || cd == "STLC" || cd == "ZEEP")
            {
                home_curr = "USD";
                home_divider = "1000";
                home_div_iden = "(K)";
                numbr_fmt = "999,999,999.99";
                numbr_fmt2 = "999,999,999";
            }
            if (cd == "BMED" || cd == "GESD" || cd == "HPPI" || cd == "SPPI")
            {
                home_curr = "AED";
                home_divider = "1000";
                home_div_iden = "(K)";
                numbr_fmt = "999,999,999.99";
                numbr_fmt2 = "999,999,999";
            }
            if (cd == "MFLX" || cd == "SLL")
            {
                home_curr = "MUR";
                home_divider = "1000";
                home_div_iden = "(K)";
                numbr_fmt = "999,999,999.99";
                numbr_fmt2 = "999,999,999";
            }

            string b31 = fn_seek_iname(cd.ToUpper(), "", "SELECT PARAMS FROM CONTROLS WHERE ID='B31' AND ENABLE_YN='Y' ", "PARAMS");
            if (b31 != "0")
            {
                // HARD CODE HAI ABHI
                home_curr = fn_seek_iname(cd.ToUpper(), "", "SELECT BR_CURREN FROM TYPE WHERE ID='B' AND TYPE1='00' ", "BR_CURREN");
                home_divider = "10000000";
                home_div_iden = "(Cr)";
                numbr_fmt = "999,99.99";

                if (b31 == "2")
                {
                    home_divider = "1000";
                    home_div_iden = "(K)";
                    numbr_fmt = "999,999,999.99";
                    numbr_fmt2 = "999,999,999";
                }
                if (b31 == "3")
                {
                    home_divider = "100000";
                    home_div_iden = "(Lac)";
                    numbr_fmt = "999,999,999.99";
                    numbr_fmt2 = "999,999,999";
                }
            }
        }
        public static void branchwise(string cd, string userid, string username)
        {
            //some control duplicate :: B32
            string b32 = fn_seek_iname(cd.ToUpper(), "", "SELECT ENABLE_YN FROM CONTROLS WHERE ID='B32'", "ENABLE_YN");
            branch_cd = "BRANCHCD NOT IN ('DD','88')";
            if (b32 == "N")
            {
                Squery = "SELECT TRIM(NVL(ALLOWBR,'-')) AS ALLOWBR FROM EVAS WHERE USERNAME='" + username.Trim().ToUpper() + "'";
                if (username == "")
                    Squery = "SELECT TRIM(NVL(ALLOWBR,'-')) AS ALLOWBR FROM EVAS WHERE USERID='" + userid.Trim().ToUpper() + "'";
                dt = getdatav(cd, Squery);
                if (dt.Rows.Count <= 0)
                {
                    Squery = "SELECT TRIM(NVL(ALLOWBR,'-')) AS ALLOWBR FROM EVAS WHERE (USERID='" + userid.Trim().ToUpper() + "' OR USERID='" + username.Trim().ToUpper() + "' OR USERNAME='" + userid.Trim().ToUpper() + "' OR USERNAME='" + username.Trim().ToUpper() + "')";
                    dt = getdatav(cd, Squery);
                }
                if (dt.Rows.Count > 0)
                {
                    if (dt.Rows[0]["ALLOWBR"].ToString().Trim() != "-" && dt.Rows[0]["ALLOWBR"].ToString().Trim() != "0")
                    {
                        branch_cd = "";
                        foreach (string str in dt.Rows[0]["ALLOWBR"].ToString().Trim().Split(','))
                        {
                            branch_cd += ",'" + str + "'";
                        }
                        if (branch_cd != "")
                            branch_cd = branch_cd.TrimStart(',');

                        branch_cd = "BRANCHCD IN (" + branch_cd + ")";
                    }
                }
            }
        }
        public static string GetCO_CD()
        {
            string path = AppDomain.CurrentDomain.BaseDirectory + "mytns.txt";
            string str = "";
            if (File.Exists(path))
            {
                StreamReader sr = new StreamReader(path);
                str = sr.ReadToEnd().Trim();
                if (str.Contains("\r"))
                    str = str.Replace("\r", ",");
                if (str.Contains("\n"))
                    str = str.Replace("\n", ",");
                str = str.Replace(",,", ",");

                Co = str.Split(',')[0].ToUpper();

                sr.Close();
            }
            return Co;
        }
        public static DataSet oDS;
        public static DataRow oporow = null;
        public static XmlDocument docxml = new XmlDocument();
        public static XmlNodeList getval;
        public static string GetXMLTag(String xmlval)
        {
            string strval = "";
            string xmlFilePath = (@"C:\ipinfo.xml");
            docxml.Load(xmlFilePath);
            getval = docxml.GetElementsByTagName(xmlval);
            strval = getval[0].InnerText.Trim();
            return strval;
        }

        public static string con2Oracle(string co_cd)
        {

            string path = @"~\mytns.txt";
            string xmlFilePath = (@"C:\ipinfo.xml");
            path = AppDomain.CurrentDomain.BaseDirectory + "mytns.txt";
            string str = "",
            srv = "";
            sp_cd = "";
            if (File.Exists(path))
            {
                StreamReader sr = new StreamReader(path);
                str = sr.ReadToEnd().Trim().ToUpper();
                if (str.Contains("\r"))
                    str = str.Replace("\r", ",");
                if (str.Contains("\n"))
                    str = str.Replace("\n", ",");
                str = str.Replace(",,", ",");

                srv = str.Split(',')[2];
                IP = str.Split(',')[1];

                sr.Close();
                co_cd = co_cd.ToUpper();
                if (File.Exists(xmlFilePath))
                {
                    try
                    {
                        IP = GetXMLTag(co_cd.ToUpper().Trim());
                    }
                    catch (Exception e)
                    {
                        try
                        {
                            IP = GetXMLTag(co_cd.ToUpper().Trim() + "_IP");
                            srv = GetXMLTag(co_cd.ToUpper().Trim() + "_SN");
                            api_paths = GetXMLTag(co_cd.ToUpper().Trim() + "_AP");
                        }

                        catch (Exception e1)
                        { }
                    }
                }


                string id = "FIN" + co_cd;
                string pass = co_cd + "FIN";
                string nPwd = "" + co_cd + "FIN";
                string port_no = "";
                if (co_cd == "MCPL" || co_cd == "MIRP")
                {
                    port_no = "1521";
                }
                else
                {
                    port_no = "1521";
                }

                if (co_cd == "MCPL2") co_cd = "MCPL";
                if (co_cd == "MCPL4") co_cd = "MCPL";

                id = "FIN" + co_cd;

                DateTime dt1 = DateTime.Now.Date;

                if (dt1 > DateTime.ParseExact("15/02/2017", "dd/MM/yyyy", new System.Globalization.CultureInfo("en-GB")))
                {
                    string sysUser = "SY" + "ST" + "EM";
                    string sysPwd = "LE" + "AD" + "ER";
                    constr = "Data Source=(DESCRIPTION="
               + "(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST= " + IP.Trim() + ")(PORT=" + port_no + ")))"
               + "(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=" + srv + ")));"
               + "User Id= " + sysUser + "; Password= " + sysPwd + ";";

                    nPwd = _getData("select TRIM(CREF)||SUBSTR(TRIM(GREFSPW),1,4)||TRIM(pref2) AS PREF2 from REPCAT$_SYNC where trim(cref)='" + co_cd + "'", constr);
                }
                if (nPwd == "") nPwd = co_cd + "FIN";

                string user = "" + IP.Trim() + "";
                constr = "Data Source=(DESCRIPTION="
                + "(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST= " + user + ")(PORT=" + port_no + ")))"
                + "(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=" + srv + ")));"
                + "User Id= " + id + "; Password= " + nPwd + ";";
            }
            return constr;
        }

        public static string fn_chk_pk(string pk_str, string pco_cd, string mbr, string vty, string vchnum, string vchdate, string acode, string uname)
        {
            string pk_error = "Y";
            try
            {


                DataSet oDS1 = new DataSet(); oporow = null;
                oDS1 = fill_schema(pco_cd, "Wsr_ctrl");
                oporow = oDS1.Tables[0].NewRow();
                oporow["FINPKFLD"] = pk_str.ToUpper();
                oporow["BRANCHCD"] = mbr;
                oporow["TYPE"] = vty;
                oporow["VCHNUM"] = vchnum;
                oporow["VCHDATE"] = fn_seek_iname(pco_cd, mbr, "SELECT TO_DATE('" + vchdate + "','dd/mm/yyyy') as vchdate from dual", "vchdate");
                

                //DateTime date = DateTime.ParseExact(vchdate, "dd/MM/yyyy", null);


                oporow["ENT_BY"] = uname;
                oporow["ent_dt"] = DateTime.Now.ToString();

                oporow["PRINTED"] = 0;

                oporow["ACODE"] = acode;
                oDS1.Tables[0].Rows.Add(oporow);
                save_data(pco_cd, oDS1, "wsr_ctrl");
                oDS1.Dispose();
                pk_error = "N";
            }
            catch (Exception ex)
            {
                FILL_ERR(ex.Message);

                pk_error = "Y";
            }

            return pk_error;

        }

        public static string con2Oracle_FIN(string co_cd)
        {
            string path = @"~\mytns.txt";
            string xmlFilePath = (@"C:\ipinfo.xml");
            path = AppDomain.CurrentDomain.BaseDirectory + "mytns.txt";
            string str = "", srv = "";
            sp_cd = "";
            if (File.Exists(path))
            {
                StreamReader sr = new StreamReader(path);
                str = sr.ReadToEnd().Trim().ToUpper();
                if (str.Contains("\r"))
                    str = str.Replace("\r", ",");
                if (str.Contains("\n"))
                    str = str.Replace("\n", ",");
                str = str.Replace(",,", ",");

                IP = str.Split(',')[1];
                srv = str.Split(',')[2];

                sr.Close();
                co_cd = co_cd.ToUpper();
                if (File.Exists(xmlFilePath))
                {
                    try
                    {
                        IP = GetXMLTag(co_cd.ToUpper().Trim());
                    }
                    catch (Exception e)
                    {
                        try
                        {
                            IP = GetXMLTag(co_cd.ToUpper().Trim() + "_IP");
                            srv = GetXMLTag(co_cd.ToUpper().Trim() + "_SN");
                            api_paths = GetXMLTag(co_cd.ToUpper().Trim() + "_AP");
                        }

                        catch (Exception e1)
                        { }
                    }
                }
                string id = "FIN" + co_cd;
                string pass = co_cd + "FIN";
                string nPwd = "" + co_cd + "FIN";

                string port_no = "";
                if (co_cd == "MCPL" || co_cd == "MIRP")
                {
                    port_no = "1521";
                }
                else
                {
                    port_no = "1521";
                }

                DateTime dt1 = DateTime.Now.Date;
                if (nPwd == "") nPwd = co_cd + "FIN";

                string user = "" + IP.Trim() + "";
                constr = "Data Source=(DESCRIPTION="
                + "(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST= " + user + ")(PORT= " + port_no + " )))"
                + "(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=" + srv + ")));"
                + "User Id= " + id + "; Password= " + nPwd + ";";
            }
            return constr;
        }
        public static string _getData(string cmdQuery, string connectionString)
        {
            string rVal = "";

            try
            {
                using (OracleConnection con = new OracleConnection(connectionString))
                {
                    con.Open();
                    using (OracleCommand cmd = new OracleCommand(cmdQuery, con))
                    {
                        using (OracleDataReader oledbDr = cmd.ExecuteReader())
                        {
                            if (oledbDr != null)
                            {
                                DataTable dt = new DataTable();
                                if (oledbDr.HasRows) dt.Load(oledbDr);
                                if (dt.Rows.Count > 0)
                                {
                                    rVal = dt.Rows[0][0].ToString().Trim();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                FILL_ERR(ex.Message);
            }
            return rVal;
        }
        public static void FILL_ERR(string msg)
        {
            string ppath = @"c:\FIN_ERP\err.txt";
            try
            {
                if (File.Exists(ppath))
                {
                    StreamWriter w = File.AppendText(ppath);
                    w.WriteLine(msg.ToString() + "-->" + DateTime.Now.ToString("ddMMyyyy hh:mm:ss tt"));
                    w.WriteLine("=====================================================================");
                    w.Flush();
                    w.Close();
                }
                else
                {
                    StreamWriter w = new StreamWriter(ppath, true);
                    w.WriteLine(msg.ToString() + "-->" + DateTime.Now.ToString("ddMMyyyy hh:mm:ss tt"));
                    w.WriteLine("=====================================================================");
                    w.Flush();
                    w.Close();
                }
            }
            catch { }
        }
        public static DataTable getdata(string co_Cd, string mid, string Psquery)
        {

            if (mid == "00001")
            {
                Squery = "Select type1 as col1,name as col2,'-'  as col3,'-'  as col4,'-'  as col5 from type where id='B'";
            }
            if (mid == "00002")
            {
                Squery = "Select type1 as col1,name as col2,'-'  as col3,'-'  as col4,'-'  as col5 from type where id='V'";
            }
            if (mid == "00003")
            {
                Squery = "Select type1 as col1,name as col2,'-'  as col3,'-'  as col4,'-'  as col5 from type where id=':'";
            }
            if (mid == "00004")
            {
                Squery = "Select type1 as col1,name as col2,'-'  as col3,'-'  as col4,'-'  as col5 from type where id='31'";
            }
            if (mid == "00005")
            {
                Squery = "Select type1 as col1,name as col2,'-'  as col3,'-'  as col4,'-'  as col5 from type where id='4'";
            }
            if (mid == "-")
            {

                Squery = Psquery;
            }
            else
            {

                Squery = Psquery;
            }




            DataTable dt = new DataTable();
            con = new OracleConnection(con2Oracle(co_Cd));
            try
            {
                con.Open();
            }
            catch (Exception e)
            {
                con = new OracleConnection(con2Oracle_FIN(co_Cd));
                con.Open();
            }

            OracleCommand cmd = new OracleCommand(Squery, con);
            OracleDataReader dr = cmd.ExecuteReader();
            DataSet ds = new DataSet();
            if (dr.HasRows) dt.Load(dr);
            dr.Dispose();
            con.Close();
            ds = new DataSet();
            ds.Tables.Add(dt);
            DataTable dt1 = dt.Clone();
            if (mid == "drlist")
            {

                DataColumn image = new System.Data.DataColumn("Image");
                dt1.Columns.Add(image);


                foreach (DataRow drow in dt.Rows)
                {
                    DataRow dr1 = dt1.NewRow();
                    if (!drow.IsNull("col5"))
                    {

                        //  byte[] imgBytes = (byte[])drow["col5"];
                        try
                        {
                            String MAP = AppDomain.CurrentDomain.BaseDirectory + drow["col5"].ToString();
                            byte[] imgBytes = imagefrompath(MAP);

                            TypeConverter tc = TypeDescriptor.GetConverter(typeof(Bitmap));
                            Bitmap MyBitmap = (Bitmap)tc.ConvertFrom(imgBytes);

                            string imgString = Convert.ToBase64String(imgBytes);

                            dr1["Image"] = imgString;
                        }
                        catch { dr1["Image"] = ""; }
                    }
                    else
                    { dr1["Image"] = "0"; }
                    dr1["col1"] = drow["col1"];
                    dr1["col2"] = drow["col2"];
                    dr1["col3"] = drow["col3"];
                    dr1["col4"] = drow["col4"];



                    dt1.Rows.Add(dr1);
                }

                dt.Dispose();
                dt = dt1.Copy();

            }
            return dt;


        }
        public static DataTable getdatav(string co_Cd, string Squery)
        {

            dt = new DataTable();
            con = new OracleConnection(con2Oracle(co_Cd));
            try
            {
                con.Open();
            }
            catch (Exception e)
            {
                con = new OracleConnection(con2Oracle_FIN(co_Cd));
                con.Open();
            }
            OracleCommand cmd = new OracleCommand(Squery, con);
            OracleDataReader dr = cmd.ExecuteReader();
            DataSet ds = new DataSet();
            if (dr.HasRows) dt.Load(dr);
            dr.Dispose();
            con.Close();
            ds = new DataSet();
            ds.Tables.Add(dt);
            return dt;


        }

        public List<Team> saveBytesImg(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            //------------------------

            string msg = "Data Saved";
            try
            {
                string co_Cd = team.col1;
                msg = execute_cmd1(co_Cd, "INSERT INTO WB_APP_IMG (FSTR,T_NAME,SRNO,IMGCHAR) VALUES ('" + team.col2 + "','" + team.col3 + "','" + team.col4 + "',to_clob('" + team.col5 + "')) ");
            }
            catch (Exception e)
            {
                msg = e.ToString();
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }
        public List<Team> saveImageNew(Team team)
        {
            //-------------------------

            Fn_set_andapp_opts(team.col1, "N");
            //------------------------

            string msg = "Data Saved";
            try
            {
                string co_Cd = team.col1;
                string imageName = team.col2;
                string imagePath = team.col3;
                string fstr = team.col4;
                string tabname = team.col5;

                try
                {
                    DataTable dt = new DataTable();
                    dt = getdata(co_Cd, "", "select * from WB_APP_IMG where FSTR='" + fstr + "' order by srno");
                    string myStr = "";
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        myStr += dt.Rows[i]["imgchar"].ToString();
                    }

                    byte[] imagebytes = Convert.FromBase64String(myStr);

                    File.WriteAllBytes("C:\\Fin_ERP\\upload\\" + "\\" + imageName + ".jpg", imagebytes);
                }
                catch
                {
                    msg = "saved Without Image";
                }
            }
            catch (Exception e)
            {
                msg = e.ToString();
            }

            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }

        public static void OpenConn(string co_Cd)
        {
            try
            {
                if (con == null)
                { con = new OracleConnection(con2Oracle(co_Cd)); }
                if (con.State.ToString().Trim() != "Open")
                {
                    con = new OracleConnection(con2Oracle(co_Cd));
                    try
                    {
                        con.Open();
                    }
                    catch (Exception e)
                    {
                        con = new OracleConnection(con2Oracle_FIN(co_Cd));
                        con.Open();
                    }
                }
            }
            catch { }
        }
        public DataTable searchDataTable(string searchText, DataTable input)
        {
            DataTable output = input.Clone();
            foreach (DataColumn dc in input.Columns)
            {
                if (dc.ColumnName.ToUpper().Contains(searchText.ToUpper())) return input;
            }
            foreach (DataRow dr in input.Rows)
            {
                for (int i = 0; i < input.Columns.Count; i++)
                {
                    if (dr[i].ToString().ToUpper().Contains(searchText.ToUpper()))
                    {
                        DataRow drnew = output.NewRow();
                        drnew.ItemArray = dr.ItemArray;
                        output.Rows.Add(drnew);
                        break;
                    }
                }
            }
            return output;
        }
        //-------------------------------------------

        //-----------------------------------------------
        public static string fn_seek_iname(string co_cd, string mbr, string squery, string col1)
        {
            //new done on 18/02  removed 01/03/2022
            //if (co_cd == "MCPL2") co_cd = "MCPL";
            //if (co_cd == "MCPL4") co_cd = "MCPL";

            string ReturnVal = "";
            DataTable dtseek = new DataTable();
            dtseek = getdata(co_cd, mbr, squery);
            if (dtseek.Rows.Count > 0) ReturnVal = dtseek.Rows[0][col1].ToString();
            else ReturnVal = "0";
            return ReturnVal;
        }
        public static string padlc(Int64 Number, int totalcharactes)
        {
            String result = "";
            Int64 temp = Number;
            for (int i = 1; i < totalcharactes; i++)
            {
                temp /= 10;
                if (temp == 0) result += "0";
            }
            result += Number.ToString();
            return result;
        }
        /// <summary>
        /// Function is use for Check Primery Key
        /// IF Value exist then it will send "Y" else N
        /// </summary>
        /// <param name="pk_str">Value to be check</param>
        /// <param name="vchnum">Voucher No</param>
        /// <param name="vchdate">Date in string</param>
        ///        
        public static string Fn_curr_dt(string Pco_Cd, string pmbr, string Pqstr)
        {
            string xdate = fn_seek_iname(Pco_Cd, pmbr, "Select to_char(sysdate,'DD/MM/YYYY') as fstr from dual", "fstr");
            return xdate;
        }

        public static string Fn_curr_dt_time(string Pco_Cd, string pmbr, string Pqstr)
        {
            execute_cmd1(Pco_Cd, "ALTER SESSION SET NLS_DATE_FORMAT = 'DD/MM/YYYY'");

            string xdate = fn_seek_iname(Pco_Cd, pmbr, "Select to_char(sysdate,'DD/MM/YYYY hh:mi:ss am') as fstr from dual", "fstr");

            return xdate;
        }

        public static string Fn_set_andapp_opts(string Pco_Cd, string upd_co)
        {
            ////  1 / 2 / 3 :: 1 means mega type, 2 means corr prodn , 3 means main finsys no print
            //// Sales / hrm / stores / maint / prodn / logistic / gate / common / special purpose
            string and_app_allow = "";
            switch (Pco_Cd)
            {
                case "ADVG":
                    //done
                    rm_lot_mode = "1";
                    and_app_allow = "F!~!~!F!~!~!F!~!~!T!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!";
                    break;

                case "S001":
                    //done
                    rm_lot_mode = "1";
                    and_app_allow = "F!~!~!F!~!~!T!~!~!T!~!~!F!~!~!F!~!~!T!~!~!F!~!~!F!~!~!";
                    break;
                case "SEPL":
                    rm_lot_mode = "3";
                    and_app_allow = "F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!T!~!~!F!~!~!F!~!~!";
                    break;
                case "NN01":
                case "SH01":
                case "SP01":
                case "CP01":
                case "MU01":
                case "JT01":
                case "OP01":
                case "SK01":
                case "UI01":
                case "AMBS":
                case "AM01":
                    rm_lot_mode = "1";
                    and_app_allow = "F!~!~!F!~!~!T!~!~!F!~!~!F!~!~!F!~!~!T!~!~!F!~!~!F!~!~!";
                    break;
                case "MIND":
                    rm_lot_mode = "3";
                    and_app_allow = "T!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!";
                    break;
                case "STRU":
                    rm_lot_mode = "1";
                    and_app_allow = "F!~!~!T!~!~!T!~!~!T!~!~!T!~!~!T!~!~!T!~!~!T!~!~!F!~!~!";
                    break;
                case "R001":
                    rm_lot_mode = "1";
                    and_app_allow = "F!~!~!T!~!~!T!~!~!T!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!";
                    break;
                case "KCOR":
                case "CCOR":
                    rm_lot_mode = "2";
                    and_app_allow = "F!~!~!F!~!~!T!~!~!F!~!~!T!~!~!F!~!~!F!~!~!F!~!~!F!~!~!";
                    break;
                case "SRUB":
                    //done
                    rm_lot_mode = "3";
                    and_app_allow = "T!~!~!F!~!~!T!~!~!F!~!~!F!~!~!F!~!~!T!~!~!F!~!~!F!~!~!";
                    break;
                case "ESML":
                    rm_lot_mode = "3";
                    and_app_allow = "F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!T!~!~!T!~!~!F!~!~!F!~!~!";
                    break;
                case "CHPL":
                    rm_lot_mode = "3";

                    and_app_allow = "T!~!~!F!~!~!T!~!~!T!~!~!T!~!~!T!~!~!T!~!~!T!~!~!T!~!~!";
                    break;
                case "MLGI":
                case "PKGW":
                    //done
                    rm_lot_mode = "3";
                    and_app_allow = "T!~!~!T!~!~!T!~!~!T!~!~!T!~!~!T!~!~!T!~!~!T!~!~!T!~!~!";
                    break;
                case "PGTL":
                case "MEGA":
                case "MEGK":
                case "MEGF":
                case "ARUB":
                    rm_lot_mode = "1";
                    and_app_allow = "T!~!~!T!~!~!T!~!~!T!~!~!T!~!~!T!~!~!T!~!~!T!~!~!F!~!~!";
                    break;
                case "MPPP":
                    rm_lot_mode = "1";
                    and_app_allow = "T!~!~!F!~!~!T!~!~!T!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!";
                    break;
                case "SGRP":
                    //done
                    rm_lot_mode = "1";
                    and_app_allow = "T!~!~!F!~!~!T!~!~!T!~!~!F!~!~!T!~!~!T!~!~!F!~!~!F!~!~!";
                    break;

                case "HENA":
                case "HEXP":
                    rm_lot_mode = "3";
                    and_app_allow = "T!~!~!F!~!~!T!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!";
                    break;
                case "PPRM":
                    rm_lot_mode = "3";
                    and_app_allow = "F!~!~!F!~!~!F!~!~!F!~!~!T!~!~!F!~!~!F!~!~!F!~!~!F!~!~!";
                    break;
                case "NEOP":
                    rm_lot_mode = "3";
                    and_app_allow = "T!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!";
                    break;
                case "GGRP":
                    rm_lot_mode = "1";
                    and_app_allow = "T!~!~!T!~!~!T!~!~!T!~!~!T!~!~!T!~!~!T!~!~!T!~!~!F!~!~!";
                    break;
                //corr box                
                case "AHPI":
                    rm_lot_mode = "2";
                    and_app_allow = "T!~!~!F!~!~!T!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!";
                    break;
                case "NATP":
                case "SPPI":
                case "HPPI":
                    rm_lot_mode = "2";
                    and_app_allow = "T!~!~!F!~!~!T!~!~!T!~!~!F!~!~!F!~!~!T!~!~!F!~!~!F!~!~!";
                    break;
                case "VELV":
                case "VELP":
                    rm_lot_mode = "2";
                    and_app_allow = "F!~!~!F!~!~!T!~!~!T!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!";
                    break;
                case "MEGH":
                    rm_lot_mode = "2";
                    and_app_allow = "F!~!~!F!~!~!T!~!~!F!~!~!F!~!~!F!~!~!T!~!~!F!~!~!F!~!~!";
                    break;
                case "PRPL":
                case "KCLG":
                case "RELI":
                case "BNPL":
                case "BEST":
                case "YPPL":
                case "AC01":
                case "PERF":
                case "HARI":
                case "VPML":
                case "YPAC":
                case "TGIP":
                case "MFLX":
                case "STLC":
                case "FSPP":
                case "SLL":

                case "PANO": // done
                case "NAHR":
                case "KPIL":
                case "OPPL": // ip reqd
                case "MIPL": //done
                    rm_lot_mode = "2";
                    and_app_allow = "F!~!~!F!~!~!T!~!~!F!~!~!T!~!~!F!~!~!F!~!~!F!~!~!F!~!~!";
                    break;
                case "MCPL":
                case "MCPL2":
                case "MCPL4":
                case "MIRP":
                    rm_lot_mode = "2";
                    and_app_allow = "F!~!~!F!~!~!T!~!~!F!~!~!F!~!~!F!~!~!F!~!~!T!~!~!F!~!~!";


                    //execute_cmd1(Pco_Cd.Substring(0, 4), "update WB_map_multiopt set mvisi='N' where map_name='COMM_APP' and op_id<30");

                    //execute_cmd1(Pco_Cd.Substring(0,4), "update WB_map_multiopt set mvisi='N' where map_name='COMM_APP' and op_id<30");


                    break;

                case "DLJM":
                    //done
                    rm_lot_mode = "3";
                    and_app_allow = "F!~!~!F!~!~!F!~!~!F!~!~!T!~!~!F!~!~!F!~!~!F!~!~!F!~!~!";
                    break;
                case "KUNS":
                    //done
                    rm_lot_mode = "3";
                    and_app_allow = "F!~!~!F!~!~!F!~!~!F!~!~!T!~!~!F!~!~!F!~!~!F!~!~!F!~!~!";
                    break;
                case "KPPL":
                    //done
                    rm_lot_mode = "2";
                    and_app_allow = "T!~!~!F!~!~!T!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!";
                    break;
                case "GDOT":
                case "GCAP":
                case "SVPL":
                    //done
                    rm_lot_mode = "1";
                    and_app_allow = "F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!T!~!~!";
                    break;
                //case "GCAP":
                //    rm_lot_mode = "1";
                //    and_app_allow = "F!~!~!F!~!~!T!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!T!~!~!";
                //    break;
                case "GT01":
                    rm_lot_mode = "1";
                    and_app_allow = "F!~!~!F!~!~!T!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!T!~!~!";
                    break;

                case "PACK":
                    //done
                    rm_lot_mode = "1";
                    and_app_allow = "F!~!~!F!~!~!T!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!";
                    break;
                case "MVIN":
                    //done
                    rm_lot_mode = "2";
                    and_app_allow = "F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!T!~!~!";
                    break;
                case "AACL":
                    //done
                    rm_lot_mode = "2";
                    and_app_allow = "T!~!~!F!~!~!T!~!~!F!~!~!T!~!~!F!~!~!T!~!~!T!~!~!F!~!~!";
                    break;
                case "OMNI":
                    //done
                    rm_lot_mode = "2";
                    and_app_allow = "T!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!";
                    break;

                case "PRIN":
                    //done
                    rm_lot_mode = "2";
                    and_app_allow = "T!~!~!F!~!~!T!~!~!T!~!~!F!~!~!T!~!~!T!~!~!F!~!~!F!~!~!";
                    break;
                case "SGM":
                    //done
                    rm_lot_mode = "2";
                    and_app_allow = "F!~!~!F!~!~!T!~!~!T!~!~!T!~!~!F!~!~!T!~!~!F!~!~!F!~!~!";
                    break;
                case "OMEG":
                    //done
                    rm_lot_mode = "1";
                    and_app_allow = "T!~!~!F!~!~!T!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!";
                    break;
                case "IIND":
                    //done
                    rm_lot_mode = "3";
                    and_app_allow = "T!~!~!F!~!~!T!~!~!F!~!~!T!~!~!F!~!~!T!~!~!T!~!~!F!~!~!";
                    break;
                case "PKPL":
                    //done
                    rm_lot_mode = "2";
                    and_app_allow = "T!~!~!F!~!~!T!~!~!F!~!~!T!~!~!F!~!~!T!~!~!T!~!~!F!~!~!";
                    break;
                case "RGEL":
                    //done
                    rm_lot_mode = "3";
                    and_app_allow = "F!~!~!F!~!~!T!~!~!F!~!~!T!~!~!F!~!~!F!~!~!F!~!~!F!~!~!";
                    break;
                case "JEPL":
                    //done
                    rm_lot_mode = "3";
                    and_app_allow = "F!~!~!F!~!~!T!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!";
                    break;
                case "MINV":
                    //done
                    rm_lot_mode = "3";
                    and_app_allow = "F!~!~!T!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!";
                    break;
                case "VIGP":
                    //done
                    rm_lot_mode = "3";
                    and_app_allow = "F!~!~!F!~!~!T!~!~!F!~!~!F!~!~!F!~!~!F!~!~!T!~!~!F!~!~!";
                    break;
                case "AMPS":
                    //done
                    rm_lot_mode = "3";
                    and_app_allow = "T!~!~!F!~!~!T!~!~!F!~!~!F!~!~!F!~!~!T!~!~!T!~!~!F!~!~!";
                    break;
                case "BRPL":
                case "SUNB":
                case "RIL":
                case "ROYL":
                    //done
                    rm_lot_mode = "3";
                    and_app_allow = "F!~!~!F!~!~!T!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!";
                    break;
                case "JRAJ":
                    rm_lot_mode = "3";
                    and_app_allow = "T!~!~!F!~!~!T!~!~!F!~!~!T!~!~!F!~!~!T!~!~!T!~!~!F!~!~!";
                    break;
                case "MPAC":
                    rm_lot_mode = "2";
                    and_app_allow = "F!~!~!F!~!~!T!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!F!~!~!";
                    break;
            }



            {
                execute_cmd1(Pco_Cd, "UPDATE CO SET and_app_allow='" + and_app_allow + "'");
                execute_cmd1(Pco_Cd, "commit");
            }
            string xdate = "-";

            return xdate;
        }


        public static string Fn_set_user_right(string Pco_Cd, string usr_name, string app_name)
        {
            string qrystr = "";
            qrystr = "select op_id as col1,op_lvl as col2,op_Type as col3,op_text aS col4,op_act as col5 from WB_map_multiopt where trim(map_name)='" + app_name.ToUpper().Trim() + "' and trim(upper(mvisi))!='N' order by op_id";

            DataTable dt_ulvl = new DataTable();
            dt_ulvl = getdata(Pco_Cd, "-", "select is_number(ulevel)as ulevel from evas where ulevel>1 and username='" + usr_name.Trim().ToUpper() + "'");

            string has_rights = fn_seek_iname(Pco_Cd.ToUpper(), "", "select (Case when count(*)>0 then 'Y' else 'N' end) as has_rt from evas_app_rt where trim(upper(username))='" + usr_name.Trim().ToUpper() + "'", "has_rt");

            if (has_rights == "Y")
            {
                if (dt_ulvl.Rows.Count > 0)
                {
                    qrystr = "select op_id as col1,op_lvl as col2,op_Type as col3,op_text aS col4,op_act as col5 from WB_map_multiopt where trim(map_name)='" + app_name.ToUpper().Trim() + "' and trim(upper(mvisi))!='N' and trim(upper(map_name))||trim(to_char(op_id)) in (select trim(upper(mod_Text))||trim(icon_id) from evas_app_rt where trim(upper(username))='" + usr_name.Trim().ToUpper() + "')  order by op_id";
                }
            }

            final_Qry = qrystr;
            return qrystr;
        }




        public static DataSet fill_schema(string pco_CD, string tab_name)
        {
            DataSet oDS = new DataSet();
            //con = new OracleConnection(Con2OLE(pco_CD));
            //con.Open();
            OpenConn(pco_CD);
            da = new OracleDataAdapter(new OracleCommand("SELECT * FROM " + tab_name + " where 1=2 ", con));
            OracleCommandBuilder cb = new OracleCommandBuilder(da);
            da.FillSchema(oDS, SchemaType.Source);
            con.Close();
            da.Dispose(); cb.Dispose();
            return oDS;
        }
        public static void save_data(string Comp_Code, DataSet oDs_save, string tab_name_save)
        {
            OpenConn(Comp_Code);
            OracleDataAdapter _da_save = new OracleDataAdapter("select * from " + tab_name_save + " where 1=2", con);
            OracleCommandBuilder cb_save = new OracleCommandBuilder(_da_save);
            string field_type = "";
            for (int i = 0; i < oDs_save.Tables[0].Rows.Count; i++)
            {
                for (int z = 0; z < oDs_save.Tables[0].Columns.Count; z++)
                {
                    field_type = oDs_save.Tables[0].Columns[z].DataType.Name.ToString();
                    //if (field_type.ToUpper() == "DATETIME" && oDs.Tables[0].Rows[i][z].ToString().Replace("'", "").Trim().Length == 0) oDs.Tables[0].Rows[i][z] = seek_iname(Comp_Code, "select TO_DATE(TO_CHAR(SYSDATE,'DD/MM/YYYY'),'DD/MM/YYYY') AS SS FROM DUAL", "SS");
                    //if (field_type.ToUpper() == "DECIMAL" && oDs.Tables[0].Rows[i][z].ToString().Replace("'", "`").Trim().Length == 0) oDs.Tables[0].Rows[i][z] = 0;

                    if (field_type.ToUpper() == "DATETIME" && oDs_save.Tables[0].Rows[i][z].ToString().Replace("'", "`").Trim().Length == 0) { }
                    else if (field_type.ToUpper() == "DECIMAL" && oDs_save.Tables[0].Rows[i][z].ToString().Replace("'", "`").Trim().Length == 0) { }
                    else oDs_save.Tables[0].Rows[i][z] = oDs_save.Tables[0].Rows[i][z].ToString().Replace("'", "`").Trim();
                }
            }
            oDs_save.Tables[0].TableName = tab_name_save;
            _da_save.Update(oDs_save, tab_name_save);
            oDs_save.Dispose(); _da_save.Dispose(); cb_save.Dispose();
        }
        public static void CloseConn()
        {
            try
            {
                if (con != null)
                {
                    if (con.State.ToString() == "Open")
                    { con.Close(); }
                    con.Dispose();
                    con = null;
                }
            }
            catch { }
        }
        public static string ImageToBase64(Image image,
                    System.Drawing.Imaging.ImageFormat format)
        {
            using (MemoryStream ms = new MemoryStream())
            {
                // Convert Image to byte[]
                image.Save(ms, format);
                byte[] imageBytes = ms.ToArray();

                // Convert byte[] to Base64 String
                string base64String = Convert.ToBase64String(imageBytes);
                return base64String;
            }
        }

        public static Byte[] imagefrompath(String path)
        {

            System.Drawing.Image img = System.Drawing.Image.FromFile(path);
            byte[] bytes;
            using (MemoryStream ms = new MemoryStream())
            {
                img.Save(ms, System.Drawing.Imaging.ImageFormat.Jpeg);
                bytes = ms.ToArray();
            }
            return bytes;
        }


        //Methods obsoluted from 11022017

        public static string execute_cmd1(string co_Cd, string query1)
        {
            string msg = "Data Not Saved";
            int res = 0;
            OpenConn(co_Cd);
            try
            {
                OracleCommand cmd = new OracleCommand(query1, con);
                res = cmd.ExecuteNonQuery();
                CloseConn();
                if (res > 0)
                {
                    msg = "Data Saved";
                }
            }
            catch (Exception e)
            {
                msg = e.ToString();
            }

            //if (res == 0)
            //{
            //    msg = "Data Not Saved";
            //}
            return msg;
        }
        public DataSet getlistdata(string cocd, string mbr, string mid, string psquery)
        {

            DataSet ds7 = new DataSet();
            dt = new DataTable();
            dt = getdata(cocd, mid, psquery);
            DataTable dtcopy = dt.Copy();
            ds7.Tables.Add(dtcopy);
            return ds7;
        }
        public DataTable Getlist_any(string cocd, string mbr, string mid, string psquery, String srchtext)
        {
            DataTable dt = new DataTable();
            dt = getdata(cocd, mid, psquery);

            if (srchtext.Trim() == "-" || srchtext.Trim() == "") { }
            else { dt = searchDataTable(srchtext, dt); }
            List<String> dcnames = new List<String>();
            //List<DataRow> list = new List<DataRow>();
            // list = dt.Select().ToList();
            // List<string> s = dt.AsEnumerable().Select(x => x[0].ToString()).ToList();



            foreach (DataColumn dc in dt.Columns)
            {
                dcnames.Add(dc.ColumnName);

            }
            //int dccount = dcnames.Count;



            //List<object> list = new List<object>();
            //var o = new {      = 1, Name = "Foo" };
            //var o1 = new { Id = 2, Name = "Bar" };
            //list.Add(o);
            //list.Add(o1);
            //return list;



            //List<Team> list = new List<dynamic>();

            //if (mid == "drlist")
            //{
            //    list = (from DataRow row in dt.Rows
            //            select new Team()
            //            {
            //                col1 = row["col1"].ToString(),
            //                col2 = row["col2"].ToString(),
            //                col3 = row["col3"].ToString(),
            //                col4 = row["col4"].ToString(),
            //                col5 = row["Image"].ToString(),

            //            }).ToList();

            //}
            //else
            //{
            //    list = (from DataRow row in dt.Rows
            //            select new Team()
            //            {
            //                col1 = row["col1"].ToString(),
            //                col2 = row["col2"].ToString(),
            //                col3 = row["col3"].ToString(),
            //                col4 = row["col4"].ToString(),
            //                col5 = row["col5"].ToString(),


            //            }).ToList();

            //}
            return dt;
        }
        public DataTable gettable(string cocd, string mbr, string mid, string psquery)
        {
            DataSet ds1 = new DataSet();
            DataTable dt1 = new DataTable();
            dt1 = getdata(cocd, mid, psquery);
            return dt1;

        }
        public string next_no(string co_Cd, String mbr, String mid, string psquery, int limit, string col1)
        {
            string count = "", result = "";
            try
            {
                Int64 i = 0;
                dt = new DataTable();
                dt = getdata(co_Cd, mid, psquery);
                if (dt.Rows[0][0] == DBNull.Value) count = "0";
                else if (dt.Rows.Count > 0) count = dt.Rows[0]["" + col1 + ""].ToString().Trim();
                else count = "0";
                if (count.Trim() == "" || count.Trim() == "0" || count.Trim() == null || count.Trim() == "null") i = 1;
                else { i = Convert.ToInt64(count); i++; }
                result = padlc(i, limit);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
            return result;
        }
        public DataTable searchSquery(string co_cd, string mid, string mbr, string searchText, String Squery)
        {
            DataTable input = getdata(co_cd, mid, Squery);
            DataTable output = input.Clone();
            foreach (DataColumn dc in input.Columns)
            {
                if (dc.ColumnName.ToUpper().Contains(searchText.ToUpper())) return input;
            }
            foreach (DataRow dr in input.Rows)
            {
                for (int i = 0; i < input.Columns.Count; i++)
                {
                    if (dr[i].ToString().ToUpper().Contains(searchText.ToUpper()))
                    {
                        DataRow drnew = output.NewRow();
                        drnew.ItemArray = dr.ItemArray;
                        output.Rows.Add(drnew);
                        break;
                    }
                }
            }
            return output;
        }



        //End Obsoluted

        // starting of Web Methods



        public List<Team> execute_cmd_img(Team team)
        {
            //-------------------------

            Fn_set_andapp_opts(team.col1, "N");
            //------------------------

            string msg = "Data Saved";
            try
            {
                string[] teamdata = Regex.Split(team.col1, "!~!~!");
                string co_Cd = teamdata[0]; string query1 = teamdata[1];
                string Tablename = teamdata[2]; string imgcolumn = teamdata[3];
                string wherecluse = teamdata[4]; string imgname = teamdata[5];


                int res = 0;
                String onlypath = "";
                OpenConn(co_Cd);

                OracleCommand cmd = new OracleCommand(query1, con);
                cmd.ExecuteNonQuery();
                string extension = System.IO.Path.GetExtension(imgname);
                string imagename = imgname.Substring(0, imgname.Length - extension.Length);

                Image result = null;
                try
                {
                    byte[] imagebytes = Convert.FromBase64String(team.col5);

                    ImageFormat format = ImageFormat.Jpeg;
                    result = new Bitmap(new MemoryStream(imagebytes));
                    onlypath = "DP/" + imgname + ".jpg";
                    String filesavepath = AppDomain.CurrentDomain.BaseDirectory + "DP\\" + imgname + ".jpg";
                    using (Image imageTosave = result)
                    {
                        imageTosave.Save(filesavepath);
                    }
                }
                catch
                {
                    msg = "saved Without Image";
                }
                if (wherecluse.ToString().Trim().ToUpper().Substring(0, 5) == "WHERE")
                { wherecluse = wherecluse.ToString().Trim().Remove(0, 5); }
                mq = "update " + Tablename + " set " + imgcolumn + "='" + onlypath + "' where " + wherecluse.Trim() + "";
                msg = execute_cmd1(co_Cd, mq);


            }
            catch (Exception e)
            {
                msg = e.ToString();
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }

        public List<Team> Opencon(Team team)
        {
            //-------------------------

            Fn_set_andapp_opts(team.col1, "N");
            //------------------------

            try
            {

                con = new OracleConnection(con2Oracle(team.col1));
                if (con.State == ConnectionState.Closed)
                    try
                    {
                        con.Open();
                    }
                    catch (Exception e)
                    {
                        con = new OracleConnection(con2Oracle_FIN(team.col1));
                        con.Open();
                    }
                if (con.State.ToString() == "Open")
                {

                    dt = new DataTable();
                    dt = getdata(co_cd, "", "Select username as upname from EVAS where username='" + team.col2.ToUpper().Trim() + "'");

                    if (dt.Rows.Count > 0)
                    {
                        string pass = fn_seek_iname(co_cd, "", "Select LEVEL3PW as upass from evas where username='" + team.col2.ToUpper().Trim() + "'", "upass");
                        if (pass == team.col3.ToUpper().Trim()) { mq = "ok"; }
                        else { mq = "Wrong Password"; }
                    }
                    else { mq = "User not Exists"; }

                }
                else { mq = "Invalid Company Code"; }


            }
            catch (Exception)
            {
                mq = "Data Network Not Available";
            }
            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = mq, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;

        }

        public List<Team> ping_cocd(Team team)
        {
            //-------------------------

            Fn_set_andapp_opts(team.col1, "N");
            //------------------------

            Boolean result = false;

            mq = "False";


            try
            {
                con = new OracleConnection(con2Oracle(team.col1));
                if (con.State == ConnectionState.Closed)
                    try
                    {
                        con.Open();
                        mq0 = "-";
                    }
                    catch (Exception e)
                    {
                        mq0 = e.Message;
                        con = new OracleConnection(con2Oracle_FIN(team.col1));
                        con.Open();

                    }
                if (con.State.ToString() == "Open")
                {
                    string mycocd = team.col1.ToString();
                    if (team.col1.ToString() == "MCPL2" || team.col1.ToString() == "MCPL4") mycocd = "MCPL";
                    string pass = fn_seek_iname(team.col1, "-", "Select UPPER(TRIM(CODE)) as CODE, SUBSTR(TRIM(CODE),LENGTH(TRIM(CODE))-3,LENGTH(TRIM(CODE))) AS YR FROM CO WHERE CODE LIKE '" + mycocd + "%' ORDER BY YR DESC", "CODE");
                    pass = pass.Trim().Substring(0, pass.Length - 4).Trim().ToUpper();
                    if (team.col1.ToUpper() == "MCPL2" || team.col1.ToUpper() == "MCPL4") team.col1 = "MCPL";
                    if (pass == team.col1.Trim().ToUpper())
                    { result = true; }
                    else { result = false; }

                }

                mq = result.ToString();


            }
            catch (Exception e1)
            {
                // throw new Exception("Data Network Not Available");
                mq = result.ToString();
                mq0 = e1.Message;

            }
            mq = result.ToString();
            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team() { col1 = mq, col2 = "", col3 = "", col4 = "", col5 = mq0 });
            }
            catch { }
            return mylist;


        }

        public List<Team> execute_transaction(Team team)
        {
            //-------------------------

            Fn_set_andapp_opts(team.col1, "N");
            //------------------------

            String mq0 = "";

            mq0 = team.col2;

            string msg = "Data Saved";
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            OpenConn(team.col1);

            OracleTransaction transaction;
            transaction = con.BeginTransaction(IsolationLevel.ReadCommitted);
            OracleCommand command = con.CreateCommand();
            command.Transaction = transaction;

            try
            {

                for (int i = 0; i < qrlist.Length; i++)
                {
                    command.CommandText = qrlist[i].ToString().Trim();
                    command.ExecuteNonQuery();
                }
                transaction.Commit();

            }
            catch (Exception e)
            {
                transaction.Rollback();
                msg = e.ToString();
                msg = "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }

        public List<Team> Getlist(Team team)
        {
            //-------------------------

            Fn_set_andapp_opts(team.col1, "N");
            //------------------------

            DataTable dt = new DataTable();
            dt = getdata(team.col1, team.col2, team.col3);

            if (team.col4.Trim() == "-" || team.col4.Trim() == "") { }
            else { dt = searchDataTable(team.col4, dt); }
            List<Team> list = new List<Team>();

            if (team.col2 == "drlist")
            {
                list = (from DataRow row in dt.Rows
                        select new Team()
                        {
                            col1 = row["col1"].ToString(),
                            col2 = row["col2"].ToString(),
                            col3 = row["col3"].ToString(),
                            col4 = row["col4"].ToString(),
                            col5 = row["Image"].ToString(),

                        }).ToList();

            }
            else
            {
                list = (from DataRow row in dt.Rows
                        select new Team()
                        {
                            col1 = row["col1"].ToString(),
                            col2 = row["col2"].ToString(),
                            col3 = row["col3"].ToString(),
                            col4 = row["col4"].ToString(),
                            col5 = row["col5"].ToString(),


                        }).ToList();

            }
            return list;
        }

        public List<Team> Getlist_sale(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            //------------------------

            DataTable dt = new DataTable();

            if (team.col2.Trim().ToUpper().Equals("SALE"))
            {
                mq = "select to_char(Vchdate,'yyyymm') as col1,sum(amt_Sale) as col2,sum(amt_Exc) as col3,'0' aS col4,'0' as col5 from sale where vchdate between to_datE('" + team.col3 + "','dd/mm/yyyy') and to_datE('" + team.col4 + "','dd/mm/yyyy') GROup BY to_char(Vchdate,'yyyymm') order by to_char(Vchdate,'yyyymm')";
                dt = getdata(team.col1, "-", mq);
            }
            else
            {
                dt = getdata(team.col1, team.col2, team.col3);
                if (team.col4.Trim() == "-" || team.col4.Trim() == "") { }
                else { dt = searchDataTable(team.col4, dt); }
            }


            List<Team> list = new List<Team>();

            if (team.col2 == "drlist")
            {
                list = (from DataRow row in dt.Rows
                        select new Team()
                        {
                            col1 = row["col1"].ToString(),
                            col2 = row["col2"].ToString(),
                            col3 = row["col3"].ToString(),
                            col4 = row["col4"].ToString(),
                            col5 = row["Image"].ToString(),

                        }).ToList();

            }
            else
            {
                list = (from DataRow row in dt.Rows
                        select new Team()
                        {
                            col1 = row["col1"].ToString(),
                            col2 = row["col2"].ToString(),
                            col3 = row["col3"].ToString(),
                            col4 = row["col4"].ToString(),
                            col5 = row["col5"].ToString(),


                        }).ToList();

            }
            return list;
        }

        public List<Team> seek_iname(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            //------------------------

            string ReturnVal = "";
            dt = new DataTable();
            dt = getdata(team.col1, "-", team.col2);
            if (dt.Rows.Count > 0) ReturnVal = dt.Rows[0][team.col3].ToString();
            else ReturnVal = "0";

            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = ReturnVal, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }

        public List<Team> seek_iname_multi(Team team)
        {
            string err = "", results = "";
            string[] qrlist;
            string ReturnVal = "";
            int cnt = 0;
            try
            {
                qrlist = Regex.Split(team.col2, team.col5);
                cnt = qrlist.Length;
                for (int i = 0; i < cnt; i++)
                {
                    dt = new DataTable();
                    dt = getdata(team.col1, "-", qrlist[i].ToString().Trim());
                    if (dt.Rows.Count > 0) ReturnVal = dt.Rows[0][0].ToString();
                    else ReturnVal = "0";
                    if (results == "") results = results + ReturnVal;
                    else results = results + team.col5 + ReturnVal;
                }
            }
            catch (Exception e)
            {
                err = e.Message.ToString();

            }
            List<Team> mylist = new List<Team>();
            mylist.Add(new Team { col1 = results, col2 = "-", col3 = "-", col4 = "-", col5 = err, });
            return mylist;
        }

        public List<Team6> avg_aname(Team6 team6)
        {
            //-------------------------
            Fn_set_andapp_opts(team6.col1, "N");
            //------------------------

            string err = "", results = "";
            string Data_found = "N";
            string[] qrlist;
            string[] scodelist;
            string ReturnVal = "";
            int cnt = 0;
            int dtrows = 0;
            try
            {
                mq = "-";
                scodelist = Regex.Split(team6.col2, team6.col5);
                cnt = scodelist.Length;
                for (int i = 0; i < cnt; i++)
                {
                    if (mq.Equals("-")) mq = "'" + scodelist[i].ToString().Trim() + "'";
                    else mq = mq + ",'" + scodelist[i].ToString().Trim() + "'";

                }

                branch_cd = "branchcd!='DD' ";
                dt = new DataTable();
                dt = getdata(team6.col1, "-", "SELECT 'Success' as col1,trim(acode) as col2,trim(aname) as col3,trim(addr1)||','||trim(addr2) as col4,TRIM(nvl(addr3,'-')) as col5,TRIM(nvl(addr4,'-')) as col6 from famst where trim(acode) in (" + mq + ")");
                if (dt.Rows.Count > 0) ReturnVal = dt.Rows[0][0].ToString();
                List<Team6> list = new List<Team6>();

                if (1 == 2)
                {

                }
                else
                {
                    list = (from DataRow row in dt.Rows
                            select new Team6()
                            {
                                col1 = row["col1"].ToString(),
                                col2 = row["col2"].ToString(),
                                col3 = row["col3"].ToString(),
                                col4 = row["col4"].ToString(),
                                col5 = row["col5"].ToString(),
                                col6 = row["col6"].ToString(),
                            }).ToList();

                    dtrows = dt.Rows.Count;
                    if (dtrows <= 0)
                    {
                        list.Add(new Team6 { col1 = "Failure", col2 = team6.col2, col3 = "-", col4 = "-", col5 = "-", col6 = "Record not found", });
                    }

                }
                return list;
                //}
            }
            catch (Exception e)
            {
                err = e.Message.ToString();

            }
            List<Team6> mylist = new List<Team6>();
            mylist.Add(new Team6 { col1 = results, col2 = "-", col3 = "-", col4 = "-", col5 = "-", col6 = err, });
            return mylist;
        }


        public List<Team> avg_lastsrate(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            //------------------------

            string err = "", results = "";
            string Data_found = "N";
            string[] qrlist;
            string[] scodelist;
            string ReturnVal = "";
            int cnt = 0;
            int dtrows = 0;
            try
            {
                mq = "-";
                scodelist = Regex.Split(team.col2, team.col5);
                cnt = scodelist.Length;
                for (int i = 0; i < cnt; i++)
                {
                    if (mq.Equals("-")) mq = "'" + scodelist[i].ToString().Trim() + "'";
                    else mq = mq + ",'" + scodelist[i].ToString().Trim() + "'";

                }

                branch_cd = "branchcd!='DD' ";
                dt = new DataTable();
                dt = getdata(team.col1, "-", "SELECT col1,col2,col3,col4,col5 from (SELECT 'Success' as col1,trim(b.cpartno) as col2,trim(a.Irate) as col3,trim(a.cdisc) as col4,TRIM(nvl(a.currency,'-')) as col5,to_char(a.orddt,'yyyymmdd')||a.ordno as ords from somas a, item b  where a." + branch_cd + " and trim(A.icode)=trim(B.icode) and a.icat<>'Y' and a.irate>0 and trim(b.cpartno) in (" + mq + ") order by to_char(a.orddt,'yyyymmdd')||a.ordno desc) where rownum<2 ");
                if (dt.Rows.Count > 0) ReturnVal = dt.Rows[0][0].ToString();
                List<Team> list = new List<Team>();

                if (team.col2 == "drlist")
                {
                    list = (from DataRow row in dt.Rows
                            select new Team()
                            {

                                col1 = row["col1"].ToString(),
                                col2 = row["col2"].ToString(),
                                col3 = row["col3"].ToString(),
                                col4 = row["col4"].ToString(),
                                col5 = row["Image"].ToString(),

                            }).ToList();

                }
                else
                {
                    list = (from DataRow row in dt.Rows
                            select new Team()
                            {
                                col1 = row["col1"].ToString(),
                                col2 = row["col2"].ToString(),
                                col3 = row["col3"].ToString(),
                                col4 = row["col4"].ToString(),
                                col5 = row["col5"].ToString(),

                            }).ToList();

                    dtrows = dt.Rows.Count;
                    if (dtrows <= 0)
                    {
                        list.Add(new Team { col1 = "Failure", col2 = team.col2, col3 = "-", col4 = "-", col5 = "Record not found", });
                    }

                }
                return list;
                //}
            }
            catch (Exception e)
            {
                err = e.Message.ToString();

            }
            List<Team> mylist = new List<Team>();
            mylist.Add(new Team { col1 = results, col2 = "-", col3 = "-", col4 = "-", col5 = err, });
            return mylist;
        }

        public List<Team> avg_item(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            //------------------------

            string err = "", results = "";
            string[] qrlist;
            string[] scodelist;
            string ReturnVal = "";
            int cnt = 0;
            try
            {
                mq = "-";
                scodelist = Regex.Split(team.col2, team.col5);
                cnt = scodelist.Length;
                for (int i = 0; i < cnt; i++)
                {
                    if (mq.Equals("-")) mq = "'" + scodelist[i].ToString().Trim() + "'";
                    else mq = mq + ",'" + scodelist[i].ToString().Trim() + "'";

                }

                //qrlist = Regex.Split(team.col2, team.col5);
                //cnt = qrlist.Length;
                //for (int i = 0; i < cnt; i++)
                //{
                dt = new DataTable();
                dt = getdata(team.col1, "-", "SELECT trim(icode) as col1,trim(iNAME) as col2,TRIM(hscode) as col3,'-' as col4,'-' as col5  from item where trim(cpartno) in (" + mq + ")");
                if (dt.Rows.Count > 0) ReturnVal = dt.Rows[0][0].ToString();
                List<Team> list = new List<Team>();

                if (team.col2 == "drlist")
                {
                    list = (from DataRow row in dt.Rows
                            select new Team()
                            {
                                col1 = row["col1"].ToString(),
                                col2 = row["col2"].ToString(),
                                col3 = row["col3"].ToString(),
                                col4 = row["col4"].ToString(),
                                col5 = row["Image"].ToString(),

                            }).ToList();

                }
                else
                {
                    list = (from DataRow row in dt.Rows
                            select new Team()
                            {
                                col1 = row["col1"].ToString(),
                                col2 = row["col2"].ToString(),
                                col3 = row["col3"].ToString(),
                                col4 = row["col4"].ToString(),
                                col5 = row["col5"].ToString(),


                            }).ToList();

                }
                return list;
                //}
            }
            catch (Exception e)
            {
                err = e.Message.ToString();

            }
            List<Team> mylist = new List<Team>();
            mylist.Add(new Team { col1 = results, col2 = "-", col3 = "-", col4 = "-", col5 = err, });
            return mylist;
        }
        public List<Team> prod_entry(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            //------------------------
            return null;
        }

        public List<Team> aSorder_ins(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";

            //------------------------

            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-", icode_name = "-";
            String mq0 = "";

            mq0 = team.col2;

            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 

            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            //for advg
            string tabname = "SOMAS";
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();
                if (team.col1.ToString() == "MCPL2" || team.col1.ToString() == "MCPL4") mycocd = "MCPL";
                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }

                oDS = new DataSet();
                oporow = null;
                oDS = fill_schema(cocd, tabname);

                DataSet oDS1 = new DataSet();
                DataRow oporow1 = null;
                oDS1 = fill_schema(cocd, tabname);

                double basic = 0, discVal = 0, gTotal = 0;
                double cgst = 0, sgst = 0;
                for (int i = 0; i < qrlist.Length; i++)
                {
                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");
                    //for (int j = 0; j < colsVal.Length; j++)
                    //{
                    string pono = "", podt = "", bg = "", qty = "", rate = "", disc = "", ddate = "", ccode = "", proj = "", enqno = "", expLic = "", tptDtl = "", terms = "", shipFrom = "", shipTo = "", dest_cnt = "";
                    string pterms = "", serverPath = "", GAD = "", QAD = "", TPI = "", compFlag = "", flangeBolts = "", Gasket = "", Paint = "", RT = "", opr_accs = "", specialTesting = "", region = "", indSector = "";
                    string epc = "", pmc = "", service_app = "", specialField = "", comAg1 = "", percnt = "", comAg2 = "", percnt2 = "", dSchd = "", pDispDtl = "", packInst = "", shpMark = "", brand = "", rmk = "", Notify = "";
                    string sgstRate = "0", cgstRate = "0", staten = "", statenM = "", stType = "", currency = "", curr_rate = "", underBond = "", indExport = "", qrl = "";

                    #region Fields Getting
                    branchcd = colsVal[0].ToString().Trim();
                    type = colsVal[1].ToString().Trim();
                    acode = colsVal[2].ToString().Trim();
                    pono = colsVal[3].ToString().Trim();
                    podt = colsVal[4].ToString().Trim();
                    bg = colsVal[5].ToString().Trim();
                    icode = colsVal[6].ToString().Trim();
                    qty = colsVal[7].ToString().Trim();
                    rate = colsVal[8].ToString().Trim();
                    disc = colsVal[9].ToString().Trim();
                    ddate = colsVal[10].ToString().Trim();
                    ccode = colsVal[11].ToString().Trim();
                    proj = colsVal[12].ToString().Trim();
                    enqno = colsVal[13].ToString().Trim();
                    expLic = colsVal[14].ToString().Trim();
                    tptDtl = colsVal[15].ToString().Trim();
                    terms = colsVal[16].ToString().Trim();
                    shipFrom = colsVal[17].ToString().Trim();
                    shipTo = colsVal[18].ToString().Trim();
                    dest_cnt = colsVal[19].ToString().Trim();
                    pterms = colsVal[20].ToString().Trim();
                    serverPath = colsVal[21].ToString().Trim();
                    GAD = colsVal[22].ToString().Trim();
                    QAD = colsVal[23].ToString().Trim();
                    TPI = colsVal[24].ToString().Trim();
                    compFlag = colsVal[25].ToString().Trim();
                    flangeBolts = colsVal[26].ToString().Trim();
                    Gasket = colsVal[27].ToString().Trim();
                    Paint = colsVal[28].ToString().Trim();
                    RT = colsVal[29].ToString().Trim();
                    opr_accs = colsVal[30].ToString().Trim();
                    specialTesting = colsVal[31].ToString().Trim();
                    region = colsVal[32].ToString().Trim();
                    indSector = colsVal[33].ToString().Trim();
                    epc = colsVal[34].ToString().Trim();
                    pmc = colsVal[35].ToString().Trim();
                    service_app = colsVal[36].ToString().Trim();
                    specialField = colsVal[37].ToString().Trim();
                    comAg1 = colsVal[38].ToString().Trim();
                    percnt = colsVal[39].ToString().Trim();
                    comAg2 = colsVal[40].ToString().Trim();
                    percnt2 = colsVal[41].ToString().Trim();
                    dSchd = colsVal[42].ToString().Trim();
                    pDispDtl = colsVal[43].ToString().Trim();
                    packInst = colsVal[44].ToString().Trim();
                    shpMark = colsVal[45].ToString().Trim();
                    brand = colsVal[46].ToString().Trim();
                    rmk = colsVal[47].ToString().Trim();
                    Notify = colsVal[48].ToString().Trim();
                    currency = colsVal[49].ToString().Trim();
                    curr_rate = colsVal[50].ToString().Trim();
                    underBond = colsVal[51].ToString().Trim();
                    indExport = colsVal[52].ToString().Trim();
                    qrl = colsVal[53].ToString().Trim();
                    #endregion

                    //}

                    //06/07/2021  -- new changes for product code
                    icode_name = icode;
                    //end----------

                    //22/06/2020 -- new changes
                    icode = fn_seek_iname(team.col1, branchcd, "SELECT TRIM(ICODE) AS ICODE FROM ITEM WHERE TRIM(UPPER(CPARTNO))=TRIM(UPPER('" + icode + "'))", "ICODE");

                    // Self State Name
                    staten = fn_seek_iname(team.col1, branchcd, "SELECT STATEN FROM FAMST WHERE TRIM(ACODE)='" + acode + "'", "STATEN");
                    // Customer State Name
                    statenM = fn_seek_iname(team.col1, branchcd, "SELECT STATENM FROM TYPE WHERE TRIM(TYPE1)='" + acode + "'", "STATEN");

                    #region Calculation Part
                    //********                    
                    if (makeDouble(disc) > 0)
                    {
                        discVal = (makeDouble(qty) * makeDouble(rate) * (makeDouble(disc) / 100));
                    }
                    else disc = "0";

                    basic = Math.Round((makeDouble(qty) * makeDouble(rate)) - discVal, 2);
                    //********
                    if (statenM == staten)
                    {
                        cgstRate = fn_seek_iname(team.col1, branchcd, "select b.num4 from typegrp b,item a where trim(a.hscode)=trim(b.acref) and b.id='T1' and trim(a.icode)='" + icode + "' ", "num4");
                        sgstRate = cgstRate;
                        stType = "CG";
                        if (indExport == "Y")
                        {
                            cgstRate = "0.05";
                            sgstRate = "0.05";
                        }
                        if (makeDouble(cgstRate) > 0)
                        {
                            cgst += basic * makeDouble(cgstRate) / 100;
                            sgst += basic * makeDouble(sgstRate) / 100;
                        }
                    }
                    else
                    {
                        cgstRate = fn_seek_iname(team.col1, branchcd, "select b.num6 from typegrp b,item a where trim(a.hscode)=trim(b.acref) and b.id='T1' and trim(a.icode)='" + icode + "' ", "num6");
                        sgstRate = "0";
                        stType = "IG";
                        if (indExport == "Y")
                        {
                            sgstRate = "0";
                            cgstRate = "0.1";
                        }
                        if (makeDouble(cgstRate) > 0)
                        {
                            cgst += basic * makeDouble(cgstRate) / 100;
                            sgst += 0;
                        }
                    }

                    if (underBond == "Y")
                    {
                        cgst = 0;
                        sgst = 0;
                        cgstRate = "0";
                        sgstRate = "0";
                    }

                    gTotal += (basic + cgst + sgst);
                    #endregion

                    vchdate = fn_seek_iname(team.col1, "00", "SELECT TO_cHAR(SYSDATE,'DD/MM/YYYY') AS SYSD FROM DUAL", "SYSD");

                    #region Vnum Generation
                    if (i == 0)
                    {
                        int p = 0;
                        string error = "Y";
                        do
                        {
                            vchnum = next_no(team.col1, branchcd, "-", "select max(ordno)+" + p + " as max from " + tabname + " where branchcd='" + branchcd + "' and type ='" + type + "' and orddt " + xprdRange + " ", 6, "max");
                            error = fn_chk_pk(branchcd + type + vchnum + vchdate, team.col1, branchcd, type, vchnum, vchdate, acode, "WEBAPI").Trim();
                            if (p > 20)
                            { error = "N"; throw new Exception("Test Exception"); }
                            p++;
                        }
                        while (error.Equals("Y"));
                    }
                    #endregion

                    vchdate = System.DateTime.Now.Date.ToString("dd/MM/yyyy"); //fn_seek_iname(team.col1, "00", "SELECT TO_cHAR(SYSDATE,'DD/MM/YYYY') AS SYSD FROM DUAL", "SYSD");

                    #region Saving to Oracle in 4 series
                    oporow = oDS.Tables[0].NewRow();
                    oporow["BRANCHCD"] = branchcd;
                    oporow["ORIGNALBR"] = branchcd;
                    oporow["TYPE"] = type;
                    oporow["ORDNO"] = vchnum;
                    oporow["ORDDT"] = DateTime.ParseExact(vchdate, "dd/MM/yyyy", null).ToString();
                    oporow["ACODE"] = acode;
                    oporow["PORDNO"] = pono;
                    //podt = fn_seek_iname(cocd, branchcd, "SELECT TO_DATE('" + podt + "','dd/mm/yyyy') as podt from dual ", "podt");
                    oporow["PORDDT"] = Convert.ToDateTime(podt).ToString("dd/MM/yyyy");
                    oporow["AMDT2"] = bg;
                    oporow["ICODE"] = icode.Trim();
                    oporow["CINAME"] = fn_seek_iname(cocd, branchcd, "SELECT SUBSTR(INAME,1,150) AS INAME FROM ITEM WHERE TRIM(ICODE)='" + icode.Trim() + "'", "INAME");
                    oporow["QTYORD"] = qty;
                    oporow["irate"] = rate;
                    oporow["CDISC"] = disc;
                    ddate = fn_seek_iname(cocd, branchcd, "SELECT TO_DATE('" + ddate + "','dd/MM/yyyy') as podt from dual ", "podt");
                    oporow["CU_CHLDT"] = Convert.ToDateTime(ddate).ToString("dd/MM/yyyy");
                    oporow["CSCODE"] = ccode;
                    oporow["WORK_ORDNO"] = proj;
                    oporow["INSPBY"] = enqno;
                    oporow["EXPLIC"] = expLic;
                    oporow["TPTDTL"] = tptDtl;
                    if (type == "4F") oporow["MS_CONT"] = terms;
                    else oporow["GMT_SHADE"] = terms;
                    oporow["SHIPFROM"] = shipFrom;
                    oporow["SHIPTO"] = shipTo;
                    oporow["DESTCOUNT"] = dest_cnt;
                    oporow["THRU"] = pterms;
                    oporow["ATTACH1"] = serverPath;

                    //oporow["CONT1"] = GAD;
                    //oporow["CONT2"] = QAD;
                    //oporow["CONT3"] = TPI;
                    //oporow["CONT4"] = compFlag;
                    //oporow["CONT5"] = flangeBolts;
                    //oporow["DESC0"] = Gasket;
                    //oporow["DESC1"] = Paint;
                    //oporow["DESC2"] = RT;
                    //oporow["DESC3"] = opr_accs;
                    //oporow["DESC4"] = specialTesting;
                    //oporow["DESC5"] = region;
                    //oporow["DESC6"] = indSector;
                    //oporow["DESC7"] = epc;
                    //oporow["DESC8"] = pmc;
                    //oporow["SP_FLD1"] = service_app;
                    //oporow["SP_FLD2"] = specialField;
                    //oporow["SP_FLD3"] = comAg1;
                    //oporow["SP_FLD4"] = percnt;
                    //oporow["SP_FLD5"] = comAg2;
                    //oporow["SP_FLD6"] = percnt2;

                    if (type == "4F") oporow["GMT_SHADE"] = dSchd;
                    oporow["PREDISP"] = pDispDtl;
                    oporow["PACKINST"] = packInst;
                    oporow["SHIPMARK"] = shpMark;
                    oporow["BUSI_EXPECT"] = brand;
                    oporow["REMARK"] = rmk;
                    oporow["BUSI_POTENT"] = Notify;

                    oporow["CURRENCY"] = currency;
                    oporow["CURR_RATE"] = curr_rate;

                    oporow["CDRGNO"] = vchnum + "." + (i + 1);
                    oporow["SRNO"] = i;

                    oporow["PEXC"] = cgstRate;
                    oporow["EXCISE"] = cgst;

                    oporow["PTAX"] = sgstRate;
                    oporow["CESS"] = sgst;

                    oporow["ST_TYPE"] = stType;

                    oporow["BASIC"] = Math.Round(basic, 2);
                    oporow["TOTAL"] = Math.Round(gTotal, 2);

                    oporow["ENT_BY"] = team.col3;
                    oporow["ent_dt"] = DateTime.Now.ToString();
                    oporow["EdT_BY"] = "-";
                    oporow["edt_dt"] = DateTime.Now.ToString();

                    oporow["APP_BY"] = "-";
                    oporow["APP_dt"] = DateTime.Now.ToString();

                    oporow["PREFIX"] = "-";
                    oporow["ICAT"] = "N";

                    oporow["desc_"] = "-";
                    oporow["netrate"] = "0";
                    oporow["ptax"] = "0";
                    oporow["DELIVERY"] = "0";
                    oporow["QD"] = "0";
                    oporow["SD"] = "0";
                    oporow["CLASS"] = "0";
                    oporow["QTYSUPP"] = "0";
                    oporow["QTYBAL"] = "0";
                    oporow["FRGHT"] = "0";
                    oporow["IEXC_ADDL"] = "0";
                    oporow["IPACK"] = "0";
                    oporow["TAXES"] = "0";
                    oporow["INST1"] = "0";
                    oporow["INST2"] = "0";
                    oporow["INST3"] = "0";
                    oporow["SHECESS"] = "0";
                    //06/07/2021---new changes for saving in cpartno
                    oporow["CPARTNO"] = icode_name;
                    oporow["DESC10"] = qrl;
                    //---end
                    oDS.Tables[0].Rows.Add(oporow);
                    #endregion

                    #region Saving to Oracle in 8 series
                    oporow1 = oDS1.Tables[0].NewRow();
                    oporow1["BRANCHCD"] = branchcd;
                    oporow1["ORIGNALBR"] = branchcd;
                    oporow1["TYPE"] = "8" + type.Substring(1, 1);
                    oporow1["ORDNO"] = vchnum;
                    oporow1["ORDDT"] = DateTime.ParseExact(vchdate, "dd/MM/yyyy", null).ToString();

                    oporow1["ACODE"] = acode;
                    oporow1["PORDNO"] = pono;
                    oporow1["PORDDT"] = Convert.ToDateTime(podt).ToString("dd/MM/yyyy");
                    oporow1["AMDT2"] = bg;

                    oporow1["CU_CHLDT"] = Convert.ToDateTime(ddate).ToString("dd/MM/yyyy");
                    oporow1["CSCODE"] = ccode;
                    oporow1["WORK_ORDNO"] = proj;
                    oporow1["INSPBY"] = enqno;
                    oporow1["EXPLIC"] = expLic;
                    oporow1["TPTDTL"] = tptDtl;
                    if (type == "4F") oporow1["MS_CONT"] = terms;
                    else oporow1["GMT_SHADE"] = terms;
                    oporow1["SHIPFROM"] = shipFrom;
                    oporow1["SHIPTO"] = shipTo;
                    oporow1["DESTCOUNT"] = dest_cnt;
                    oporow1["THRU"] = pterms;
                    oporow1["ATTACH1"] = serverPath;

                    oporow1["CONT1"] = GAD;
                    oporow1["CONT2"] = QAD;
                    oporow1["CONT3"] = TPI;
                    oporow1["CONT4"] = compFlag;
                    oporow1["CONT5"] = flangeBolts;
                    oporow1["DESC0"] = Gasket;
                    oporow1["DESC1"] = Paint;
                    oporow1["DESC2"] = RT;
                    oporow1["DESC3"] = opr_accs;
                    oporow1["DESC4"] = specialTesting;
                    oporow1["DESC5"] = region;
                    oporow1["DESC6"] = indSector;
                    oporow1["DESC7"] = epc;
                    oporow1["DESC8"] = pmc;
                    oporow1["SP_FLD1"] = service_app;
                    oporow1["SP_FLD2"] = specialField;
                    oporow1["SP_FLD3"] = comAg1;
                    oporow1["SP_FLD4"] = percnt;
                    oporow1["SP_FLD5"] = comAg2;
                    oporow1["SP_FLD6"] = percnt2;

                    if (type == "4F") oporow1["GMT_SHADE"] = dSchd;
                    oporow1["PREDISP"] = pDispDtl;
                    oporow1["PACKINST"] = packInst;
                    oporow1["SHIPMARK"] = shpMark;
                    oporow1["BUSI_EXPECT"] = brand;
                    oporow1["REMARK"] = rmk;
                    oporow1["BUSI_POTENT"] = Notify;

                    oporow1["CURRENCY"] = currency;
                    oporow1["CURR_RATE"] = curr_rate;

                    oporow1["CDRGNO"] = vchnum + "." + (i + 1);
                    oporow1["SRNO"] = i;

                    //oporow1["PEXC"] = cgstRate;
                    //oporow1["EXCISE"] = cgst;

                    //oporow1["PTAX"] = sgstRate;
                    //oporow1["CESS"] = sgst;

                    //oporow1["ST_TYPE"] = stType;

                    //oporow1["BASIC"] = Math.Round(basic, 2);
                    //oporow1["TOTAL"] = Math.Round(gTotal, 2);

                    oporow1["ENT_BY"] = team.col3;
                    oporow1["ent_dt"] = DateTime.Now.ToString();
                    oporow1["EDT_BY"] = "-";
                    oporow1["EDT_DT"] = DateTime.Now.ToString();
                    oporow1["ent_dt"] = DateTime.Now.ToString();
                    oporow1["APP_BY"] = "-";
                    oporow1["APP_dt"] = DateTime.Now.ToString();

                    oporow1["PREFIX"] = "-";
                    oporow1["ICAT"] = "N";

                    oporow1["desc_"] = "-";
                    oporow1["netrate"] = "0";
                    oporow1["ptax"] = "0";
                    oporow1["DELIVERY"] = "0";
                    oporow1["QD"] = "0";
                    oporow1["SD"] = "0";
                    oporow1["CLASS"] = "0";
                    oporow1["QTYSUPP"] = "0";
                    oporow1["QTYBAL"] = "0";
                    oporow1["FRGHT"] = "0";
                    oporow1["IEXC_ADDL"] = "0";
                    oporow1["IPACK"] = "0";
                    oporow1["TAXES"] = "0";
                    oporow1["INST1"] = "0";
                    oporow1["INST2"] = "0";
                    oporow1["INST3"] = "0";
                    oporow1["SHECESS"] = "0";
                    //06/07/2021---new changes for saving in cpartno
                    oporow1["CPARTNO"] = icode_name;
                    oporow1["DESC10"] = qrl;
                    //---end
                    oDS1.Tables[0].Rows.Add(oporow1);
                    #endregion

                }
                save_data(cocd, oDS, tabname);
                save_data(cocd, oDS1, tabname);
            }
            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }




        public List<Team> avg_so_ent(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            //------------------------


            string brachcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";
            String mq0 = "";

            mq0 = team.col2;

            string msg = "Data Saved";
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            OpenConn(team.col1);

            OracleTransaction transaction;
            transaction = con.BeginTransaction(IsolationLevel.ReadCommitted);
            OracleCommand command = con.CreateCommand();
            command.Transaction = transaction;

            try
            {

                for (int i = 0; i < qrlist.Length; i++)
                {

                    brachcd = qrlist[i].ToString().Split('#')[0].ToString();
                    type = "RM";
                    vchnum = next_no(team.col1, brachcd, "-", "select max(vchnum) as max from scratch where type ='RM'", 6, "max");
                    vchdate = Fn_curr_dt(team.col1, brachcd, "-");
                    icode = qrlist[i].ToString().Split('#')[1].ToString();
                    acode = qrlist[i].ToString().Split('#')[2].ToString();
                    mq = "insert into scratch (branchcd,type,vchnum,vchdate,icode,acode) values('" + brachcd + "','" + type + "','" + vchnum + "',to_date('" + vchdate + "','dd/MM/yyyy'),'" + icode + "','" + acode + "')";

                    command.CommandText = mq;
                    command.ExecuteNonQuery();
                }
                transaction.Commit();

            }
            catch (Exception e)
            {
                transaction.Rollback();
                msg = e.ToString();
                msg = "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }



        public List<Team> avg_so_10ent(Team10 team10)
        {
            //-------------------------
            Fn_set_andapp_opts(team10.col1, "N");
            //------------------------

            string brachcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";
            String mq0 = "";

            mq0 = team10.col2;

            string msg = "Data Saved";
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            OpenConn(team10.col1);

            string abcd;
            abcd = team10.col1;

            OracleTransaction transaction;
            transaction = con.BeginTransaction(IsolationLevel.ReadCommitted);
            OracleCommand command = con.CreateCommand();
            command.Transaction = transaction;

            try
            {

                for (int i = 0; i < qrlist.Length; i++)
                {

                    brachcd = qrlist[i].ToString().Split('#')[0].ToString();
                    type = "RM";
                    vchnum = next_no(team10.col1, brachcd, "-", "select max(vchnum) as max from scratch where type ='RM'", 6, "max");
                    vchdate = Fn_curr_dt(team10.col1, brachcd, "-");
                    icode = qrlist[i].ToString().Split('#')[1].ToString();
                    acode = qrlist[i].ToString().Split('#')[2].ToString();
                    mq = "insert into scratch (branchcd,type,vchnum,vchdate,icode,acode) values('" + brachcd + "','" + type + "','" + vchnum + "',to_date('" + vchdate + "','dd/MM/yyyy'),'" + icode + "','" + acode + "')";

                    command.CommandText = mq;
                    command.ExecuteNonQuery();
                }
                transaction.Commit();

            }
            catch (Exception e)
            {
                transaction.Rollback();
                msg = e.ToString();
                msg = "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }
        public void chk_email_info(string co_cd, string check_file)
        {
            string str, path, xvip, xport;
            if (co_cd.Substring(0, 1) == "A" || co_cd.Substring(0, 1) == "B" || co_cd.Substring(0, 1) == "C" || co_cd.Substring(0, 1) == "D" || co_cd.Substring(0, 1) == "E")
            {
                sender_id = "erp1@finsys.co.in";
                pwd = "erp_2014";
                vsmtp = "smtp.bizmail.yahoo.com";
            }
            if (co_cd.Substring(0, 1) == "F" || co_cd.Substring(0, 1) == "G" || co_cd.Substring(0, 1) == "H" || co_cd.Substring(0, 1) == "I" || co_cd.Substring(0, 1) == "J")
            {
                sender_id = "erp2@finsys.co.in";
                pwd = "erp_2014";
                vsmtp = "smtp.bizmail.yahoo.com";
            }
            if (co_cd.Substring(0, 1) == "K" || co_cd.Substring(0, 1) == "L" || co_cd.Substring(0, 1) == "M" || co_cd.Substring(0, 1) == "N" || co_cd.Substring(0, 1) == "O")
            {
                sender_id = "erp3@finsys.co.in";
                pwd = "erp_2014";
                vsmtp = "smtp.bizmail.yahoo.com";
            }
            if (co_cd.Substring(0, 1) == "P" || co_cd.Substring(0, 1) == "Q" || co_cd.Substring(0, 1) == "R" || co_cd.Substring(0, 1) == "S" || co_cd.Substring(0, 1) == "T")
            {
                sender_id = "erp4@finsys.co.in";
                pwd = "erp_2014";
                vsmtp = "smtp.bizmail.yahoo.com";
            }
            if (co_cd.Substring(0, 1) == "U" || co_cd.Substring(0, 1) == "V" || co_cd.Substring(0, 1) == "W" || co_cd.Substring(0, 1) == "X" || co_cd.Substring(0, 1) == "Y" || co_cd.Substring(0, 1) == "Z")
            {
                sender_id = "erp4@finsys.co.in";
                pwd = "erp_2014";
                vsmtp = "smtp.bizmail.yahoo.com";
            }
            xvip = "1";
            xport = "465";
            path = @"c:\FIN_ERP\email_info.txt";
            if (check_file == "2")
            {
                // Checking for Second file
                path = @"c:\FIN_ERP\email_info2.txt";
                if (File.Exists(path))
                {
                    StreamReader sr = new StreamReader(path);
                    str = sr.ReadToEnd().Trim();
                    if (str.Contains("\r")) str = str.Replace("\r", ",");
                    if (str.Contains("\n")) str = str.Replace("\n", ",");
                    str = str.Replace(",,", ",");
                    if (str.Split(',')[0].ToString().Trim() == "Email From") { }
                    else
                    {
                        sender_id = str.Split(',')[0].ToString().Trim();
                        pwd = str.Split(',')[1].ToString().Trim();
                        vsmtp = str.Split(',')[2].ToString().Trim();
                        xvip = str.Split(',')[3].ToString().Trim();
                        xport = str.Split(',')[4].ToString().Trim();
                        //ViewState["CCMID"] = str.Split('=')[1].ToString().Trim();
                    }
                }
                else
                {
                    StreamWriter tw = File.AppendText(path);
                    tw.WriteLine("Email From");
                    tw.WriteLine("Password");
                    tw.WriteLine("SMTP");
                    tw.WriteLine("SSL==> 1 if True, 0 if false");
                    tw.WriteLine("PORT");
                    //tw.WriteLine("CC=");
                    tw.Close();
                }
                vssl = Convert.ToInt32(xvip);
                vport = Convert.ToInt32(xport);
            }
            else
            {
                if (File.Exists(path))
                {
                    StreamReader sr = new StreamReader(path);
                    str = sr.ReadToEnd().Trim();
                    if (str.Contains("\r")) str = str.Replace("\r", ",");
                    if (str.Contains("\n")) str = str.Replace("\n", ",");
                    str = str.Replace(",,", ",");
                    if (str.Split(',')[0].ToString().Trim() == "Email From") { }
                    else
                    {
                        sender_id = str.Split(',')[0].ToString().Trim();
                        pwd = str.Split(',')[1].ToString().Trim();
                        vsmtp = str.Split(',')[2].ToString().Trim();
                        xvip = str.Split(',')[3].ToString().Trim();
                        xport = str.Split(',')[4].ToString().Trim();
                        //ViewState["CCMID"] = str.Split('=')[1].ToString().Trim();
                    }
                }
                else
                {
                    StreamWriter tw = File.AppendText(path);
                    tw.WriteLine("Email From");
                    tw.WriteLine("Password");
                    tw.WriteLine("SMTP");
                    tw.WriteLine("SSL==> 1 if True, 0 if false");
                    tw.WriteLine("PORT");
                    //tw.WriteLine("CC=");
                    tw.Close();
                }
                vssl = Convert.ToInt32(xvip);
                vport = Convert.ToInt32(xport);
            }
        }
        public void sendemailNew(string cocd, string mailto, string cc, string bcc, string Subject, string body)
        {
            string smtp_host, sender, send_name, password;
            int port = 587;
            Boolean ssl = true;

            chk_email_info(cocd, "1");

            sender = sender_id;
            send_name = sender_id;
            password = pwd;
            smtp_host = vsmtp;
            port = vport;
            if (vssl == 1) ssl = true;
            else ssl = false;


            try
            {
                String[] mailsto = mailto.Split(';');
                String[] mailscc = cc.Split(';');
                String[] mailsbcc = bcc.Split(';');


                MailAddress fromm = new MailAddress(sender, send_name);
                MailAddress tom = new MailAddress(mailsto[0].ToString(), "");
                MailMessage mail = new MailMessage(fromm, tom);
                mail.Subject = Subject;
                mail.Body = body;
                for (int i = 1; i < mailsto.Length; i++)
                {
                    if (mailsto[i].ToString().Trim().Length > 5 && mailsto[i].ToString().Trim().Contains('@'))
                    { mail.To.Add(mailsto[i].ToString()); }
                }
                for (int i = 0; i < mailscc.Length; i++)
                {
                    if (mailscc[i].ToString().Trim().Length > 5 && mailsto[i].ToString().Trim().Contains('@'))
                    { mail.CC.Add(mailscc[i].ToString()); }
                }
                for (int i = 0; i < mailsbcc.Length; i++)
                {
                    if (mailsbcc[i].ToString().Trim().Length > 5 && mailsto[i].ToString().Trim().Contains('@'))
                    { mail.Bcc.Add(mailsbcc[i].ToString()); }
                }


                mail.IsBodyHtml = true;

                var smtp = new System.Net.Mail.SmtpClient();
                {

                    smtp.Host = smtp_host;
                    smtp.Port = port;
                    smtp.EnableSsl = ssl;
                    smtp.DeliveryMethod = System.Net.Mail.SmtpDeliveryMethod.Network;
                    smtp.Credentials = new System.Net.NetworkCredential(sender, password);
                }
                smtp.Send(mail);
                mq = "Mail Sent Successfully";
            }
            catch (Exception ex)
            {
                mq = "Mail Sending Failed : " + ex.ToString();
            }
        }
        public List<Team> SendEmail(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            //------------------------

            String[] teamdata = Regex.Split(team.col1, "!~!~!");

            string firm = teamdata[0];
            string mailto = teamdata[1];
            string cc = teamdata[2];
            string bcc = teamdata[3];
            string smtp_host = teamdata[4];
            string sender = teamdata[5];
            string send_name = teamdata[6];
            string password = teamdata[7];
            int port = 587;
            Boolean ssl = true;

            try
            {
                port = Convert.ToInt32(teamdata[8]);
                ssl = Convert.ToBoolean(teamdata[9]);
            }
            catch { }

            string Subject = teamdata[10];
            string body = teamdata[11];

            if (Convert.ToString(sender).Length < 2)
            {
                chk_email_info(firm, "1");

                sender = sender_id;
                send_name = sender_id;
                password = pwd;
                smtp_host = vsmtp;
                port = vport;
                if (vssl == 1) ssl = true;
                else ssl = false;
            }

            try
            {
                String[] mailsto = mailto.Split(';');
                String[] mailscc = cc.Split(';');
                String[] mailsbcc = bcc.Split(';');


                MailAddress fromm = new MailAddress(sender, send_name);
                MailAddress tom = new MailAddress(mailsto[0].ToString(), "");
                MailMessage mail = new MailMessage(fromm, tom);
                mail.Subject = Subject;
                mail.Body = body;
                for (int i = 1; i < mailsto.Length; i++)
                {
                    if (mailsto[i].ToString().Trim().Length > 5 && mailsto[i].ToString().Trim().Contains('@'))
                    { mail.To.Add(mailsto[i].ToString()); }
                }
                for (int i = 0; i < mailscc.Length; i++)
                {
                    if (mailscc[i].ToString().Trim().Length > 5 && mailsto[i].ToString().Trim().Contains('@'))
                    { mail.CC.Add(mailscc[i].ToString()); }
                }
                for (int i = 0; i < mailsbcc.Length; i++)
                {
                    if (mailsbcc[i].ToString().Trim().Length > 5 && mailsto[i].ToString().Trim().Contains('@'))
                    { mail.Bcc.Add(mailsbcc[i].ToString()); }
                }


                mail.IsBodyHtml = true;

                var smtp = new System.Net.Mail.SmtpClient();
                {

                    smtp.Host = smtp_host;
                    smtp.Port = port;
                    smtp.EnableSsl = ssl;
                    smtp.DeliveryMethod = System.Net.Mail.SmtpDeliveryMethod.Network;
                    smtp.Credentials = new System.Net.NetworkCredential(sender, password);
                }
                smtp.Send(mail);
                mq = "Mail Sent Successfully";
            }
            catch (Exception ex)
            {
                mq = "Mail Sending Failed : " + ex.ToString();
            }

            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = mq, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }

        public List<Team> chk_pk(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            //------------------------

            String[] teamdata = Regex.Split(team.col1, "!~!~!");
            string pco_cd = teamdata[0]; string pk_str = teamdata[1];
            string mbr = teamdata[2];
            string vty = teamdata[3]; string vchnum = teamdata[4];
            string vchdate = teamdata[5]; string acode = teamdata[6];
            string uname = teamdata[7];
            try
            {
                DataSet oDS1 = new DataSet(); oporow = null;
                oDS1 = fill_schema(pco_cd, "Wsr_ctrl");
                oporow = oDS1.Tables[0].NewRow();
                oporow["FINPKFLD"] = pk_str.ToUpper();
                oporow["BRANCHCD"] = mbr;
                oporow["TYPE"] = vty;
                oporow["VCHNUM"] = vchnum;
                oporow["VCHDATE"] = vchdate;
                oporow["ENT_BY"] = uname;
                oporow["ent_dt"] = DateTime.Now.ToString();

                oporow["PRINTED"] = 0;
                oporow["ACODE"] = acode;
                oDS1.Tables[0].Rows.Add(oporow);
                save_data(pco_cd, oDS1, "wsr_ctrl");
                oDS1.Dispose();
                pk_error = "N";
            }
            catch { pk_error = "Y"; }

            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = pk_error, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;

        }


        ///for Apple test app on 03/04/2017
        ///
        public List<Team> login(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            //------------------------

            string result = "Wrong Credentials";
            string password = "";
            string cd = "UKB";


            try
            {
                con = new OracleConnection(con2Oracle(cd));
                if (con.State == ConnectionState.Closed)
                    try
                    {
                        con.Open();
                        mq0 = "-";
                    }
                    catch (Exception e)
                    {
                        mq0 = e.Message;
                        con = new OracleConnection(con2Oracle_FIN(cd));
                        con.Open();

                    }
                if (con.State.ToString() == "Open")
                {
                    DataTable dtl = new DataTable();
                    dtl = getdata(cd, "-", "select upper(trim(username)) as username,upper(trim(level3pw)) as passwd from evas where username='" + team.col1.Trim().ToUpper() + "'");
                    if (dtl.Rows.Count < 1) { result = "Wrong User Name"; }
                    else
                    {
                        password = dtl.Rows[0][1].ToString();
                    }

                    if (password.Trim().ToUpper() != team.col2.Trim().ToUpper())
                    {
                        result = "Wrong Password";
                    }
                    else { result = "OK"; }


                }

                mq = result.ToString();


            }
            catch (Exception e1)
            {
                // throw new Exception("Data Network Not Available");
                mq = result.ToString();
                mq0 = e1.Message;

            }
            mq = result.ToString();
            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team() { col1 = mq, col2 = "", col3 = "", col4 = "", col5 = mq0 });
            }
            catch { }
            return mylist;


        }


        public List<Team> loginAndroid(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            //------------------------

            string result = "Wrong Credentials";
            string password = "";
            string cd = team.col1;
            string mq3 = "", mq4 = "";

            try
            {
                con = new OracleConnection(con2Oracle(cd));
                if (con.State == ConnectionState.Closed)
                    try
                    {
                        con.Open();
                        mq0 = "-";
                    }
                    catch (Exception e)
                    {
                        mq0 = e.Message;
                        con = new OracleConnection(con2Oracle_FIN(cd));
                        con.Open();

                    }
                if (con.State.ToString() == "Open")
                {
                    execute_cmd1(cd, "ALTER TABLE EVAS ADD AND_MIS CHAR(1) DEFAULT 'N'");
                    execute_cmd1(cd, "ALTER TABLE EVAS ADD AND_PID VARCHAR(50) DEFAULT '-'");

                    DataTable dtl = new DataTable();
                    dtl = getdata(cd, "-", "select upper(trim(username)) as username,upper(trim(level3pw)) as passwd,USERID,ulevel,EMAILID,CONTACTNO,NVL(AND_MIS,'N') AS AND_MIS,AND_PID from evas where username='" + team.col2.Trim().ToUpper() + "' and NVL(CAN_TNS,'N')='Y'");
                    if (dtl.Rows.Count < 1) { result = "Wrong User Name"; }
                    else
                    {
                        password = dtl.Rows[0][1].ToString();
                        mq0 = dtl.Rows[0]["userid"].ToString();
                        mq1 = dtl.Rows[0]["ulevel"].ToString();
                        mq3 = dtl.Rows[0]["EMAILID"].ToString();
                        mq4 = dtl.Rows[0]["CONTACTNO"].ToString();
                        if (password.Trim().ToUpper() != team.col3.Trim().ToUpper())
                        {
                            result = "Wrong Password";
                        }
                        else
                        {
                            if (dtl.Rows[0]["AND_MIS"].ToString().Trim() == "N")
                            {
                                result = "To Activate the App For This User, Please Contact Finsys Support";
                            }
                            else
                            {
                                if (dtl.Rows[0]["AND_PID"].ToString().Trim().Length > 2)
                                {
                                    if (dtl.Rows[0]["AND_PID"].ToString().Trim().ToUpper() == team.col4.ToString().Trim().ToUpper())
                                    {
                                        result = "OK";
                                    }
                                    else { if (team.col1 == "CHPL") { result = "OK"; } else { result = "Device ID Mismatch, Please Contact Finsys Support"; } }
                                }
                                else
                                {
                                    execute_cmd1(cd, "UPDATE EVAS SET AND_PID='" + team.col4.ToString().Trim().ToUpper() + "' WHERE USERNAME='" + team.col2.ToString().ToUpper().ToUpper() + "'");
                                    result = "OK";

                                    string chk_opt = "-";
                                    chk_opt = fn_seek_iname(team.col1, "", "Select op_Id from map_opt where op_id=10.1040", "op_Id");
                                    if (chk_opt != "10.1040")
                                    {
                                        try
                                        {
                                            mq = "insert into map_opt values(10.1040,10,'L','Material Inward','EP104')";
                                            mq1 = execute_cmd1(team.col1, mq);
                                        }
                                        catch
                                        {
                                        }

                                        chk_opt = "-";
                                        chk_opt = fn_seek_iname(team.col1, "", "Select op_Id from map_opt where op_id=40.4030", "op_Id");
                                        if (chk_opt != "40.4030")
                                        {
                                            try
                                            {
                                                mq = "insert into map_opt values(40.4030,40,'L','Month Wise Expenses','EP403')";
                                                mq1 = execute_cmd1(team.col1, mq);
                                            }
                                            catch
                                            {
                                            }
                                        }
                                        try
                                        {
                                            mq = "delete from map_opt where op_id in (50.000,50.5010,50.5020)";
                                            mq1 = execute_cmd1(team.col1, mq);
                                        }
                                        catch
                                        {
                                        }
                                    }
                                    //-------------------------------------------------------------------------------
                                }
                            }
                        }
                    }


                }

                mq = result.ToString();


            }
            catch (Exception e1)
            {
                // throw new Exception("Data Network Not Available");
                mq = result.ToString();
                mq0 = e1.Message;

            }
            mq = result.ToString();
            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team() { col1 = mq, col2 = mq0, col3 = mq1, col4 = mq3, col5 = mq4 });
            }
            catch { }
            return mylist;


        }



        public List<Team6> loginAndwork(Team6 team6)
        {

            //-------------------------
            Fn_set_andapp_opts(team6.col1, "Y");
            //------------------------

            string result = "Wrong Credentials";
            string password = "";


            string Co_cd = team6.col1;


            string mq3 = "", mq4 = "";
            string my_work_br = "";

            try
            {
                con = new OracleConnection(con2Oracle(Co_cd));
                if (con.State == ConnectionState.Closed)
                    try
                    {
                        con.Open();
                        mq0 = "-";
                    }
                    catch (Exception e)
                    {
                        mq0 = e.Message;
                        con = new OracleConnection(con2Oracle_FIN(Co_cd));
                        con.Open();
                    }
                string and_app_allow = "";
                if (con.State.ToString() == "Open")
                {
                    //-----------------------------
                    execute_cmd1(Co_cd, "ALTER TABLE EVAS ADD AND_MIS CHAR(1) DEFAULT 'N'");
                    execute_cmd1(Co_cd, "ALTER TABLE EVAS ADD AND_PID VARCHAR(50) DEFAULT '-'");
                    execute_cmd1(Co_cd, "alter table WB_map_multiopt add mvisi varchar2(1) default 'Y'");
                    execute_cmd1(Co_cd, "ALTER TABLE CO modify and_app_allow VARCHAR(100) DEFAULT '-'");
                    execute_cmd1(Co_cd, "ALTER TABLE wb_eattn_rec ADD APP_BY VARCHAR2(20) DEFAULT '-'");
                    execute_cmd1(Co_cd, "ALTER TABLE wb_eattn_rec ADD APP_DT DATE DEFAULT SYSDATE");
                    execute_cmd1(Co_cd, "ALTER TABLE wb_eattn_rec ADD EMP_ENT_PH varchar2(15) DEFAULT '-'");

                    execute_cmd1(Co_cd, "ALTER TABLE reelvch add PHY_DT date DEFAULT sysdate");
                    execute_cmd1(Co_cd, "ALTER TABLE reelvch_op add PHY_DT date DEFAULT sysdate");
                    execute_cmd1(Co_cd, "ALTER TABLE reelvch_ph add PHY_DT date DEFAULT sysdate");

                    execute_cmd1(Co_cd, "create table evas_app_rt as (Select * from evas_rt where 1=2)");
                    execute_cmd1(Co_cd, "ALTER TABLE evas_app_Rt add app_allow VARCHAR2(50) default '-'");
                    execute_cmd1(Co_cd, "ALTER TABLE evas_app_Rt modify app_allow VARCHAR2(50) default '-'");
                    //-----------------------------


                    DataTable dtl = new DataTable();
                    dtl = getdata(Co_cd, "-", "select upper(trim(username)) as username,upper(trim(level3pw)) as passwd,USERID,ulevel,EMAILID,CONTACTNO,NVL(AND_MIS,'N') AS AND_MIS,AND_PID,nvl(AND_ENTBR,'-') As AND_ENTBR from evas where username='" + team6.col2.Trim().ToUpper() + "' and NVL(CAN_TNS,'N')='Y'");
                    if (dtl.Rows.Count < 1) { result = "Wrong User Name"; }
                    else
                    {
                        password = dtl.Rows[0][1].ToString();
                        mq0 = dtl.Rows[0]["userid"].ToString();
                        mq1 = dtl.Rows[0]["ulevel"].ToString();
                        mq3 = dtl.Rows[0]["EMAILID"].ToString();
                        mq4 = dtl.Rows[0]["CONTACTNO"].ToString();
                        my_work_br = dtl.Rows[0]["AND_ENTBR"].ToString();

                        if (password.Trim().ToUpper() != team6.col3.Trim().ToUpper())
                        {
                            result = "Wrong Password";
                        }
                        else
                        {

                            mq = "Select trim(nvl(deptt_text,'-'))||'!~!~!'||trim(nvl(desg_Text,'-')) as fstr from empmas where substr(trim(nvl(tfr_stat,'-')),1,8)<>'TRANSFER' and length(Trim(nvl(leaving_dt,'-')))<5 and replace(trim(mobile),'-','')='" + mq4 + "'";
                            string emp_Str = fn_seek_iname(Co_cd, "", mq, "fstr");

                            if (emp_Str.Trim() != "0")
                            {
                                mq4 = mq4 + "!~!~!" + emp_Str.Trim();
                            }


                            if (my_work_br == "-")
                            {
                                result = "Please Update Branch in User Management , To use Finsys@Work ";
                            }
                            else
                            {
                                if (dtl.Rows[0]["AND_PID"].ToString().Trim().Length > 2)
                                {
                                    if (dtl.Rows[0]["AND_PID"].ToString().Trim().ToUpper() == team6.col4.ToString().Trim().ToUpper())
                                    {
                                        result = "OK";
                                    }
                                    else { if (team6.col1 == "CHPL") { result = "OK"; } else { result = "Device ID Mismatch, Please Contact Finsys Support"; } }
                                }
                                else
                                {
                                    execute_cmd1(Co_cd, "UPDATE EVAS SET AND_PID='" + team6.col4.ToString().Trim().ToUpper() + "' WHERE USERNAME='" + team6.col2.ToString().ToUpper().ToUpper() + "'");
                                    result = "OK";


                                }
                            }
                        }
                    }


                }

                mq = result.ToString();


            }
            catch (Exception e1)
            {
                // throw new Exception("Data Network Not Available");
                mq = result.ToString();
                mq0 = e1.Message;

            }
            mq = result.ToString();


            List<Team6> mylist = new List<Team6>();
            mylist.Add(new Team6 { col1 = mq, col2 = mq0, col3 = mq1, col4 = mq3, col5 = mq4, col6 = my_work_br, });
            return mylist;

            //List<Team6> mylist = new List<Team6>();
            //try
            //{
            //    mylist.Add(new Team6() { col1 = mq, col2 = mq0, col3 = mq1, col4 = mq3, col5 = mq4, col6 = my_work_br });
            //}
            //catch { }
            //return mylist;

        }



        public List<Team> loginScan(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            //------------------------

            string result = "Wrong Credentials";
            string password = "";
            string cd = team.col1;
            string mq3 = "", mq4 = "";

            try
            {
                con = new OracleConnection(con2Oracle(cd));
                if (con.State == ConnectionState.Closed)
                    try
                    {
                        con.Open();
                        mq0 = "-";
                    }
                    catch (Exception e)
                    {
                        mq0 = e.Message;
                        con = new OracleConnection(con2Oracle_FIN(cd));
                        con.Open();
                    }
                string and_app_allow = "";
                if (con.State.ToString() == "Open")
                {


                    DataTable dtl = new DataTable();
                    dtl = getdata(cd, "-", "select upper(trim(username)) as username,upper(trim(level3pw)) as passwd,USERID,ulevel,EMAILID,CONTACTNO,NVL(AND_MIS,'N') AS AND_MIS,AND_PID from evas where trim(icons)='" + team.col2.Trim().ToUpper() + "' and NVL(CAN_TNS,'N')='Y'");
                    if (dtl.Rows.Count < 1) { result = "Wrong User Name"; }
                    else
                    {
                        mq = "SUCCESS";
                        result = "SUCCESS";
                        mq0 = dtl.Rows[0]["username"].ToString();
                        mq1 = dtl.Rows[0]["passwd"].ToString();
                    }
                }
                mq = result.ToString();
            }
            catch (Exception e1)
            {
                mq = result.ToString();
                mq0 = e1.Message;

            }
            mq = result.ToString();
            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team() { col1 = mq, col2 = mq0, col3 = mq1, col4 = mq3, col5 = mq4 });
            }
            catch { }
            return mylist;
        }

        //------------------------------------------------
        // Api for Login by APP 29/10/2017
        //------------------------------------------------
        public List<Team> login_api(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            //------------------------

            string result = "Wrong Credentials";


            string password = "";
            string app_allowed = "";
            string curr_iph_id = "";
            string sent_iph_id = "";
            string mulevel = "";
            string app_allowed_user = "";
            string cd = team.col1.Trim().ToUpper();
            sent_iph_id = team.col4.Trim().ToUpper();
            try
            {
                con = new OracleConnection(con2Oracle(cd));
                if (con.State == ConnectionState.Closed)
                    try
                    {
                        con.Open();
                        mq0 = "-";
                    }
                    catch (Exception e)
                    {
                        mq0 = e.Message;
                        con = new OracleConnection(con2Oracle_FIN(cd));
                        con.Open();
                    }
                if (con.State.ToString() == "Open")
                {
                    try
                    {
                        mq = "alter table evas add Iph_ID varchar2(50) default '-'";
                        mq1 = execute_cmd1(team.col1, mq);
                    }
                    catch
                    {
                    }
                    try
                    {
                        mq = "alter table evas add Iph_opt number(3) default 0";
                        mq1 = execute_cmd1(team.col1, mq);
                    }
                    catch
                    {
                    }

                    DataTable dtl = new DataTable();
                    dtl = getdata(cd, "-", "select upper(trim(username)) as username,upper(trim(level3pw)) as passwd,upper(nvl(Iph_ID,'-')) as Iph_ID,ulevel,upper(nvl(CAN_CHPYV,'-')) as CAN_CHPYV from evas where username='" + team.col2.Trim().ToUpper() + "'");
                    if (dtl.Rows.Count < 1)
                    {
                        result = "Wrong User Name";
                    }
                    else
                    {
                        mulevel = dtl.Rows[0][3].ToString();
                        password = dtl.Rows[0][1].ToString();
                        app_allowed_user = dtl.Rows[0][4].ToString();

                        if (password.Trim().ToUpper() != team.col3.Trim().ToUpper())
                        {
                            result = "Wrong Password";
                        }
                        else
                        {
                            result = "OK";
                            curr_iph_id = dtl.Rows[0][2].ToString().ToUpper();
                            if (curr_iph_id.Length <= 1)
                            {
                                mq = "update evas set Iph_ID=upper('" + team.col4 + "') where username='" + team.col2.Trim().ToUpper() + "'";
                                mq1 = execute_cmd1(team.col1, mq);
                            }
                            else
                            {
                                //removed temporary 29/12/2017
                                //added back 17/04/2018
                                //removed back 15/11/2018
                                if (curr_iph_id != sent_iph_id)
                                {
                                    if (team.col1 == "CHPL") { result = "OK"; } else { result = "Device ID Mismatch, Please Contact Finsys Support"; }
                                    //result = "Device ID Mismatch, Please Contact Finsys Support";
                                }

                            }

                        }
                    }

                    if (mulevel != "0" && mulevel != "1")
                    {
                        result = "Available to Top/admin Level Userd Id only";
                    }
                    if (app_allowed_user != "Y")
                    {
                        result = "To Activate the App For This User, Please Contact Finsys Support";
                    }
                    string mycocd = team.col1.ToString();
                    if (team.col1.ToString() == "MCPL2" || team.col1.ToString() == "MCPL4") mycocd = "MCPL";
                    app_allowed = fn_seek_iname(team.col1, "", "Select upper(trim(nvl(iflag,'N'))) as ap_alow from co where code like '" + mycocd + "%' order by fmdate desc", "ap_alow");
                    if (app_allowed == "N")
                    {
                        result = "To Activate the App, Please Contact Finsys Support";
                    }

                    string chk_opt;
                    //-------------------------------------------------------------------------------
                    chk_opt = "-";
                    chk_opt = fn_seek_iname(team.col1, "", "Select op_Id from map_opt where op_id=10.1040", "op_Id");
                    if (chk_opt != "10.1040")
                    {
                        try
                        {
                            mq = "insert into map_opt values(10.1040,10,'L','Material Inward','EP104')";
                            mq1 = execute_cmd1(team.col1, mq);
                        }
                        catch
                        {
                        }
                    }

                    chk_opt = "-";
                    chk_opt = fn_seek_iname(team.col1, "", "Select op_Id from map_opt where op_id=40.4030", "op_Id");
                    if (chk_opt != "40.4030")
                    {
                        try
                        {
                            mq = "insert into map_opt values(40.4030,40,'L','Month Wise Expenses','EP403')";
                            mq1 = execute_cmd1(team.col1, mq);
                        }
                        catch
                        {
                        }
                    }
                    try
                    {

                        mq = "delete from map_opt where op_id in (50.000,50.5010,50.5020)";
                        mq1 = execute_cmd1(team.col1, mq);
                    }
                    catch
                    {
                    }
                    //-------------------------------------------------------------------------------


                }
                mq = result.ToString();
            }
            catch (Exception e1)
            {
                // throw new Exception("Data Network Not Available");
                mq = result.ToString();
                mq0 = e1.Message;
                FILL_ERR(e1.Message);
            }
            mq = result.ToString();
            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team() { col1 = mq, col2 = api_paths, col3 = "", col4 = "", col5 = mq0 });
            }
            catch { }
            return mylist;
        }

        //------------------------------------------------
        // Api for Menu by APP 29/10/2017
        //------------------------------------------------
        public List<Team> Menu_api(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            //------------------------

            DataTable dt = new DataTable();

            mq = "select op_id as col1,op_lvl as col2,op_Type as col3,op_text aS col4,op_act as col5 from map_opt order by op_id";
            dt = getdata(team.col1, "-", mq);

            List<Team> list = new List<Team>();
            list = (from DataRow row in dt.Rows
                    select new Team()
                    {
                        col1 = row["col1"].ToString(),
                        col2 = row["col2"].ToString(),
                        col3 = row["col3"].ToString(),
                        col4 = row["col4"].ToString(),
                        col5 = row["col5"].ToString(),
                    }).ToList();

            return list;
        }

        //------------------------------------------------
        // Api for Report Level 1 by APP 29/10/2017
        //------------------------------------------------

        public List<Team6> DataListA_api(Team6 team6)
        {
            //-------------------------
            Fn_set_andapp_opts(team6.col1, "N");
            //------------------------

            List<Team6> list = new List<Team6>();
            string query1, m4, m5, m6, m7, m8, m9, m10, m11, m12, m1, m2, m3, frm_cDt1, frm_cDt2;
            string year1 = "";
            string mq1 = "", mq2 = "", mq3 = "", mq4 = "";
            string xprd1 = "", xprd2 = "";
            string xprdRange = "";
            string mfld;

            string co_cd = "";

            makeCur(team6.col1.ToUpper());
            co_cd = team6.col1.ToUpper();

            mq2 = fn_seek_iname(team6.col1, "", "Select to_char((LAST_DAY(ADD_MONTHS(to_DaTE(sysdate),-0))),'dd/mm/yyyy') AS xdt2 from dual", "xdt2");

            string mydate = DateTime.Now.ToString("dd/MM/yyyy");

            string mycocd = team6.col1.ToUpper().Trim();
            if (team6.col1.ToUpper().Trim() == "MCPL2" || team6.col1.ToUpper().Trim() == "MCPL4") mycocd = "MCPL";

            frm_cDt1 = fn_seek_iname(team6.col1, "", "Select to_Char(fmdate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%' and FMDATE<=TO_DATE('" + mydate + "','DD/MM/YYYY') AND TODATE>=TO_DATE('" + mydate + "','DD/MM/YYYY') order by fmdate desc", "fmdt");
            frm_cDt2 = fn_seek_iname(team6.col1, "", "Select to_Char(todate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%' and to_CHAR(FMDATE,'DD/MM/YYYY')='" + frm_cDt1 + "' order by fmdate desc", "fmdt");

            xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";

            if (team6.col3.Trim() != "" && team6.col3.Trim() != "-")
                xprdRange = "between to_datE('" + team6.col3 + "','dd/mm/yyyy') and to_datE('" + team6.col4 + "','dd/mm/yyyy')";

            string last30_prd = "";
            last30_prd = "between to_datE('" + mydate + "','dd/mm/yyyy')-31 and to_datE('" + mydate + "','dd/mm/yyyy')";

            year1 = frm_cDt1.Substring(6, 4);
            branchwise(team6.col1, "", team6.col5);

            string fldfevas = "", work_br = "", sman_id = "", cust_Sch = "", user_lvl = "";
            fldfevas = fn_seek_iname(team6.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-')))||'^'||trim(nvl(smsopts,'-'))||'^'||trim(nvl(ulevel,'-')) as fstr from evas where upper(Trim(username))='" + team6.col5.ToUpper().Trim() + "'", "fstr");


            string reel_trans = fn_seek_iname(team6.col1, "", "Select count(*) as cnt from reelvch where icode like '07%'", "cnt");
            string O74 = fn_seek_iname(team6.col1.Trim(), "", "SELECT PARAMS FROM CONTROLS WHERE ID='O74' AND ENABLE_YN='Y' ", "PARAMS").Trim();
            if (O74.Length < 2)
            {
                O74 = "60";
            }
            work_br = "00";
            sman_id = "--";

            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
                sman_id = fldfevas.Split('^')[1];
                cust_Sch = fldfevas.Split('^')[2];
                user_lvl = fldfevas.Split('^')[3];

                if (sman_id.Length <= 1)
                {
                    sman_id = team6.col5.ToUpper().Trim();
                }
            }

            string famtbl = fn_seek_iname(team6.col1.ToUpper(), "", "SELECT tname FROM tab WHERE tname=upper('wbvu_fam_crm') ", "tname");

            string yr_fld = "";

            m4 = Convert.ToString(year1).Trim() + "04";
            m5 = Convert.ToString(year1).Trim() + "05";
            m6 = Convert.ToString(year1).Trim() + "06";
            m7 = Convert.ToString(year1).Trim() + "07";
            m8 = Convert.ToString(year1).Trim() + "08";
            m9 = Convert.ToString(year1).Trim() + "09";
            m10 = Convert.ToString(year1).Trim() + "10";
            m11 = Convert.ToString(year1).Trim() + "11";
            m12 = Convert.ToString(year1).Trim() + "12";
            m1 = Convert.ToString(Convert.ToDecimal(year1) + 1).Trim() + "01";
            m2 = Convert.ToString(Convert.ToDecimal(year1) + 1).Trim() + "02";
            m3 = Convert.ToString(Convert.ToDecimal(year1) + 1).Trim() + "03";

            string po_View = "";
            string pop_sql;
            string spl_qry = "";
            switch (team6.col2)
            {
                case "EP101":
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Plant,Dated,Basic_Sale" + home_div_iden + ",Gross_Sale" + home_div_iden + "' as col1,trim(b.Name)||'!~!~!'||to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||round(sum(a.amt_sale)/" + home_divider + ",2)||'!~!~!'||round(sum(a.bill_tot)/" + home_divider + ",2) as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from sale a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a." + branch_cd + " and a.type like '4%' and a.type!='47' and substr(a.acode,1,2)!='02' and a.vchdate " + xprdRange + " group by b.Name,to_char(a.vchdate,'dd/mm/yyyy'),to_char(a.vchdate,'yyyymmdd')||a.branchcd order by to_char(a.vchdate,'yyyymmdd')||a.branchcd desc) ";
                    break;
                case "EP102":
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from (Select 'Plant,Dated,Collection" + home_div_iden + "' as col1,trim(b.Name)||'!~!~!'||to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||round(sum(a.cramt-a.dramt)/" + home_divider + ",2)  as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from voucher a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a." + branch_cd + " and a.type like '1%' and substr(a.acode,1,2) in('16') and a.vchdate " + xprdRange + " group by b.Name,to_char(a.vchdate,'dd/mm/yyyy'),to_char(a.vchdate,'yyyymmdd')||a.branchcd order by to_char(a.vchdate,'yyyymmdd')||a.branchcd desc) ";
                    break;
                case "EP103":
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from (Select 'Plant,Dated,Payments" + home_div_iden + "' as col1,trim(b.Name)||'!~!~!'||to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||round(sum(a.dramt-a.Cramt)/" + home_divider + ",2)  as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from voucher a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a." + branch_cd + " and a.type like '2%' and substr(a.acode,1,2) in('02','05','06') and a.vchdate " + xprdRange + " group by b.Name,to_char(a.vchdate,'dd/mm/yyyy'),to_char(a.vchdate,'yyyymmdd')||a.branchcd order by to_char(a.vchdate,'yyyymmdd')||a.branchcd desc) ";
                    break;
                case "EP104":
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from (Select 'Plant,Dated,Inward.Amt" + home_div_iden + "' as col1,trim(b.Name)||'!~!~!'||to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||round(sum(a.bill_tot)/" + home_divider + ",2)  as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from ivchctrl a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a." + branch_cd + " and a.type like '0%' and a.type!='04' and substr(a.acode,1,2) in('02','05','06') and a.vchdate " + xprdRange + " group by b.Name,to_char(a.vchdate,'dd/mm/yyyy'),to_char(a.vchdate,'yyyymmdd')||a.branchcd order by to_char(a.vchdate,'yyyymmdd')||a.branchcd desc) ";
                    break;
                case "EP105":
                    string mmq = "";
                    mmq = "select m.aname as Party,to_char(sum(n.total/" + home_divider + "),'" + numbr_fmt + "') as mcol1,to_char(sum(n.slab1/" + home_divider + "),'" + numbr_fmt + "') as mcol2,to_char(sum(n.slab2/" + home_divider + "),'" + numbr_fmt + "') as mcol3,to_char(sum(n.slab3/" + home_divider + "),'" + numbr_fmt + "') as mcol4,to_char(sum(n.slab4/" + home_divider + "),'" + numbr_fmt + "') as mcol5,to_char(sum(n.slab5/" + home_divider + "),'" + numbr_fmt + "') as mcol6,n.acode,sum(n.total) as totos,m.Payment as P_days,m.Climit  as Cr_limit from (SELECT acode,dramt-cramt as total,(CASE WHEN (sysdate-invdate BETWEEN 0 AND 30) THEN dramt-cramt END) as slab1  ,(CASE WHEN (sysdate-invdate BETWEEN 30 AND 60) THEN dramt-cramt END) as slab2,(CASE WHEN (sysdate-invdate BETWEEN 60 AND 90) THEN dramt-cramt END) as slab3,(CASE WHEN (sysdate-invdate BETWEEN 90 AND 180) THEN dramt-cramt END) as slab4,(CASE WHEN (sysdate-invdate > 180) THEN dramt-cramt END) as slab5 from  recdata) n left outer join famst m on trim(n.acode)=trim(m.acode) where substr(n.acode,1,2) in ('16') and n.total<>0  group by m.aname,m.addr1,m.climit,m.payment,n.acode  having sum(n.total)>0";
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from (Select 'Customer,Tot_Os,Over_180,Os_90_180,Os_60_90,Os_30_60,Curr_Os' as col1,trim(a.Party)||'!~!~!'||a.mcol1||'!~!~!'||a.mcol6||'!~!~!'||a.mcol5||'!~!~!'||a.mcol4||'!~!~!'||a.mcol3||'!~!~!'||a.mcol2  as col2,'-' as col3,'-' as col4,a.acode as col5 from (" + mmq + ") a order by a.mcol1 desc) ";
                    break;

                case "EP401":
                    mfld = "round(sum(a.Dramt-a.cramt)/" + home_divider + ")";
                    query1 = "Select  trim(b.Aname) as Account,substr(a.acode,1,2) as grp,decode(to_chaR(vchdate,'yyyymm')," + m4 + "," + mfld + ",0) as April,decode(to_chaR(vchdate,'yyyymm')," + m5 + "," + mfld + ",0) as May,decode(to_chaR(vchdate,'yyyymm')," + m6 + "," + mfld + ",0) as June,decode(to_chaR(vchdate,'yyyymm')," + m7 + "," + mfld + ",0) as July,decode(to_chaR(vchdate,'yyyymm')," + m8 + "," + mfld + ",0) as August,decode(to_chaR(vchdate,'yyyymm')," + m9 + "," + mfld + ",0) as Sept,decode(to_chaR(vchdate,'yyyymm')," + m10 + "," + mfld + ",0) as Oct,decode(to_chaR(vchdate,'yyyymm')," + m11 + "," + mfld + ",0) as Nov,decode(to_chaR(vchdate,'yyyymm')," + m12 + "," + mfld + ",0) as Dec ";
                    query1 = query1 + " ,decode(to_chaR(vchdate,'yyyymm')," + m1 + "," + mfld + ",0) as Jan,decode(to_chaR(vchdate,'yyyymm')," + m2 + "," + mfld + ",0) as Feb,decode(to_chaR(vchdate,'yyyymm')," + m3 + "," + mfld + ",0) as Mar,a.acode from voucher a left outer join famst b on  TRIM(A.ACODE)=TRIM(b.acode) where a." + branch_cd + " and a.vchdate " + xprdRange + " and substr(a.acode,1,2)='16' and a.type like '4%' group by a.acode,trim(b.aname),to_char(vchdate,'yyyymm'),substr(a.acode,1,2)  ";
                    mq = "select * from (select col1,col2,col3,col4,col5,'-' as col6 from  (Select 'Customer,Total,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec,Jan,Feb,Mar,Code' as col1,a.Account||'!~!~!'||to_char(sum(a.April)+sum(a.may)+sum(a.june)+sum(a.july)+sum(a.August)+sum(a.sept)+sum(a.oct)+sum(a.nov)+sum(a.dec)+sum(a.jan)+sum(a.feb)+sum(a.mar),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.April),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.May),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.June),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.July),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.August),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Sept),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.oct),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Nov),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Dec),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Jan),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Feb),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Mar),'" + numbr_fmt + "') as col2,'-' as col3,sum(a.April)+sum(a.may)+sum(a.june)+sum(a.july)+sum(a.August)+sum(a.sept)+sum(a.oct)+sum(a.nov)+sum(a.dec)+sum(a.jan)+sum(a.feb)+sum(a.mar) as col4,'-' as col5 ,'-' as col6 from (" + query1 + ")a group by a.Grp,a.account,a.acode order by col4 desc) order by col4 desc) where rownum<41 ";
                    break;
                case "EP402":
                    mfld = "round(sum(a.iamount)/" + home_divider + ")";
                    query1 = "Select  trim(b.Iname) as Account,substr(a.Icode,1,2) as grp,decode(to_chaR(vchdate,'yyyymm')," + m4 + "," + mfld + ",0) as April,decode(to_chaR(vchdate,'yyyymm')," + m5 + "," + mfld + ",0) as May,decode(to_chaR(vchdate,'yyyymm')," + m6 + "," + mfld + ",0) as June,decode(to_chaR(vchdate,'yyyymm')," + m7 + "," + mfld + ",0) as July,decode(to_chaR(vchdate,'yyyymm')," + m8 + "," + mfld + ",0) as August,decode(to_chaR(vchdate,'yyyymm')," + m9 + "," + mfld + ",0) as Sept,decode(to_chaR(vchdate,'yyyymm')," + m10 + "," + mfld + ",0) as Oct,decode(to_chaR(vchdate,'yyyymm')," + m11 + "," + mfld + ",0) as Nov,decode(to_chaR(vchdate,'yyyymm')," + m12 + "," + mfld + ",0) as Dec ";
                    query1 = query1 + " ,decode(to_chaR(vchdate,'yyyymm')," + m1 + "," + mfld + ",0) as Jan,decode(to_chaR(vchdate,'yyyymm')," + m2 + "," + mfld + ",0) as Feb,decode(to_chaR(vchdate,'yyyymm')," + m3 + "," + mfld + ",0) as Mar,a.icode from ivoucher a left outer join item b on  TRIM(A.iCODE)=TRIM(b.icode) where a." + branch_cd + " and a.vchdate " + xprdRange + " and substr(a.acode,1,2) in ('16','02') and a.type like '4%' group by a.icode,trim(b.iname),to_char(vchdate,'yyyymm'),substr(a.acode,1,2)  ";
                    mq = "select * from (select col1,col2,col3,col4,col5,'-' as col6 from  (Select 'Item_Name,Total,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec,Jan,Feb,Mar,Code' as col1,a.Account||'!~!~!'||to_char(sum(a.April)+sum(a.may)+sum(a.june)+sum(a.july)+sum(a.August)+sum(a.sept)+sum(a.oct)+sum(a.nov)+sum(a.dec)+sum(a.jan)+sum(a.feb)+sum(a.mar),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.April),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.May),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.June),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.July),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.August),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Sept),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.oct),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Nov),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Dec),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Jan),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Feb),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Mar),'" + numbr_fmt + "') as col2,'-' as col3,sum(a.April)+sum(a.may)+sum(a.june)+sum(a.july)+sum(a.August)+sum(a.sept)+sum(a.oct)+sum(a.nov)+sum(a.dec)+sum(a.jan)+sum(a.feb)+sum(a.mar) as col4,'-' as col5 ,'-' as col6 from (" + query1 + ")a group by a.Grp,a.account,a.icode  ) order by col4 desc) where rownum<41  ";
                    break;
                case "EP403":
                    mfld = "round(sum(a.Dramt-a.cramt)/" + home_divider + ")";
                    query1 = "Select  trim(b.Aname) as Account,substr(a.acode,1,2) as grp,decode(to_chaR(vchdate,'yyyymm')," + m4 + "," + mfld + ",0) as April,decode(to_chaR(vchdate,'yyyymm')," + m5 + "," + mfld + ",0) as May,decode(to_chaR(vchdate,'yyyymm')," + m6 + "," + mfld + ",0) as June,decode(to_chaR(vchdate,'yyyymm')," + m7 + "," + mfld + ",0) as July,decode(to_chaR(vchdate,'yyyymm')," + m8 + "," + mfld + ",0) as August,decode(to_chaR(vchdate,'yyyymm')," + m9 + "," + mfld + ",0) as Sept,decode(to_chaR(vchdate,'yyyymm')," + m10 + "," + mfld + ",0) as Oct,decode(to_chaR(vchdate,'yyyymm')," + m11 + "," + mfld + ",0) as Nov,decode(to_chaR(vchdate,'yyyymm')," + m12 + "," + mfld + ",0) as Dec ";
                    query1 = query1 + " ,decode(to_chaR(vchdate,'yyyymm')," + m1 + "," + mfld + ",0) as Jan,decode(to_chaR(vchdate,'yyyymm')," + m2 + "," + mfld + ",0) as Feb,decode(to_chaR(vchdate,'yyyymm')," + m3 + "," + mfld + ",0) as Mar,a.acode from voucher a left outer join famst b on  TRIM(A.ACODE)=TRIM(b.acode) where a." + branch_cd + " and a.vchdate " + xprdRange + " and substr(a.acode,1,2)>='30' group by a.acode,trim(b.aname),to_char(vchdate,'yyyymm'),substr(a.acode,1,2)  ";
                    mq = "select * from (select col1,col2,col3,col4,col5,'-' as col6 from  (Select 'Expense_Head,Total,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec,Jan,Feb,Mar,Code' as col1,a.Account||'!~!~!'||to_char(sum(a.April)+sum(a.may)+sum(a.june)+sum(a.july)+sum(a.August)+sum(a.sept)+sum(a.oct)+sum(a.nov)+sum(a.dec)+sum(a.jan)+sum(a.feb)+sum(a.mar),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.April),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.May),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.June),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.July),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.August),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Sept),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.oct),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Nov),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Dec),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Jan),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Feb),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Mar),'" + numbr_fmt + "') as col2,'-' as col3,sum(a.April)+sum(a.may)+sum(a.june)+sum(a.july)+sum(a.August)+sum(a.sept)+sum(a.oct)+sum(a.nov)+sum(a.dec)+sum(a.jan)+sum(a.feb)+sum(a.mar) as col4,'-' as col5 ,'-' as col6 from (" + query1 + ")a group by a.Grp,a.account,a.acode order by col4 desc) order by col4 desc) where rownum<101 ";
                    break;
                case "EP404":
                    mfld = "round(sum(a.bill_tot)/" + home_divider + ")";
                    query1 = "Select  trim(b.Aname) as Account,substr(a.acode,1,2) as grp,decode(to_chaR(vchdate,'yyyymm')," + m4 + "," + mfld + ",0) as April,decode(to_chaR(vchdate,'yyyymm')," + m5 + "," + mfld + ",0) as May,decode(to_chaR(vchdate,'yyyymm')," + m6 + "," + mfld + ",0) as June,decode(to_chaR(vchdate,'yyyymm')," + m7 + "," + mfld + ",0) as July,decode(to_chaR(vchdate,'yyyymm')," + m8 + "," + mfld + ",0) as August,decode(to_chaR(vchdate,'yyyymm')," + m9 + "," + mfld + ",0) as Sept,decode(to_chaR(vchdate,'yyyymm')," + m10 + "," + mfld + ",0) as Oct,decode(to_chaR(vchdate,'yyyymm')," + m11 + "," + mfld + ",0) as Nov,decode(to_chaR(vchdate,'yyyymm')," + m12 + "," + mfld + ",0) as Dec ";
                    query1 = query1 + " ,decode(to_chaR(vchdate,'yyyymm')," + m1 + "," + mfld + ",0) as Jan,decode(to_chaR(vchdate,'yyyymm')," + m2 + "," + mfld + ",0) as Feb,decode(to_chaR(vchdate,'yyyymm')," + m3 + "," + mfld + ",0) as Mar,a.acode from ivchctrl a left outer join famst b on  TRIM(A.ACODE)=TRIM(b.acode) where a." + branch_cd + " and a.vchdate " + xprdRange + " and substr(a.type,1,2)='04' group by a.acode,trim(b.aname),to_char(vchdate,'yyyymm'),substr(a.acode,1,2)  ";
                    mq = "select * from (select col1,col2,col3,col4,col5,'-' as col6 from  (Select 'Sales_Returns,Total,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec,Jan,Feb,Mar,Code' as col1,a.Account||'!~!~!'||to_char(sum(a.April)+sum(a.may)+sum(a.june)+sum(a.july)+sum(a.August)+sum(a.sept)+sum(a.oct)+sum(a.nov)+sum(a.dec)+sum(a.jan)+sum(a.feb)+sum(a.mar),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.April),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.May),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.June),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.July),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.August),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Sept),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.oct),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Nov),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Dec),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Jan),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Feb),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Mar),'" + numbr_fmt + "') as col2,'-' as col3,sum(a.April)+sum(a.may)+sum(a.june)+sum(a.july)+sum(a.August)+sum(a.sept)+sum(a.oct)+sum(a.nov)+sum(a.dec)+sum(a.jan)+sum(a.feb)+sum(a.mar) as col4,'-' as col5 ,'-' as col6 from (" + query1 + ")a group by a.Grp,a.account,a.acode order by col4 desc) order by col4 desc) where rownum<101 ";

                    break;

                case "EP501":
                    xprd1 = "between to_date('" + mydate + "','dd/mm/yyyy')-150 and to_date('" + mydate + "','dd/mm/yyyy')";

                    //and trim(a.MFGINBR)='" + mbr + "' 
                    mq2 = "select Customer,Mktggrp,sum(SO_qty) As SO_qty,sum(Sal_Qty) as Sal_Qty,sum(Bal_qty) as Bal_qty,sum(Bal_Value) as Bal_Value from (select c.unit,to_char(a.Orddt,'yyyymmdd')||trim(a.Order_No)||trim(a.acode) as fstr, trim(a.Order_No) as SO_No,to_char(a.Orddt,'dd/mm/yyyy') as SO_DT,max(a.jcno) as job_card,max(to_Char(a.jcdt,'dd-Mon-yy')) as job_dt,b.Mktggrp,b.aname as Customer,max(a.ciname) as Item_Name,max(a.cpartno) as Part_no,max(a.work_ordno) As Order_Catg,max(to_char(a.porddt,'dd/mm/yyyy')) as po_Dt,to_char(max(a.cu_chldt)-nvl(b.dlvtime,0),'dd/mm/yyyy') as SHIP_date,sum(a.qtyord)as SO_qty,sum(a.Sch_qty)As Job_Qty,sum(a.prd_qty) as DA_Qty,sum(a.salqty) as Sal_Qty,sum(a.qtyord)-sum(a.salqty) as Bal_qty,(case when sum(A.qtyord)>0 then round(((sum(a.qtyord)-sum(a.salqty))/sum(a.qtyord))*100,2) else 0 end)as Perct ,round((max(a.cu_chldt)-nvl(b.dlvtime,0))-sysdate,0) as Days_Left,round(((sum(a.qtyord)-sum(a.salqty))*max(a.fg_rt)),0) as Bal_Value,max(a.fg_rt) as Fg_rate,max(invdt) as Sales_Dt,max(a.pordno) as po_no,max(a.icat) as SO_Closed,max(a.plant_cd) as Plant_Code,max(to_char(a.cu_chldt,'dd/mm/yyyy')) as Dlv_date,b.dlvtime,trim(a.acode) as Acode,trim(a.icode)As Icode from  (select work_ordno,gmt_size,desc1,BUSI_EXPECT,cpartno,ciname,pordno,porddt,0 as stk,a.cu_chldt,a.ordno as Order_No,a.orddt as Orddt,a.acode,a.icode,a.qtyord,0 as sch_qty,0 as prd_qty,0 as jcqty,0 as salqty,null as jcdt,null as jcno,null as invdt,icat,trim(nvl(mfginbr,'-')) as Plant_cd,a.irate*(decode(a.curr_Rate,0,1,a.curr_rate)) as fg_rt from somas a where a.branchcd='00' and A.orddt " + xprd1 + " and a.type!='45'  union all select null as wo_no,null as aax,null as aab,null as aa,null as cpartno,null as ciname, null as pordno,null as porddt,0 as stk,null as cu_Chldt,substr(convdate,5,6) as Order_No,to_Date(substr(convdate,11,10),'dd/mm/yyyy') as Orddt,a.acode,a.icode,0 as qty_ord,qty as Qty1,0 as Qty2,0 as jcqty,0 as salqty ,vchdate as jcdt,vchnum as jcno,null as invdt,null as icat,null as plant_Cd,0 as fg_Rt from costestimate a where a." + branch_cd + " and a.type like '30%' and A.vchdate " + xprd1 + " and a.srno=0 union all select null as wono,null as aax,null as aab,null as aa,null as cpartno,null as ciname, null as pordno,null as porddt,0 as stk,null as cu_Chldt,a.ponum as Order_No,a.podate as Orddt,a.acode,a.icode,0 as qtyord,0 as sch_qty,0 as prd_qty,0 as jcqty,iqtyout as salqty,null as jcdt,null as jcno,vchdate as invdt,null as icat,null as plant_Cd,0 as fg_Rt  from ivoucher a where a." + branch_cd + " and a.type like '4%' and A.vchdate " + xprd1 + "  union all select null as wo_no,null as aax,null as aab,null as aa,null as cpartno,null as ciname, null as pordno,null as porddt,0 as stk,null as cu_Chldt,a.ordno as Order_No,a.orddt as Orddt,a.acode,a.icode,0 as qtyord,0 as sch_qty,qtysupp as prd_qty,0 as jcqty,0 as salqty,null as jcdt,null as jcno,null as invdt,null as icat,null as plant_Cd,0 as fg_Rt  from despatch a where a." + branch_cd + " and a.type like '4%' and A.packdate " + xprd1 + "  )a ,famst b, item c where trim(A.acode)=trim(b.acode) and trim(A.icode)=trim(C.icode) group by c.unit,a.Order_No,a.Orddt,to_char(a.Orddt,'dd/mm/yyyy'),trim(a.acode),trim(a.icode),nvl(c.iord,0),c.wt_rft,c.siname,b.dlvtime,b.Mktggrp,b.aname having max(a.icat)<>'Y' and max(a.icat) <>'Y'  ) group by Customer,Mktggrp";
                    mq = "select * from (select col1,col2,col3,col4,col5,'-' as col6 from  (Select 'Customer,Mktg_Person,Bal_Value,SO_Qty,Sale_qty,Bal_qty' as col1,trim(a.Customer)||'!~!~!'||trim(a.Mktggrp)||'!~!~!'||to_char(a.Bal_Value,'" + numbr_fmt2 + "')||'!~!~!'||to_char(a.SO_qty,'" + numbr_fmt2 + "')||'!~!~!'||to_char(a.Sal_qty,'" + numbr_fmt2 + "')||'!~!~!'||to_char(a.Bal_qty,'" + numbr_fmt2 + "') as col2,a.Bal_Value as col3,'-' as col4,'-' as col5 ,'-' as col6 from (" + mq2 + ")a ) order by col3 desc ) where rownum<1000 ";
                    break;
                case "EP502":
                    xprd1 = "between to_date('" + mydate + "','dd/mm/yyyy')-150 and to_date('" + mydate + "','dd/mm/yyyy')";

                    //and trim(a.MFGINBR)='" + mbr + "' 
                    mq2 = "select * from (select c.unit,to_char(a.Orddt,'yyyymmdd')||trim(a.Order_No)||trim(a.acode) as fstr, trim(a.Order_No) as SO_No,to_char(a.Orddt,'dd/mm/yyyy') as SO_DT,max(a.jcno) as job_card,max(to_Char(a.jcdt,'dd-Mon-yy')) as job_dt,b.aname as Customer,max(a.ciname) as Item_Name,max(a.cpartno) as Part_no,max(a.work_ordno) As Order_Catg,max(to_char(a.porddt,'dd/mm/yyyy')) as po_Dt,to_char(max(a.cu_chldt)-nvl(b.dlvtime,0),'dd/mm/yyyy') as SHIP_date,sum(a.qtyord)as SO_qty,sum(a.Sch_qty)As Job_Qty,sum(a.prd_qty) as DA_Qty,sum(a.salqty) as Sal_Qty,sum(a.qtyord)-sum(a.salqty) as Bal_qty,(case when sum(A.qtyord)>0 then round(((sum(a.qtyord)-sum(a.salqty))/sum(a.qtyord))*100,2) else 0 end)as Perct ,round((max(a.cu_chldt)-nvl(b.dlvtime,0))-sysdate,0) as Days_Left,to_char(round(((sum(a.qtyord)-sum(a.salqty))*max(a.fg_rt)),0),'99,999,999') as Bal_Value,max(a.fg_rt) as Fg_rate,max(invdt) as Sales_Dt,max(a.pordno) as po_no,max(a.icat) as SO_Closed,max(a.plant_cd) as Plant_Code,max(to_char(a.cu_chldt,'dd/mm/yyyy')) as Dlv_date,b.dlvtime,trim(a.acode) as Acode,trim(a.icode)As Icode from  (select work_ordno,gmt_size,desc1,BUSI_EXPECT,cpartno,ciname,pordno,porddt,0 as stk,a.cu_chldt,a.ordno as Order_No,a.orddt as Orddt,a.acode,a.icode,a.qtyord,0 as sch_qty,0 as prd_qty,0 as jcqty,0 as salqty,null as jcdt,null as jcno,null as invdt,icat,trim(nvl(mfginbr,'-')) as Plant_cd,a.irate*(decode(a.curr_Rate,0,1,a.curr_rate)) as fg_rt from somas a where a.branchcd='00' and A.orddt " + xprd1 + " and a.type!='45'  union all select null as wo_no,null as aax,null as aab,null as aa,null as cpartno,null as ciname, null as pordno,null as porddt,0 as stk,null as cu_Chldt,substr(convdate,5,6) as Order_No,to_Date(substr(convdate,11,10),'dd/mm/yyyy') as Orddt,a.acode,a.icode,0 as qty_ord,qty as Qty1,0 as Qty2,0 as jcqty,0 as salqty ,vchdate as jcdt,vchnum as jcno,null as invdt,null as icat,null as plant_Cd,0 as fg_Rt from costestimate a where a." + branch_cd + " and a.type like '30%' and A.vchdate " + xprd1 + " and a.srno=0 union all select null as wono,null as aax,null as aab,null as aa,null as cpartno,null as ciname, null as pordno,null as porddt,0 as stk,null as cu_Chldt,a.ponum as Order_No,a.podate as Orddt,a.acode,a.icode,0 as qtyord,0 as sch_qty,0 as prd_qty,0 as jcqty,iqtyout as salqty,null as jcdt,null as jcno,vchdate as invdt,null as icat,null as plant_Cd,0 as fg_Rt  from ivoucher a where a." + branch_cd + " and a.type like '4%' and A.vchdate " + xprd1 + "  union all select null as wo_no,null as aax,null as aab,null as aa,null as cpartno,null as ciname, null as pordno,null as porddt,0 as stk,null as cu_Chldt,a.ordno as Order_No,a.orddt as Orddt,a.acode,a.icode,0 as qtyord,0 as sch_qty,qtysupp as prd_qty,0 as jcqty,0 as salqty,null as jcdt,null as jcno,null as invdt,null as icat,null as plant_Cd,0 as fg_Rt  from despatch a where a." + branch_cd + " and a.type like '4%' and A.packdate " + xprd1 + "  )a ,famst b, item c where trim(A.acode)=trim(b.acode) and trim(A.icode)=trim(C.icode) group by c.unit,a.Order_No,a.Orddt,to_char(a.Orddt,'dd/mm/yyyy'),trim(a.acode),trim(a.icode),nvl(c.iord,0),c.wt_rft,c.siname,b.dlvtime,b.aname having max(a.icat)<>'Y' and max(a.icat) <>'Y'  ) where 1=1 order by Days_Left,Customer,SO_NO";
                    mq = "select * from (select col1,col2,col3,col4,col5,'-' as col6 from  (Select 'Customer,Part_Name,PO_No,Ship_Dt,Days_left,Ord_qty,Job_Qty,DA_Qty,Sale_Qty,Bal_Qty,unit' as col1,trim(a.Customer)||'!~!~!'||trim(a.Item_Name)||'!~!~!'||trim(a.po_no)||'!~!~!'||trim(a.SHIP_date)||'!~!~!'||trim(a.Days_Left)||'!~!~!'||to_char(a.SO_qty,'" + numbr_fmt2 + "')||'!~!~!'||to_char(a.Job_qty,'" + numbr_fmt2 + "')||'!~!~!'||to_char(a.DA_qty,'" + numbr_fmt2 + "')||'!~!~!'||to_char(a.Sal_qty,'" + numbr_fmt2 + "')||'!~!~!'||to_char(a.Bal_qty,'" + numbr_fmt2 + "')||'!~!~!'||trim(a.unit) as col2,a.Days_Left as col3,a.fstr as col4,'-' as col5 ,'-' as col6 from (" + mq2 + ")a ) order by col3,col4 desc ) where rownum<1000 ";
                    break;
                case "EP503":
                    xprd1 = "between to_date('" + mydate + "','dd/mm/yyyy')-15 and to_date('" + mydate + "','dd/mm/yyyy')";
                    mq2 = "select b.Aname,c.Iname,a.exc_57f4,a.iqtyout,c.unit,to_char(a.ent_dt,'dd/mm/yyyy :hh24:mi:ss') as Entry_dtl,a.ent_Dt,d.mo_Vehi,to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.type||a.vchnum as fstr,a.finvno from ivoucher a, famst b, item c,sale d where a." + branch_cd + " and trim(A.acode)=trim(b.acode) and trim(A.icode)=trim(c.icode) and a.branchcd||a.type||a.vchnum||to_char(a.vchdate,'dd/mm/yyyy')=d.branchcd||d.type||d.vchnum||to_char(d.vchdate,'dd/mm/yyyy') and a.type like '4%' and a.vchdate " + xprd1 + " order by a.ent_Dt,a.vchdate,a.branchcd,a.type,a.vchnum,a.srno";
                    mq = "select * from (select col1,col2,col3,col4,col5,'-' as col6 from  (Select 'Customer,Part_Name,Quantity,Unit,Part_Code,PO_No,Entry_dtl,Vehicle' as col1,trim(a.Aname)||'!~!~!'||trim(a.iname)||'!~!~!'||to_char(a.iqtyout,'" + numbr_fmt2 + "')||'!~!~!'||trim(a.unit)||'!~!~!'||trim(a.exc_57f4)||'!~!~!'||trim(a.finvno)||'!~!~!'||trim(a.entry_Dtl)||'!~!~!'||trim(a.mo_vehi) as col2,a.ent_dt as col3,a.fstr as col4,'-' as col5 ,'-' as col6 from (" + mq2 + ")a ) order by col3 desc,col4 desc ) where rownum<1000 ";
                    break;
                case "EP504":

                    xprd1 = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + mydate + "','dd/mm/yyyy')";
                    yr_fld = fn_seek_iname(team6.col1, "", "Select to_char(to_date('" + frm_cDt1 + "','dd/mm/yyyy'),'yyyy') as fmdt from dual", "fmdt");
                    mq1 = "select b.Iname,sum(a.opening)+sum(a.cdr)-sum(a.ccr) as closing,b.cpartno as Part_code,trim(a.icode),substr(a.icode,1,4) as Grp,b.unit from (Select icode, yr_" + yr_fld + " as opening,0 as cdr,0 as ccr,0 as clos from itembal where " + branch_cd + " union all  ";
                    mq2 = "select icode,0 as op,nvl(iqtyin,0) as cdr,nvl(iqtyout,0) as ccr,0 as clos from ivoucher where " + branch_cd + " and type like '%' and vchdate " + xprd1 + " and store='Y' ) a, item b where trim(A.icode)=trim(B.icode) and substr(a.icode,1,1)='9' group by substr(a.icode,1,4),b.iname,b.unit,b.cpartno,a.icode having sum(a.opening)+sum(a.cdr)-sum(a.ccr)>0 order by substr(a.icode,1,4),b.iname";
                    mq3 = mq1 + mq2;
                    mq = "select * from (select col1,col2,col3,col4,col5,'-' as col6 from  (Select 'Part_Name,Stock,Part_Code,Unit' as col1,trim(a.Iname)||'!~!~!'||to_char(a.closing,'" + numbr_fmt2 + "')||'!~!~!'||trim(a.Part_code)||'!~!~!'||trim(a.unit) as col2,a.Grp as col3,a.iname as col4,'-' as col5 ,'-' as col6 from (" + mq3 + ")a ) order by col3,col4 ) where rownum<1000 ";
                    break;

                case "EP611":
                    //maint comp-list in report

                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Dated,Deptt,Machine,Topic,Remarks,Ent_by,App_By' as col1,to_char(a.ent_dt,'dd/mm/yyyy :hh24:mi:ss')||'!~!~!'||trim(a.Deptt_name)||'!~!~!'||trim(a.Mach_name)||'!~!~!'||trim(a.comp_type)||'!~!~!'||trim(a.Remarks)||'!~!~!'||a.Ent_by||'!~!~!'||nvl(a.App_by,'-') as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from wb_maint_comp a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a.branchcd='" + work_br + "' and a.type like 'MQ%' and to_DatE(to_char(a.vchdate,'dd/mm/yyyy'),'dd/mm/yyyy') " + xprdRange + "  and trim(upper(a.ent_by))=trim(upper('" + team6.col5.Trim() + "')) order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    break;

                case "EP612":
                    //maint comp-done in report
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Dated,Deptt,Machine,Issue_obsv,Remarks,Ent_by' as col1,to_char(a.ent_dt,'dd/mm/yyyy :hh24:mi:ss')||'!~!~!'||trim(a.Deptt_name)||'!~!~!'||trim(a.Mach_name)||'!~!~!'||trim(a.Issue_obsv)||'!~!~!'||trim(a.Remarks)||'!~!~!'||a.Ent_by as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from wb_maint_act a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a.branchcd='" + work_br + "' and a.type like 'MS%' and to_DatE(to_char(a.vchdate,'dd/mm/yyyy'),'dd/mm/yyyy') " + xprdRange + "  and trim(upper(a.ent_by))=trim(upper('" + team6.col5.Trim() + "')) order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    break;

                case "EP615":
                    //maint comp-list pending in report
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Dated,Deptt,Machine,Topic,Remarks,Ent_by' as col1,to_char(a.ent_dt,'dd/mm/yyyy :hh24:mi:ss')||'!~!~!'||trim(a.Deptt_name)||'!~!~!'||trim(a.Mach_name)||'!~!~!'||trim(a.comp_type)||'!~!~!'||trim(a.Remarks)||'!~!~!'||a.Ent_by as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from wb_maint_comp a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a.branchcd='" + work_br + "' and a.type like 'MQ%' and to_DatE(to_char(a.vchdate,'dd/mm/yyyy'),'dd/mm/yyyy') " + xprdRange + "  and trim(nvl(a.app_by,'-'))='-'  order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    break;

                // leave loan/ advance / request 
                case "EP911":
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Req_No,Req_Dt,App_by,App_Dt,Leave_From,Leave_Dt' as col1,trim(a.LRQNO)||'!~!~!'||to_char(a.LRQDT,'dd/mm/yyyy')||'!~!~!'||trim(a.App_by)||'!~!~!'||(Case when trim(nvl(a.App_by,'-'))='-' then '-' else to_char(a.App_Dt,'dd/mm/yyyy') end)||'!~!~!'||trim(a.LEVFROM)||'!~!~!'||trim(a.LEVUPTO) as col2,'-' as col3,'-' as col4,to_char(a.LRQDT,'yyyymmdd')||a.branchcd as col5 from wb_LEVREQ a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a." + branch_cd + " and a.type like 'LR%' and a.LRQDT " + xprdRange + " and trim(upper(a.ent_by))=trim(upper('" + team6.col5.Trim() + "')) order by to_char(a.LRQDT,'yyyymmdd')||a.branchcd||a.lrqno desc) ";
                    break;
                case "EP912":
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Req_No,Req_Dt,Req_Amt,Appr_Amt,remarks' as col1,trim(a.vchnum)||'!~!~!'||to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||trim(a.req_amt)||'!~!~!'||trim(a.dramt)||'!~!~!'||trim(a.remark) as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from payadv a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a." + branch_cd + " and a.type like '%' and a.vchdate " + xprdRange + " and trim(upper(a.ent_by))=trim(upper('" + team6.col5.Trim() + "')) order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    break;
                case "EP913":
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Req_No,Req_Dt,Req_Amt,Appr_Amt,remarks' as col1,trim(a.vchnum)||'!~!~!'||to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||trim(a.req_amt)||'!~!~!'||trim(a.dramt)||'!~!~!'||trim(a.remark) as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from payloan a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a." + branch_cd + " and a.type like '%' and a.vchdate " + xprdRange + " and trim(upper(a.ent_by))=trim(upper('" + team6.col5.Trim() + "')) order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    break;
                case "EP914":
                    xprd1 = "between to_date('" + mydate + "','dd/mm/yyyy')-31 and to_date('" + mydate + "','dd/mm/yyyy')";
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'App_by,App_Dt,Dated,Chk_in,Chk_out,Particulars,Location,Remarks' as col1,trim(a.app_by)||'!~!~!'||(Case when trim(nvl(a.App_by,'-'))='-' then '-' else to_char(a.App_Dt,'dd/mm/yyyy') end)||'!~!~!'||to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||(case when a.type='CI' then to_char(a.ent_Dt,'hh24:mi:ss') else '-' end)||'!~!~!'||(case when a.type='CO' then to_char(a.ent_Dt,'hh24:mi:ss') else '-' end)||'!~!~!'||trim(a.emp_area)||'!~!~!'||trim(a.emp_locn)||'!~!~!'||trim(a.emp_rmk) as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from wb_eattn_rec a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a.branchcd='" + work_br + "' and a.vchdate " + xprd1 + " and a.ent_by='" + team6.col5.Trim() + "' order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    break;
                case "EP514":
                    xprd1 = "between to_date('" + mydate + "','dd/mm/yyyy')-31 and to_date('" + mydate + "','dd/mm/yyyy')";
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Dated,Start_time,Finish_time,BOM_no,Punch_code,Operation,Remarks' as col1,to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||(case when a.type='SP' then to_char(a.ent_Dt,'hh24:mi:ss') else '-' end)||'!~!~!'||(case when a.type='FP' then to_char(a.ent_Dt,'hh24:mi:ss') else '-' end)||'!~!~!'||trim(a.Bomcode)||'!~!~!'||trim(a.pchcode)||'!~!~!'||trim(a.proc_dtl)||'!~!~!'||trim(a.prd_Remark) as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from wb_prod_rec a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a.branchcd='" + work_br + "' and a.vchdate " + xprd1 + " and a.ent_by='" + team6.col5.Trim() + "' order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    break;

                // sales person check in check out , expenses
                case "EP811":

                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Dated,Chk_in,Chk_out,Lead_Dtl,Location,Remarks' as col1,to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||(case when a.type='CI' then to_char(a.ent_Dt,'hh24:mi:ss') else '-' end)||'!~!~!'||(case when a.type='CO' then to_char(a.ent_Dt,'hh24:mi:ss') else '-' end)||'!~!~!'||trim(a.Vis_lead)||'!~!~!'||trim(a.vis_locn)||'!~!~!'||trim(a.vis_remarks) as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from wb_smv_rec a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a.branchcd='" + work_br + "' and a.vchdate " + xprdRange + " and a.ent_by='" + team6.col5.Trim() + "' order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";

                    //mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Entry #,Dt_Time,Lead_no,Location,Remarks' as col1,trim(a.vchnum)||'!~!~!'||to_char(a.ent_Dt,'dd/mm/yyyy :hh24:mi:ss')||'!~!~!'||trim(a.vis_lead)||'!~!~!'||trim(a.Vis_locn)||'!~!~!'||trim(a.Vis_Remarks) as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from wb_smv_rec a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a." + branch_cd + " and a.type like 'CI%' and a.vchdate " + xprdRange + " and a.ent_by='" + team6.col5.Trim() + "' order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    break;
                case "EP811A":
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Chkin_Ref,others,chkin_lead,Locations' as col1,trim(a.Vis_lead)||'!~!~!'||'-'||'!~!~!'||a.branchcd||'-'||a.type||'-'||a.vchnum||'-'||to_char(a.Vchdate,'dd/mm/yyyy')||'!~!~!'||'-' as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from wb_smv_rec a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a." + branch_cd + " and a.type like 'CI%' and a.vchdate " + xprdRange + " and a.ent_by='" + team6.col5.Trim() + "' and a.branchcd||'-'||a.type||'-'||a.vchnum||'-'||to_char(a.Vchdate,'dd/mm/yyyy') not in (select trim(nvl(chk_in_Dtl,'-')) from  wb_smv_rec where " + branch_cd + " and type like 'CO%' and vchdate " + xprdRange + " and ent_by='" + team6.col5.Trim() + "')  order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    break;
                case "EP811E":
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Attin_Ref,others,Attin_lead,Locations' as col1,to_Char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||'-'||'!~!~!'||a.branchcd||'-'||a.type||'-'||a.vchnum||'-'||to_char(a.Vchdate,'dd/mm/yyyy')||'!~!~!'||'-' as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from wb_eattn_rec a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a." + branch_cd + " and a.type like 'CI%' and a.vchdate " + xprdRange + " and a.ent_by='" + team6.col5.Trim() + "' and a.branchcd||'-'||a.type||'-'||a.vchnum||'-'||to_char(a.Vchdate,'dd/mm/yyyy') not in (select trim(nvl(emp_in_Dtl,'-')) from  wb_eattn_rec where " + branch_cd + " and type like 'CO%' and vchdate " + xprdRange + " and ent_by='" + team6.col5.Trim() + "')  order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    break;

                case "EP812":
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Entry #,Dt_Time,Lead_no,Location,Met_with,Remarks' as col1,trim(a.vchnum)||'!~!~!'||to_char(a.ent_Dt,'dd/mm/yyyy :hh24:mi:ss')||'!~!~!'||trim(a.vis_lead)||'!~!~!'||trim(a.Vis_locn)||'!~!~!'||trim(a.Vis_Person)||'!~!~!'||trim(a.Vis_Remarks) as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from wb_smv_rec a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a." + branch_cd + " and a.type like 'CO%' and a.vchdate " + xprdRange + " and a.ent_by='" + team6.col5.Trim() + "' order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    break;
                case "EP813":
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Entry #,Dt_Time,Exp_Name,Amount' as col1,trim(a.vchnum)||'!~!~!'||to_char(a.ent_Dt,'dd/mm/yyyy :hh24:mi:ss')||'!~!~!'||trim(a.exp_name)||'!~!~!'||trim(a.exp_amt) as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from wb_smv_exp a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a." + branch_cd + " and a.type like 'EX%' and a.vchdate " + xprdRange + " and a.ent_by='" + team6.col5.Trim() + "' order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    break;
                // sales person check in check out , expenses

                case "EP814":
                    // wb lead log list
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Lead_no,Lead_Dt,Contact,Ent_by' as col1,'000000'||'!~!~!'||to_char(sysdate,'dd/mm/yyyy')||'!~!~!'||'Collection'||'!~!~!'||'-' as col2,'-' as col3,'-' as col4,'-' as col5 from dual union all Select 'Lead_no,Lead_Dt,Contact,Ent_by' as col1,'000000'||'!~!~!'||to_char(sysdate,'dd/mm/yyyy')||'!~!~!'||'CRM Activity'||'!~!~!'||'-' as col2,'-' as col3,'-' as col4,'-' as col5 from dual union all Select 'Lead_no,Lead_Dt,Contact,Ent_by' as col1,trim(a.lrcno)||'!~!~!'||to_char(a.lrcdt,'dd/mm/yyyy')||'!~!~!'||trim(a.ldescr)||'!~!~!'||trim(a.ent_by) as col2,'-' as col3,'-' as col4,to_char(a.lrcdt,'yyyymmdd')||a.branchcd as col5 from wb_lead_log a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a.branchcd='00' and a.type like 'LR%' and (uppeR(trim(a.REFFBY))='" + sman_id + "' or uppeR(trim(a.ent_by))='" + sman_id + "')  order by col5 desc) ";
                    break;

                case "EP814DA":
                    // wb lead log list
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Work_code,Blank,Work_name,Blank' as col1,trim(type1)||'!~!~!'||'-'||'!~!~!'||trim(name)||'!~!~!'||'-'  as col2,'-' as col3,'-' as col4,type1 as col5 from typegrp where branchcd='00' and id='DA' order by type1) ";
                    break;


                case "EP815":
                    // party_list


                    switch (co_cd)
                    {
                        case "NEOP":
                            if (makeDouble(user_lvl) <= 1)
                            {
                                mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Cust_code,State,Cust_Name,country,Name,Phone,Email' as col1,trim(a.Aname)||'!~!~!'||trim(a.staten)||'!~!~!'||trim(a.acode)||'!~!~!'||trim(a.country)||'!~!~!'||trim(a.person)||'!~!~!'||trim(a.telnum)||'!~!~!'||trim(a.email) as col2,'-' as col3,'-' as col4,a.branchcd as col5 from wbvu_fam_crm a where trim(nvl(deac_by,'-'))='-'   order by a.aname) ";
                            }
                            else
                            {
                                mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Cust_code,State,Cust_Name,country,Name,Phone,Email' as col1,trim(a.Aname)||'!~!~!'||trim(a.staten)||'!~!~!'||trim(a.acode)||'!~!~!'||trim(a.country)||'!~!~!'||trim(a.person)||'!~!~!'||trim(a.telnum)||'!~!~!'||trim(a.email) as col2,'-' as col3,'-' as col4,a.branchcd as col5 from wbvu_fam_crm a where trim(nvl(deac_by,'-'))='-' and (instr(trim(bssch),'" + cust_Sch + "')>0 or upper(trim(ent_by))='" + team6.col5.ToUpper().Trim() + "')  order by a.aname) ";
                            }

                            break;
                        default:

                            if (famtbl.Length <= 1)
                            {
                                mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Cust_code,State,Cust_Name,country,Name,Phone,Email' as col1,trim(a.Aname)||'!~!~!'||trim(a.staten)||'!~!~!'||trim(a.acode)||'!~!~!'||trim(a.country)||'!~!~!'||trim(a.person)||'!~!~!'||trim(a.telnum)||'!~!~!'||trim(a.email) as col2,'-' as col3,'-' as col4,a.branchcd as col5 from famst a where trim(nvl(deac_by,'-'))='-' and substr(Acode,1,2)='16' order by a.aname) ";
                            }
                            else
                            {
                                mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Cust_code,State,Cust_Name,country,Name,Phone,Email' as col1,trim(a.Aname)||'!~!~!'||trim(a.staten)||'!~!~!'||trim(a.acode)||'!~!~!'||trim(a.country)||'!~!~!'||trim(a.person)||'!~!~!'||trim(a.telnum)||'!~!~!'||trim(a.email) as col2,'-' as col3,'-' as col4,a.branchcd as col5 from wbvu_fam_crm a where trim(nvl(deac_by,'-'))='-' order by a.aname) ";
                            }

                            break;
                    }

                    break;

                case "EP815_IV":
                    // party_list


                    switch (co_cd)
                    {
                        case "NEOP":
                            if (makeDouble(user_lvl) <= 1)
                            {
                                mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Cust_code,State,Cust_Name,country,Name,Phone,Email' as col1,trim(a.Aname)||'!~!~!'||trim(a.staten)||'!~!~!'||trim(a.acode)||'!~!~!'||trim(a.country)||'!~!~!'||trim(a.person)||'!~!~!'||trim(a.telnum)||'!~!~!'||trim(a.email) as col2,'-' as col3,'-' as col4,a.branchcd as col5 from wbvu_fam_crm a where trim(nvl(deac_by,'-'))='-'   order by a.aname) ";
                            }
                            else
                            {
                                mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Cust_code,State,Cust_Name,country,Name,Phone,Email' as col1,trim(a.Aname)||'!~!~!'||trim(a.staten)||'!~!~!'||trim(a.acode)||'!~!~!'||trim(a.country)||'!~!~!'||trim(a.person)||'!~!~!'||trim(a.telnum)||'!~!~!'||trim(a.email) as col2,'-' as col3,'-' as col4,a.branchcd as col5 from wbvu_fam_crm a where trim(nvl(deac_by,'-'))='-' and (instr(trim(bssch),'" + cust_Sch + "')>0 or upper(trim(ent_by))='" + team6.col5.ToUpper().Trim() + "')  order by a.aname) ";
                            }

                            break;
                        default:

                            if (famtbl.Length <= 1)
                            {
                                mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Cust_code,State,Cust_Name,country,Name,Phone,Email' as col1,trim(a.Aname)||'!~!~!'||trim(a.staten)||'!~!~!'||trim(a.acode)||'!~!~!'||trim(a.country)||'!~!~!'||trim(a.person)||'!~!~!'||trim(a.telnum)||'!~!~!'||trim(a.email) as col2,'-' as col3,'-' as col4,a.branchcd as col5 from famst a where trim(nvl(deac_by,'-'))='-' and substr(Acode,1,2) in ('16', '06', '02') order by a.aname) ";
                            }
                            else
                            {
                                //mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Cust_code,State,Cust_Name,country,Name,Phone,Email' as col1,trim(a.Aname)||'!~!~!'||trim(a.staten)||'!~!~!'||trim(a.acode)||'!~!~!'||trim(a.country)||'!~!~!'||trim(a.person)||'!~!~!'||trim(a.telnum)||'!~!~!'||trim(a.email) as col2,'-' as col3,'-' as col4,a.branchcd as col5 from wbvu_fam_crm a where trim(nvl(deac_by,'-'))='-' order by a.aname) ";
                                mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Cust_code,State,Cust_Name,country,Name,Phone,Email' as col1,trim(a.Aname)||'!~!~!'||trim(a.staten)||'!~!~!'||trim(a.acode)||'!~!~!'||trim(a.country)||'!~!~!'||trim(a.person)||'!~!~!'||trim(a.telnum)||'!~!~!'||trim(a.email) as col2,'-' as col3,'-' as col4,a.branchcd as col5 from famst a where trim(nvl(deac_by,'-'))='-' and substr(Acode,1,2) in ('16', '06', '02') order by a.aname) ";
                            }

                            break;
                    }

                    break;

                case "EP815A":
                    // party_list
                    if (famtbl.Length <= 1)
                    {
                        mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Country,State,City,Person' as col1,trim(a.Country)||'!~!~!'||trim(a.staten)||'!~!~!'||trim(a.addr3)||'!~!~!'||trim(a.person) as col2,'-' as col3,'-' as col4,a.branchcd as col5 from famst a where trim(a.acode)='" + team6.col6.Trim() + "') ";
                    }
                    else
                    {
                        mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Country,State,City,Person' as col1,trim(a.Country)||'!~!~!'||trim(a.staten)||'!~!~!'||trim(a.addr3)||'!~!~!'||trim(a.person) as col2,'-' as col3,'-' as col4,a.branchcd as col5 from wbvu_fam_crm a where trim(a.acode)='" + team6.col6.Trim() + "') ";
                    }

                    break;
                case "EP815D":
                    string ord_br_Str;
                    if (team6.col1.Trim() == "SGRP")
                    {
                        ord_br_Str = "a.branchcd='00' and trim(nvl(a.mfginbr,'-'))='" + work_br + "'";
                        pop_sql = "SELECT distinct a.ACODE AS FSTR,b.branchcd,b.person,b.telnum,b.email,b.ANAME AS PARTY,a.ACODE AS CODE,b.ADDR1,b.ADDR2,b.staten as state,b.country,Pay_num,b.Grp FROM somas a, FAMST b where " + ord_br_Str + " and a.type='" + team6.col6 + "' and trim(nvl(a.ICAT,'-'))!='Y'  and trim(nvl(a.app_by,'-'))!='-' and trim(A.acode)=trim(B.acode) and length(Trim(nvl(b.deac_by,'-')))<=1 ORDER BY aname ";

                        mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Cust_code,State,Cust_Name,country,Name,Phone,Email' as col1,trim(a.PARTY)||'!~!~!'||trim(a.state)||'!~!~!'||trim(a.code)||'!~!~!'||trim(a.country)||'!~!~!'||trim(a.person)||'!~!~!'||trim(a.telnum)||'!~!~!'||trim(a.email) as col2,'-' as col3,'-' as col4,a.branchcd as col5 from (" + pop_sql + ") a  order by a.party) ";

                    }
                    else
                    {
                        if (famtbl.Length <= 1)
                        {
                            mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Cust_code,State,Cust_Name,country,Name,Phone,Email' as col1,trim(a.Aname)||'!~!~!'||trim(a.staten)||'!~!~!'||trim(a.acode)||'!~!~!'||trim(a.country)||'!~!~!'||trim(a.person)||'!~!~!'||trim(a.telnum)||'!~!~!'||trim(a.email) as col2,'-' as col3,'-' as col4,a.branchcd as col5 from famst a where trim(nvl(deac_by,'-'))='-' and substr(Acode,1,2)='16' order by a.aname) ";
                        }
                        else
                        {
                            mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Cust_code,State,Cust_Name,country,Name,Phone,Email' as col1,trim(a.Aname)||'!~!~!'||trim(a.staten)||'!~!~!'||trim(a.acode)||'!~!~!'||trim(a.country)||'!~!~!'||trim(a.person)||'!~!~!'||trim(a.telnum)||'!~!~!'||trim(a.email) as col2,'-' as col3,'-' as col4,a.branchcd as col5 from wbvu_fam_crm a where trim(nvl(deac_by,'-'))='-' order by a.aname) ";
                        }

                    }

                    break;

                case "EP816":

                    // fg main_grp
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'FG_code,FG_Name,Code,Name' as col1,trim(a.Type1)||'!~!~!'||trim(a.Name)||'!~!~!'||trim(a.name)||'!~!~!'||trim(a.type1) as col2,'-' as col3,'-' as col4,a.type1 as col5 from type a where a.id='Y' and  a.type1 like '9%' order by a.name) ";
                    break;
                case "EP816A":
                    // Sale types for SO API
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Type_code,Blank,Type_Name,Blank' as col1,trim(a.Type1)||'!~!~!'||'-'||'!~!~!'||trim(a.name)||'!~!~!'||'-' as col2,'-' as col3,'-' as col4,a.type1 as col5 from type a where a.id='V' and  a.type1 like '4%' order by a.type1) ";
                    break;
                case "EP816B":
                    // store types for Issue API

                    if (makeDouble(reel_trans) > 0)
                    {
                        mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Type_code,Blank,Type_Name,Blank' as col1,trim(a.Type1)||'!~!~!'||'-'||'!~!~!'||trim(a.name)||'!~!~!'||'-' as col2,'-' as col3,'-' as col4,a.type1 as col5 from type a where a.id='M' and  a.type1 like '3%' and a.type1 not in ('36','31') order by a.type1) ";
                    }
                    else
                    {
                        mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Type_code,Blank,Type_Name,Blank' as col1,trim(a.Type1)||'!~!~!'||'-'||'!~!~!'||trim(a.name)||'!~!~!'||'-' as col2,'-' as col3,'-' as col4,a.type1 as col5 from type a where a.id='M' and  a.type1 like '3%' and a.type1!='36' order by a.type1) ";
                    }

                    break;
                case "EP816C":
                    // store types for Return API
                    if (makeDouble(reel_trans) > 0)
                    {
                        mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Type_code,Blank,Type_Name,Blank' as col1,trim(a.Type1)||'!~!~!'||'-'||'!~!~!'||trim(a.name)||'!~!~!'||'-' as col2,'-' as col3,'-' as col4,a.type1 as col5 from type a where a.id='M' and  a.type1 like '1%' and a.type1 not in ('11') and a.type1<'15' order by a.type1) ";
                    }
                    else
                    {
                        mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Type_code,Blank,Type_Name,Blank' as col1,trim(a.Type1)||'!~!~!'||'-'||'!~!~!'||trim(a.name)||'!~!~!'||'-' as col2,'-' as col3,'-' as col4,a.type1 as col5 from type a where a.id='M' and  a.type1 like '1%' and a.type1<'15' order by a.type1) ";
                    }
                    break;

                case "EP817":
                    // Fg item_list
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Item_code,Unit,Item_Name,Part_code' as col1,trim(a.Iname)||'!~!~!'||trim(a.unit)||'!~!~!'||trim(a.icode)||'!~!~!'||trim(a.cpartno) as col2,'-' as col3,'-' as col4,a.branchcd as col5 from item a where substr(a.icode,1,1)='9' and trim(nvl(deac_by,'-'))='-' and length(trim(a.icode))>4 and substr(a.icode,1,4)='" + team6.col6.Trim() + "' order by a.Iname) ";
                    break;

                case "EP818":

                    // wb_iss_req issue
                    if (team6.col1 == "ARUB")   // 27/04/2022
                    {
                        spl_qry = "select to_Char(a.vchdate,'yyyymmdd')||trim(a.acode)||a.vchnum as Fstr,a.vchnum,a.vchdate,C.Name,trim(a.acode) as Dept_Cd,trim(A.stage) as WIP_Stg,sum(a.iqty_chl)-sum(a.issued) as Pending_Qty,max(a.ent_by) As Request_by,round(sysdate-a.vchdate,0) as Pend_Days ,a.branchcd from (SELECT branchcd,acode,stage,vchnum,vchdate,icode,ent_by,'-' as jobno,vchdate as jobdt,req_qty as iqty_chl,0 as issued from wb_iss_req where branchcd='" + work_br + "' and type='" + team6.col6.Trim() + "' and vchdate " + last30_prd + " and nvl(closed,'-')!='Y' union all SELECT branchcd,acode,stage,trim(invno) as refnum,invdate,icode,null as entby,'-' as invno,vchdate,0 as iqty_chl,iqtyout as issued from ivoucher where branchcd='" + work_br + "'  and type='" + team6.col6.Trim() + "' and vchdate " + last30_prd + ")a,type c where c.id='M'  and trim(A.acode)=trim(c.type1) group by a.branchcd,to_Char(a.vchdate,'yyyymmdd')||trim(a.acode)||a.vchnum,C.Name,trim(a.acode),a.vchnum,to_char(a.vchdate,'dd/mm/yyyy'),a.vchdate,trim(A.stage) having sum(a.iqty_chl)-sum(a.issued)>0 ";
                        mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select distinct 'Req_no,Req_Dt,Deptt,Deptt_cd' as col1,trim(a.vchnum)||'!~!~!'||to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||trim(a.Name)||'!~!~!'||a.dept_cd as col2,'-' as col3,'-' as col4,a.fstr as col5 from (" + spl_qry + ") A  ) order by col5 desc";
                    }
                    else
                    {
                        spl_qry = "select to_Char(a.vchdate,'yyyymmdd')||trim(a.acode)||a.vchnum as Fstr,a.vchnum,a.vchdate,C.Name,trim(a.acode) as Dept_Cd,trim(A.stage) as WIP_Stg,sum(a.iqty_chl)-sum(a.issued) as Pending_Qty,max(a.ent_by) As Request_by,round(sysdate-a.vchdate,0) as Pend_Days ,a.branchcd from (SELECT branchcd,acode,stage,vchnum,vchdate,icode,ent_by,'-' as jobno,vchdate as jobdt,req_qty as iqty_chl,0 as issued from wb_iss_req where branchcd='" + work_br + "' and type='" + team6.col6.Trim() + "' and vchdate " + last30_prd + " and nvl(closed,'-')!='Y' union all SELECT branchcd,acode,stage,trim(refnum) as refnum,refdate,icode,null as entby,'-' as invno,vchdate,0 as iqty_chl,iqtyout as issued from ivoucher where branchcd='" + work_br + "'  and type='" + team6.col6.Trim() + "' and vchdate " + last30_prd + ")a,type c where c.id='M'  and trim(A.acode)=trim(c.type1) group by a.branchcd,to_Char(a.vchdate,'yyyymmdd')||trim(a.acode)||a.vchnum,C.Name,trim(a.acode),a.vchnum,to_char(a.vchdate,'dd/mm/yyyy'),a.vchdate,trim(A.stage) having sum(a.iqty_chl)-sum(a.issued)>0 ";
                        mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select distinct 'Req_no,Req_Dt,Deptt,Deptt_cd' as col1,trim(a.vchnum)||'!~!~!'||to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||trim(a.Name)||'!~!~!'||a.dept_cd as col2,'-' as col3,'-' as col4,a.fstr as col5 from (" + spl_qry + ") A  ) order by col5 desc";
                    }
                    break;
                case "EP818A":
                    // wb_iss_req issue
                    if (team6.col1 == "ARUB")  // 27/04/2022
                    {
                        spl_qry = "select to_Char(a.vchdate,'yyyymmdd')||trim(a.acode)||a.vchnum||trim(a.icode) as Fstr,a.vchnum,a.vchdate,B.iname,C.Name,trim(a.acode) as Dept_Cd,trim(A.stage) as WIP_Stg,sum(a.iqty_chl)-sum(a.issued) as Pending_Qty,max(a.ent_by) As Request_by,round(sysdate-a.vchdate,0) as Pend_Days ,a.branchcd,trim(a.icode) as Icode from (SELECT branchcd,acode,stage,vchnum,vchdate,icode,ent_by,'-' as jobno,vchdate as jobdt,req_qty as iqty_chl,0 as issued from wb_iss_req where branchcd='" + work_br + "' and type like '3%' and vchdate " + last30_prd + " and nvl(closed,'-')!='Y' and to_Char(vchdate,'yyyymmdd')||trim(acode)||vchnum='" + team6.col6.Trim() + "' union all SELECT branchcd,acode,stage,trim(invno) as refnum,invdate,icode,null as entby,'-' as invno,vchdate,0 as iqty_chl,iqtyout as issued from ivoucher where branchcd='" + work_br + "'  and type like '3%' and vchdate " + last30_prd + ")a,item b,type c where c.id='M' and trim(A.Icode)=trim(B.icode) and trim(A.acode)=trim(c.type1) group by a.branchcd,to_Char(a.vchdate,'yyyymmdd')||trim(a.acode)||a.vchnum||trim(a.icode),C.Name,B.iname,trim(a.acode),trim(a.Icode),a.vchnum,to_char(a.vchdate,'dd/mm/yyyy'),a.vchdate,trim(A.stage) having sum(a.iqty_chl)-sum(a.issued)>0 order by fstr";
                        mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Req_no,Req_Dt,Deptt,Item,Req_qty,Dpt_code,WIP_Code,Item_Code' as col1,trim(a.vchnum)||'!~!~!'||to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||trim(a.Name)||'!~!~!'||trim(a.Iname)||'!~!~!'||a.Pending_Qty||'!~!~!'||a.Dept_cd||'!~!~!'||a.Wip_Stg||'!~!~!'||a.Icode as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from (" + spl_qry + ") A  order by to_char(a.VCHDATE,'yyyymmdd')||a.branchcd||a.VCHNUM desc) ";
                    }
                    else
                    {
                        spl_qry = "select to_Char(a.vchdate,'yyyymmdd')||trim(a.acode)||a.vchnum||trim(a.icode) as Fstr,a.vchnum,a.vchdate,B.iname,C.Name,trim(a.acode) as Dept_Cd,trim(A.stage) as WIP_Stg,sum(a.iqty_chl)-sum(a.issued) as Pending_Qty,max(a.ent_by) As Request_by,round(sysdate-a.vchdate,0) as Pend_Days ,a.branchcd,trim(a.icode) as Icode from (SELECT branchcd,acode,stage,vchnum,vchdate,icode,ent_by,'-' as jobno,vchdate as jobdt,req_qty as iqty_chl,0 as issued from wb_iss_req where branchcd='" + work_br + "' and type like '3%' and vchdate " + last30_prd + " and nvl(closed,'-')!='Y' and to_Char(vchdate,'yyyymmdd')||trim(acode)||vchnum='" + team6.col6.Trim() + "' union all SELECT branchcd,acode,stage,trim(refnum) as refnum,refdate,icode,null as entby,'-' as invno,vchdate,0 as iqty_chl,iqtyout as issued from ivoucher where branchcd='" + work_br + "'  and type like '3%' and vchdate " + last30_prd + ")a,item b,type c where c.id='M' and trim(A.Icode)=trim(B.icode) and trim(A.acode)=trim(c.type1) group by a.branchcd,to_Char(a.vchdate,'yyyymmdd')||trim(a.acode)||a.vchnum||trim(a.icode),C.Name,B.iname,trim(a.acode),trim(a.Icode),a.vchnum,to_char(a.vchdate,'dd/mm/yyyy'),a.vchdate,trim(A.stage) having sum(a.iqty_chl)-sum(a.issued)>0 order by fstr";
                        mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Req_no,Req_Dt,Deptt,Item,Req_qty,Dpt_code,WIP_Code,Item_Code' as col1,trim(a.vchnum)||'!~!~!'||to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||trim(a.Name)||'!~!~!'||trim(a.Iname)||'!~!~!'||a.Pending_Qty||'!~!~!'||a.Dept_cd||'!~!~!'||a.Wip_Stg||'!~!~!'||a.Icode as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from (" + spl_qry + ") A  order by to_char(a.VCHDATE,'yyyymmdd')||a.branchcd||a.VCHNUM desc) ";
                    }
                    break;


                case "EP818M1":

                    // wb_iss_req issue
                    //acode,vchnum,vchdate,icode,net_req AS num01,0 as issued,plan_Dt



                    spl_qry = "select to_Char(a.vchdate,'yyyymmdd')||trim(a.acode)||a.vchnum as Fstr,a.vchnum,a.vchdate,C.Name,trim(a.acode) as Dept_Cd,trim(A.stage) as WIP_Stg,sum(a.iqty_chl)-sum(a.issued) as Pending_Qty,max(a.ent_by) As Request_by,round(sysdate-a.vchdate,0) as Pend_Days ,a.branchcd from (SELECT branchcd,'" + O74 + "' as acode,acode as stage,vchnum,vchdate,icode,ent_by,'-' as jobno,vchdate as jobdt,num01 as iqty_chl,0 as issued from matl_alot where branchcd='" + work_br + "' and type='AL' and vchdate " + last30_prd + " and num01>0 union all SELECT branchcd,acode,stage,trim(invno) as refnum,invdate,icode,null as entby,'-' as invno,vchdate,0 as iqty_chl,iqtyout as issued from ivoucher where branchcd='" + work_br + "'  and type='" + team6.col6.Trim() + "' and vchdate " + last30_prd + ")a,type c where c.id='M'  and trim(A.acode)=trim(c.type1) group by a.branchcd,to_Char(a.vchdate,'yyyymmdd')||trim(a.acode)||a.vchnum,C.Name,trim(a.acode),a.vchnum,to_char(a.vchdate,'dd/mm/yyyy'),a.vchdate,trim(A.stage) having sum(a.iqty_chl)-sum(a.issued)>0 ";
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select distinct 'Req_no,Req_Dt,Deptt,Deptt_cd' as col1,trim(a.vchnum)||'!~!~!'||to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||trim(a.Name)||'!~!~!'||a.dept_cd as col2,'-' as col3,'-' as col4,a.fstr as col5 from (" + spl_qry + ") A  ) order by col5 desc";
                    break;
                case "EP818M2":
                    // wb_iss_req issue

                    spl_qry = "select to_Char(a.vchdate,'yyyymmdd')||trim(a.acode)||a.vchnum||trim(a.icode) as Fstr,a.vchnum,a.vchdate,B.iname,C.Name,trim(a.acode) as Dept_Cd,trim(A.stage) as WIP_Stg,sum(a.iqty_chl)-sum(a.issued) as Pending_Qty,max(a.ent_by) As Request_by,round(sysdate-a.vchdate,0) as Pend_Days ,a.branchcd,trim(a.icode) as Icode from (SELECT branchcd,'" + O74 + "' as acode,acode as stage,vchnum,vchdate,icode,ent_by,'-' as jobno,vchdate as jobdt,num01 as iqty_chl,0 as issued from matl_alot where branchcd='" + work_br + "' and type like 'AL%' and vchdate " + last30_prd + " and nvl(num01,0)>0 and to_Char(vchdate,'yyyymmdd')||'" + O74 + "'||vchnum='" + team6.col6.Trim() + "' union all SELECT branchcd,acode,stage,trim(invno) as refnum,invdate,icode,null as entby,'-' as invno,vchdate,0 as iqty_chl,iqtyout as issued from ivoucher where branchcd='" + work_br + "'  and type like '3%' and vchdate " + last30_prd + " and to_Char(invdate,'yyyymmdd')||'" + O74 + "'||trim(invno)='" + team6.col6.Trim() + "' )a,item b,type c where c.id='M' and trim(A.Icode)=trim(B.icode) and trim(A.acode)=trim(c.type1) group by a.branchcd,to_Char(a.vchdate,'yyyymmdd')||trim(a.acode)||a.vchnum||trim(a.icode),C.Name,B.iname,trim(a.acode),trim(a.Icode),a.vchnum,to_char(a.vchdate,'dd/mm/yyyy'),a.vchdate,trim(A.stage) having sum(a.iqty_chl)-sum(a.issued)>0 order by fstr";

                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Req_no,Req_Dt,Deptt,Item,Req_qty,Dpt_code,WIP_Code,Item_Code' as col1,trim(a.vchnum)||'!~!~!'||to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||trim(a.Name)||'!~!~!'||trim(a.Iname)||'!~!~!'||a.Pending_Qty||'!~!~!'||a.Dept_cd||'!~!~!'||a.Wip_Stg||'!~!~!'||a.Icode as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from (" + spl_qry + ") A  order by to_char(a.VCHDATE,'yyyymmdd')||a.branchcd||a.VCHNUM desc) ";
                    break;


                case "EP818R":
                    // wb_iss_req return
                    spl_qry = "select to_Char(a.vchdate,'yyyymmdd')||trim(a.acode)||a.vchnum as Fstr,a.vchnum,a.vchdate,C.Name,trim(a.acode) as Dept_Cd,trim(A.stage) as WIP_Stg,sum(a.iqty_chl)-sum(a.issued) as Pending_Qty,max(a.ent_by) As Request_by,round(sysdate-a.vchdate,0) as Pend_Days ,a.branchcd from (SELECT branchcd,acode,stage,vchnum,vchdate,icode,ent_by,'-' as jobno,vchdate as jobdt,req_qty as iqty_chl,0 as issued from wb_iss_req where branchcd='" + work_br + "' and type='" + team6.col6.Trim() + "' and vchdate " + last30_prd + " and nvl(closed,'-')!='Y' union all SELECT branchcd,acode,stage,trim(refnum) as refnum,refdate,icode,null as entby,'-' as invno,vchdate,0 as iqty_chl,iqtyin as issued from ivoucher where branchcd='" + work_br + "'  and type='" + team6.col6.Trim() + "' and vchdate " + last30_prd + ")a,type c where c.id='M'  and trim(A.acode)=trim(c.type1) group by a.branchcd,to_Char(a.vchdate,'yyyymmdd')||trim(a.acode)||a.vchnum,C.Name,trim(a.acode),a.vchnum,to_char(a.vchdate,'dd/mm/yyyy'),a.vchdate,trim(A.stage) having sum(a.iqty_chl)-sum(a.issued)>0 ";

                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select distinct 'Req_no,Req_Dt,Deptt,Deptt_cd' as col1,trim(a.vchnum)||'!~!~!'||to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||trim(a.Name)||'!~!~!'||a.dept_cd as col2,'-' as col3,'-' as col4,a.fstr as col5 from (" + spl_qry + ") A  ) order by col5 desc";
                    break;
                case "EP818S":
                    // wb_iss_req returndtl

                    spl_qry = "select to_Char(a.vchdate,'yyyymmdd')||trim(a.acode)||a.vchnum||trim(a.icode) as Fstr,a.vchnum,a.vchdate,B.iname,C.Name,trim(a.acode) as Dept_Cd,trim(A.stage) as WIP_Stg,sum(a.iqty_chl)-sum(a.issued) as Pending_Qty,max(a.ent_by) As Request_by,round(sysdate-a.vchdate,0) as Pend_Days ,a.branchcd,trim(a.icode) as Icode from (SELECT branchcd,acode,stage,vchnum,vchdate,icode,ent_by,'-' as jobno,vchdate as jobdt,req_qty as iqty_chl,0 as issued from wb_iss_req where branchcd='" + work_br + "' and type like '1%' and vchdate " + last30_prd + " and nvl(closed,'-')!='Y' and to_Char(vchdate,'yyyymmdd')||trim(acode)||vchnum='" + team6.col6.Trim() + "' union all SELECT branchcd,acode,stage,trim(refnum) as refnum,refdate,icode,null as entby,'-' as invno,vchdate,0 as iqty_chl,iqtyin as issued from ivoucher where branchcd='" + work_br + "'  and type like '1%' and vchdate " + last30_prd + ")a,item b,type c where c.id='M' and trim(A.Icode)=trim(B.icode) and trim(A.acode)=trim(c.type1) group by a.branchcd,to_Char(a.vchdate,'yyyymmdd')||trim(a.acode)||a.vchnum||trim(a.icode),C.Name,B.iname,trim(a.acode),trim(a.Icode),a.vchnum,to_char(a.vchdate,'dd/mm/yyyy'),a.vchdate,trim(A.stage) having sum(a.iqty_chl)-sum(a.issued)>0 order by fstr";

                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Req_no,Req_Dt,Deptt,Item,Req_qty,Dpt_code,WIP_Code,Item_Code' as col1,trim(a.vchnum)||'!~!~!'||to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||trim(a.Name)||'!~!~!'||trim(a.Iname)||'!~!~!'||a.Pending_Qty||'!~!~!'||a.Dept_cd||'!~!~!'||a.Wip_Stg||'!~!~!'||a.Icode as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from (" + spl_qry + ") A  order by to_char(a.VCHDATE,'yyyymmdd')||a.branchcd||a.VCHNUM desc) ";
                    break;

                //case "EP818R":
                //    // wb_iss_req return

                //    spl_qry = "select to_Char(a.vchdate,'yyyymmdd')||trim(a.acode)||a.vchnum||trim(a.icode) as Fstr,a.vchnum,a.vchdate,B.iname,C.Name,trim(a.acode) as Dept_Cd,trim(A.stage) as WIP_Stg,sum(a.iqty_chl)-sum(a.issued) as Pending_Qty,max(a.ent_by) As Request_by,round(sysdate-a.vchdate,0) as Pend_Days ,a.branchcd,trim(a.icode) as Icode from (SELECT branchcd,acode,stage,vchnum,vchdate,icode,ent_by,'-' as jobno,vchdate as jobdt,req_qty as iqty_chl,0 as issued from wb_iss_req where branchcd='" + work_br + "' and type='11' and vchdate " + last30_prd + " and nvl(closed,'-')!='Y' union all SELECT branchcd,acode,stage,trim(refnum) as refnum,refdate,icode,null as entby,'-' as invno,vchdate,0 as iqty_chl,iqtyin as issued from ivoucher where branchcd='" + work_br + "'  and type='11' and vchdate " + last30_prd + ")a,item b,type c where c.id='M' and trim(A.Icode)=trim(B.icode) and trim(A.acode)=trim(c.type1) group by a.branchcd,to_Char(a.vchdate,'yyyymmdd')||trim(a.acode)||a.vchnum||trim(a.icode),C.Name,B.iname,trim(a.acode),trim(a.Icode),a.vchnum,to_char(a.vchdate,'dd/mm/yyyy'),a.vchdate,trim(A.stage) having sum(a.iqty_chl)-sum(a.issued)>0 order by fstr";

                //    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Req_no,Req_Dt,Deptt,Item,Req_qty,Dpt_code,WIP_Code,Item_Code' as col1,trim(a.vchnum)||'!~!~!'||to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||trim(a.Name)||'!~!~!'||trim(a.Iname)||'!~!~!'||a.Pending_Qty||'!~!~!'||a.Dept_cd||'!~!~!'||a.Wip_Stg||'!~!~!'||a.Icode as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from (" + spl_qry + ") A  order by to_char(a.VCHDATE,'yyyymmdd')||a.branchcd||a.VCHNUM desc) ";
                //    break;

                case "EP819":
                    // dept Code
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Dpt_code,Dpt_Name,Code,Name' as col1,trim(a.Type1)||'!~!~!'||trim(a.Name)||'!~!~!'||trim(a.Name)||'!~!~!'||trim(a.type1) as col2,'-' as col3,'-' as col4,a.type1 as col5 from type a where a.id='M' and  a.type1 like '6%' order by a.name) ";
                    break;
                case "EP820":
                    // WIP Code
                    if (team6.col1 == "SVPL" || team6.col1 == "GDOT")
                    {
                        mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Wip_code,Wip_Name,Code,Name' as col1,trim(acref)||'!~!~!'||trim(Name)||'!~!~!'||trim(name)||'!~!~!'||trim(acref)  as col2,'-' as col3,'-' as col4,type1 as col5 from typegrp where branchcd='" + work_br + "' and id='WI' and  acref like '6%' and trim(acref) in ('61', '69')  order by acref) ";
                    }
                    else
                    {
                        if (team6.col1 == "CHPL")
                        {
                            mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Wip_code,Wip_Name,Code,Name' as col1,trim(acref)||'!~!~!'||trim(Name)||'!~!~!'||trim(name)||'!~!~!'||trim(acref)  as col2,'-' as col3,'-' as col4,type1 as col5 from typegrp where branchcd='" + work_br + "' and id='WI' and  acref like '6%' order by acref) ";
                        }
                        else
                        {
                            mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Wip_code,Wip_Name,Code,Name' as col1,trim(acref)||'!~!~!'||trim(Name)||'!~!~!'||trim(name)||'!~!~!'||trim(acref)  as col2,'-' as col3,'-' as col4,type1 as col5 from typegrp where branchcd='" + work_br + "' and id='WI' and  acref like '6%' and acref<='69' order by acref) ";
                        }
                    }
                    break;
                case "EP820A":
                    // BIN Code
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'BIN_code,BIN_Name,Code,Name' as col1,trim(Name)||'!~!~!'||'-'||'!~!~!'||trim(type1)||'!~!~!'||trim(acref)  as col2,'-' as col3,'-' as col4,type1 as col5 from typegrp where branchcd='" + work_br + "' and id='BN'  order by Name) ";
                    break;

                case "EP820C":
                    // proc Code
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Pro_code,pro_Name,Code,Name' as col1,trim(type1)||'!~!~!'||trim(type1)||'!~!~!'||trim(name)||'!~!~!'||trim(name)  as col2,'-' as col3,'-' as col4,type1 as col5 from typegrp where branchcd!='DD' and id='PC' order by Name) ";
                    break;

                case "EP821":
                    // gen item_list
                    if (makeDouble(reel_trans) > 0)
                    {
                        mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Item_code,Unit,Item_Name,Part_code' as col1,trim(a.Icode)||'!~!~!'||trim(a.unit)||'!~!~!'||trim(a.Iname)||'!~!~!'||trim(a.cpartno) as col2,'-' as col3,'-' as col4,a.branchcd as col5 from item a where substr(A.icode,1,2) not in ('07','08','09') and substr(a.icode,1,1)<'9' and trim(nvl(deac_by,'-'))='-' and length(trim(a.icode))>4 order by a.Iname) ";
                    }
                    else
                    {
                        mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Item_code,Unit,Item_Name,Part_code' as col1,trim(a.Icode)||'!~!~!'||trim(a.unit)||'!~!~!'||trim(a.Iname)||'!~!~!'||trim(a.cpartno) as col2,'-' as col3,'-' as col4,a.branchcd as col5 from item a where substr(a.icode,1,1)<'9' and trim(nvl(deac_by,'-'))='-' and length(trim(a.icode))>4 order by a.Iname) ";
                    }
                    break;
                case "EP821M":
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Item_code,Unit,Item_Name,Part_code' as col1,trim(a.Icode)||'!~!~!'||trim(a.unit)||'!~!~!'||trim(a.Iname)||'!~!~!'||trim(a.cpartno) as col2,'-' as col3,'-' as col4,a.branchcd as col5 from item a where substr(A.icode,1,1)in ('4','5') and trim(nvl(deac_by,'-'))='-' and length(trim(a.icode))>4 order by a.Iname) ";
                    break;

                case "EP821F":
                    // gen item_list
                    //mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Item_code,Rate,Item_Name,Part_code' as col1,trim(a.Icode)||'!~!~!'||trim(a.IRATE)||'!~!~!'||trim(a.Iname)||'!~!~!'||trim(a.cpartno) as col2,'-' as col3,'-' as col4,a.branchcd as col5 from item a where substr(a.icode,1,1) in ('7','9') and trim(nvl(deac_by,'-'))='-' and length(trim(a.icode))>4 order by a.Iname) ";
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Item_code,Rate,Item_Name,Part_code' as col1,trim(a.Icode)||'!~!~!'||trim(b.IRATE)||'!~!~!'||trim(a.Iname)||'!~!~!'||trim(a.cpartno) as col2,'-' as col3,'-' as col4,a.branchcd as col5 from item a, ivoucher b where trim(a.icode)=trim(b.icode) and trim(b.type) like '4%' and substr(b.icode,1,1) in ('7','9') and substr(a.icode,1,1) in ('7','9') and trim(nvl(deac_by,'-'))='-' and length(trim(a.icode))>4 order by a.Iname) ";
                    break;

                case "EP822":
                    // Expense type
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Exp_Name,Exp_code,Code,Name' as col1,trim(a.Name)||'!~!~!'||'-'||'!~!~!'||trim(a.type1)||'!~!~!'||trim(a.type1) as col2,'-' as col3,'-' as col4,a.type1 as col5 from type a where a.id='_' order by a.name) ";
                    break;
                case "EP823":
                    // Fg sub group
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Item_code,Unit,Item_Name,Part_code' as col1,trim(a.Icode)||'!~!~!'||trim(a.unit)||'!~!~!'||trim(a.Iname)||'!~!~!'||trim(a.cpartno) as col2,'-' as col3,'-' as col4,a.branchcd as col5 from item a where substr(a.icode,1,1)='9' and length(Trim(icode))=4 and trim(nvl(deac_by,'-'))='-'  order by a.Iname) ";
                    break;
                case "EP824":
                    // country
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Cnt_Name,cnt_code,Ctry_Name,Other' as col1,trim(a.Name)||'!~!~!'||'-'||'!~!~!'||null||'!~!~!'||trim(a.type1) as col2,'-' as col3,'-' as col4,a.type1 as col5 from typegrp a where a.branchcd!='DD' and a.id='CN' order by a.name) ";
                    break;
                case "EP825":
                    // staten
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'sta_Name,sta_code,sta_Name,Other' as col1,trim(a.Name)||'!~!~!'||'-'||'!~!~!'||null||'!~!~!'||trim(a.type1) as col2,'-' as col3,'-' as col4,a.type1 as col5 from typegrp a where a.branchcd!='DD' and a.id='ES' order by a.name) ";
                    break;
                case "EP826":
                    // lead source
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Src_Name,Src_code,Src_Name,Other' as col1,trim(a.Name)||'!~!~!'||'-'||'!~!~!'||null||'!~!~!'||trim(a.type1) as col2,'-' as col3,'-' as col4,a.type1 as col5 from typegrp a where a.branchcd!='DD' and a.id='ST' order by a.name) ";
                    break;
                case "EP827":
                    // industry source
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'cnt_Name,Src_code,Src_Name,Other' as col1,trim(a.Name)||'!~!~!'||'-'||'!~!~!'||null||'!~!~!'||trim(a.type1) as col2,'-' as col3,'-' as col4,a.type1 as col5 from typegrp a where a.branchcd!='DD' and a.id='SI' order by a.name) ";
                    break;
                case "EP828":
                    // probability
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'pro_Name,pro_code,pro_Name,Other' as col1,trim(a.Name)||'!~!~!'||'-'||'!~!~!'||null||'!~!~!'||trim(a.type1) as col2,'-' as col3,'-' as col4,a.type1 as col5 from typegrp a where a.branchcd!='DD' and a.id='^C' order by a.name) ";
                    break;
                case "EP829":
                    // contact level
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Dsg_Name,Dsg_code,Dsg_Name,Other' as col1,trim(a.Name)||'!~!~!'||'-'||'!~!~!'||null||'!~!~!'||trim(a.type1) as col2,'-' as col3,'-' as col4,a.type1 as col5 from typegrp a where a.branchcd!='DD' and a.id='SN' order by a.name) ";
                    break;
                case "EP830":
                    // Shift Code
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Shift_code,Shift_Name,Code,Name' as col1,trim(a.Type1)||'!~!~!'||'-'||'!~!~!'||trim(a.Name)||'!~!~!'||trim(a.type1) as col2,'-' as col3,'-' as col4,a.type1 as col5 from type a where a.id='D' and  a.type1 like '1%' order by a.name) ";
                    break;
                case "EP831":
                    // Machine Code
                    string mch_cond = "";
                    if (team6.col6.Trim().ToString().Substring(0, 1) == "6")
                    {
                        mch_cond = "and a.spec4 like '" + team6.col6.Trim() + "%'";
                    }
                    if (team6.col1 == "ADVG")
                    {
                        mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Mch_code,Mch_Name,Code,Name' as col1,trim(acode)||'!~!~!'||'-'||'!~!~!'||trim(a.assetid)||'-'||trim(a.assetname)||'!~!~!'||trim(a.Acode) as col2,'-' as col3,'-' as col4,a.type as col5 from wb_Fa_pur a where a.branchcd='" + work_br + "' and  a.type='10' and trim(A.SGRPCODE) in (Select trim(type1) from typegrp where branchcd!='DD' and id='FS' and trim(nvl(acref3,'-'))='1')  order by a.assetname) ";
                    }
                    else
                        mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Mch_code,Mch_Name,Code,Name' as col1,trim(acode)||'/'||srno||'!~!~!'||'-'||'!~!~!'||trim(a.mchname)||'!~!~!'||trim(a.Acode) as col2,'-' as col3,'-' as col4,a.type as col5 from pmaint a where a.branchcd='" + work_br + "' and  a.type='10' " + mch_cond + " order by a.mchname) ";
                    {

                    }

                    break;
                case "EP832":
                    // operator
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Opr_Name,Opr_code,op_Name,Other' as col1,trim(a.Name)||'!~!~!'||'-'||'!~!~!'||trim(a.type1)||'!~!~!'||trim(a.type1) as col2,'-' as col3,'-' as col4,a.type1 as col5 from typegrp a where a." + branch_cd + " and a.id='LL' order by a.Name) ";
                    break;
                case "EP832A":
                    // loading supervisor
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Opr_Name,Opr_code,op_Name,Other' as col1,trim(a.Name)||'!~!~!'||'-'||'!~!~!'||trim(a.type1)||'!~!~!'||trim(a.type1) as col2,'-' as col3,'-' as col4,a.type1 as col5 from typegrp a where a." + branch_cd + " and a.id='LS' order by a.Name) ";
                    break;
                case "EP832B":
                    // estimator list
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Est_Name,Est_code,Est_Names,Other' as col1,trim(a.username)||'!~!~!'||'-'||'!~!~!'||trim(a.userid)||'!~!~!'||trim(a.emailid) as col2,'-' as col3,'-' as col4,'-' as col5 from evas a where a.JCPRTOPT='Y' order by a.username) ";
                    break;
                case "EP832C":
                    // leave reasons
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Opr_Name,Opr_code,op_Name,Other' as col1,trim(a.Name)||'!~!~!'||'-'||'!~!~!'||trim(a.type1)||'!~!~!'||trim(a.type1) as col2,'-' as col3,'-' as col4,a.type1 as col5 from typegrp a where a.branchcd!='DD' and a.id='LB' order by a.Name) ";
                    break;

                case "EP833":
                    // Rejection code
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Rejn_Name,Rejn_code,op_Name,Other' as col1,trim(a.Name)||'!~!~!'||'-'||'!~!~!'||trim(a.type1)||'!~!~!'||trim(a.type1) as col2,'-' as col3,'-' as col4,a.type1 as col5 from typewip a where a.branchcd='" + work_br + "'  and a.id='RJC" + team6.col6.Trim().Substring(0, 2) + "' order by a.Name) ";
                    break;
                case "EP834":
                    // Downtime code
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Down_Name,Down_code,op_Name,Other' as col1,trim(a.Name)||'!~!~!'||'-'||'!~!~!'||trim(a.type1)||'!~!~!'||trim(a.type1) as col2,'-' as col3,'-' as col4,a.type1 as col5 from typewip a where a.branchcd='" + work_br + "'  and a.id='DTC" + team6.col6.Trim().Substring(0, 2) + "' order by a.Name) ";
                    break;
                case "EP835":
                    // Job No.
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy')-150 and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                    //o86= place holder job card 000001
                    string O86 = fn_seek_iname(team6.col1, "`", "SELECT ENABLE_YN FROM CONTROLS WHERE ID='O86'  ", "ENABLE_YN");
                    if (O86 == "Y")
                    {
                        mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select DISTINCT 'Job_No,Job_Dt,Job_Name,Job_qty,Stats' as col1,'" + work_br + "30000001'||TO_CHAR(sysdate,'DD/MM/YYYY')||'!~!~!'||'-'||'!~!~!'||'PRODUCTION JOB CARD'||'!~!~!'||10000||'!~!~!'||'-' as col2,'-' as col3,'-' as col4,to_char(sysdate,'yyyymmdd')||'" + work_br + "' as col5,to_char(sysdate,'yyyymmdd')||'" + work_br + "'||'000001' AS VDD from dual) ";
                    }
                    else
                    {
                        mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select DISTINCT 'Job_No,Job_Dt,Job_Name,Job_qty,Stats' as col1,a.BRANCHCD||A.TYPE||A.VCHNUM||TO_CHAR(A.VCHDATE,'DD/MM/YYYY')||'!~!~!'||'-'||'!~!~!'||trim(b.Iname)||'!~!~!'||to_char(a.Qty,'9999999999')||'!~!~!'||substr(trim(nvl(a.ALTITEM,'-')),1,20) as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5,to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum AS VDD from costestimate a, item b where trim(A.icode)=trim(B.icode)  and a." + branch_cd + " and a.type='30' and a.vchdate " + xprdRange + " and a.status!='Y' AND TRIM(NVL(A.APP_BY,'-'))!='-' order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    }

                    break;
                case "EP835S":
                    // Job No.

                    mq = "select (case when sheets>0 then round(col7/sheets,5) else ROUND(col7/qty, 5) end) as job_per_wt from (select sum(col7) as col7, qty,sheets from (select is_number(col7) as col7,is_number(qty) as qty,((is_number(col14)+is_number(col15))*is_number(col13)) as sheets from costestimate where BRANCHCD||TYPE||VCHNUM||to_char(VCHDATE, 'dd/mm/yyyy')='" + team6.col6 + "' and substr(col9,1,2) in ('07','80','81') ) group by qty,sheets)";
                    string jobperwt = fn_seek_iname(team6.col1, "", mq, "job_per_wt");

                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                    //mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select DISTINCT 'Job_No,Job_Dt,Job_Name,Job_qty' as col1,trim(a.vchnum)||'!~!~!'||to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||trim(b.Iname)||'!~!~!'||TRIM(a.ICODE)||'!~!~!'||to_char(a.Qty,'9999999999') as col2,NVL(B.IWEIGHT,0) as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5,to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum AS VDD  from costestimate a, item b where trim(A.icode)=trim(B.icode)  and a." + branch_cd + " and a.type='30' and a.vchdate " + xprdRange + " and a.status!='Y' AND TRIM(NVL(A.APP_BY,'-'))!='-' and a.BRANCHCD||A.TYPE||A.VCHNUM||TO_CHAR(A.VCHDATE,'DD/MM/YYYY')='" + team6.col6.Trim() + "' order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select DISTINCT 'Job_No,Job_Dt,Job_Name,Job_qty' as col1,trim(a.vchnum)||'!~!~!'||to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||trim(b.Iname)||'!~!~!'||TRIM(a.ICODE)||'!~!~!'||to_char(a.Qty,'9999999999') as col2,trim(" + jobperwt + ") as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5,to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum AS VDD  from costestimate a, item b where trim(A.icode)=trim(B.icode)  and a." + branch_cd + " and a.type='30' and a.vchdate " + xprdRange + " and a.status!='Y' AND TRIM(NVL(A.APP_BY,'-'))!='-' and a.BRANCHCD||A.TYPE||A.VCHNUM||TO_CHAR(A.VCHDATE,'DD/MM/YYYY')='" + team6.col6.Trim() + "' order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    break;

                case "EP735":
                    // multi job Job No. layer wise

                    mq0 = "select A.vchnum||'-'||to_char(A.vchdate,'dd/mm/yyyy') AS Job_No,a.srno||'-'||a.Col2 as Layer_Name,is_number(A.col7) as Qty,0 as iss,a.col9 as rmcode,a.icode as fgcode from costestimate A WHERE a.branchcd='" + work_br + "' and a.type='30' and a.vchdate>=to_DaTE('01/12/2020','dd/mm/yyyy') AND a.vchdate<=to_DaTE('" + mydate + "','dd/mm/yyyy') and trim(nvl(a.app_by,'-'))!='-' and upper(trim(a.status))!='Y' and TRIM(a.col9)='" + team6.col6.Trim() + "' union all select trim(A.job_no)||'-'||trim(A.job_Dt) AS Job_No,trim(a.job_layer) as Layer_Name,0 as jobq,A.reelwt as Qty,a.icode as rmcode,null as fgcode from reel_corr A WHERE a.branchcd='" + work_br + "' and a.type='31' and a.vchdate>=to_DaTE('01/12/2020','dd/mm/yyyy') AND a.vchdate<=to_DaTE('" + mydate + "','dd/mm/yyyy') and TRIM(a.icode)='" + team6.col6 + "' ";

                    mq1 = "select trim(a.Job_No) As Job_No,a.Layer_Name,max(fgcode) As FG_Code,sum(Qty)-sum(iss) As Bal_qty,trim(rmcode) As rmcode from (" + mq0 + ") a group by trim(a.Job_No),a.Layer_Name,trim(rmcode) ";

                    mq4 = "select B.INAME as Item_Name,a.Job_No||'-'||substr(a.Layer_Name,1,1) as Job_No,a.Layer_Name,trim(a.FG_Code) AS FG_Code,a.Bal_qty as Qty,b.cpartno,a.rmcode from (" + mq1 + ") a,item b where trim(a.FG_Code)=trim(b.icode) ";

                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select DISTINCT 'Job_No,Layer_name,Bal_qty,Job_Name,FG_Code' as col1,job_no||'!~!~!'||trim(layer_name)||'!~!~!'||to_char(Qty,'9999999999')||'!~!~!'||trim(Item_name)||'!~!~!'||trim(fg_code) as col2,'-' as col3,'-' as col4,job_no as col5,job_no AS VDD from (" + mq4 + ") ) ";


                    break;
                case "EP735S":
                    // multi job Job No. layer wise
                    mq0 = "select A.vchnum||'-'||to_char(A.vchdate,'dd/mm/yyyy') AS Job_No,a.srno||'-'||a.Col2 as Layer_Name,is_number(A.col7) as Qty,0 as iss,a.col9 as rmcode,a.icode as fgcode from costestimate A WHERE a.branchcd='" + work_br + "' and a.type='30' and a.vchdate>=to_DaTE('01/12/2021','dd/mm/yyyy') AND a.vchdate<=to_DaTE('" + mydate + "','dd/mm/yyyy') and trim(nvl(a.app_by,'-'))!='-' and upper(trim(a.status))!='Y' and TRIM(a.col9)='" + team6.col6.Trim() + "' union all select trim(A.job_no)||'-'||trim(A.job_Dt) AS Job_No,trim(a.job_layer) as Layer_Name,0 as jobq,A.reelwt as Qty,a.icode as rmcode,null as fgcode from reel_corr A WHERE a.branchcd='" + work_br + "' and a.type='31' and a.vchdate>=to_DaTE('01/12/2021','dd/mm/yyyy') AND a.vchdate<=to_DaTE('" + mydate + "','dd/mm/yyyy') and TRIM(a.icode)='" + team6.col6 + "' ";
                    mq1 = "select trim(a.Job_No) As Job_No,a.Layer_Name,max(fgcode) As FG_Code,sum(Qty)-sum(iss) As Bal_qty,trim(rmcode) As rmcode from (" + mq0 + ") a group by trim(a.Job_No),a.Layer_Name,trim(rmcode)  order by trim(a.Job_No)";
                    mq4 = "select B.INAME as Item_Name,a.Job_No||'-'||substr(a.Layer_Name,1,1) as Job_No,a.Layer_Name,trim(a.FG_Code) AS FG_Code,a.Bal_qty as Qty,b.cpartno,a.rmcode from (" + mq1 + ") a,item b where trim(a.FG_Code)=trim(b.icode) order by a.Job_No,a.Layer_Name";

                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select DISTINCT 'Job_No,Layer_name,Bal_qty,Job_Name,FG_Code' as col1,a.job_no||'!~!~!'||trim(a.layer_name)||'!~!~!'||to_char(a.Qty,'9999999999')||'!~!~!'||trim(a.Item_name)||'!~!~!'||trim(a.fg_code,'-') as col2,'-' as col3,'-' as col4,a.job_no as col5,a.job_no AS VDD from (" + mq4 + ") order by a.job_no) ";
                    break;

                case "EP836":
                    // WIP Stock
                    ////mq2 = fn_seek_iname(team6.col1, "", "Select wipstdt from type where id='B' and type1=" + branch_cd + "", "xdt2");
                    ////string wipq1="";
                    ////string wipq2="";
                    ////string wipq3="";
                    ////wipq1 = "select B.Iname as Item_Name,trim(a.Icode) as Erp_Code,sum(a.opening)+sum(a.cDr)-sum(a.cCr) as Closing,x.name,b.Unit,B.CPARTNO,(Case when b.irate=0 then b.iqd else b.irate end) As Rate,round((sum(a.opening)+sum(a.cDr)-sum(a.cCr))*(Case when b.irate=0 then b.iqd else b.irate end),0) as Cal_Value,b.prefx,substr(a.icode,1,4) as Grp,trim(a.stage) as Stage from (Select stage,icode, iqtyin as opening,0 as cdr,0 as ccr,0 as clos from wipstk where branchcd='" & mbr & "' and  type='50' and vchdate  between to_Date('" & WIP_start_dt & "','dd/mm/yyyy') and to_date('" & mdt2 & "','dd/mm/yyyy') and stage like '6%' union all  select stage,icode,sum(iqtyout+(0))-sum(iqtyin) as op,0 as cdr,0 as ccr,0 as clos from ivoucher where branchcd='" & mbr & "' and substr(type,1,1) in ('3','1')  and vchdate  between to_date('" & WIP_start_dt & "','dd/mm/yyyy') and to_Date('01/04/2017','dd/mm/yyyy')-1  and store in('Y','R') and stage like '6%'  " ;
                    ////wipq2 = " GROUP BY stage,ICODE union all select stage,icode,sum(iqtyin)-sum(iqtyout) as op,0 as cdr,0 as ccr,0 as clos from ivoucher where branchcd='" & mbr & " ' and type like '%' and vchdate  between to_date('" & WIP_start_dt & "','dd/mm/yyyy') and to_Date('01/04/2017','dd/mm/yyyy')-1   and store='W'  and stage like '6%' GROUP BY stage,ICODE union all select stage,icode,0 as op,sum(iqtyout+(0)) as cdr,sum(iqtyin) as ccr,0 as clos from ivoucher where branchcd='" & mbr & "' and substr(type,1,1) in ('3','1') and vchdate  between to_date('01/04/2017','dd/mm/yyyy') and to_Date('" & mdt2 & "','dd/mm/yyyy') AND VCHDATE>=TO_DATE('" & WIP_start_dt & "','dd/mm/yyyy')  and store in('Y','R') and stage like '6%' GROUP BY stage,ICODE union all select stage,icode,0 as op,sum(iqtyin) as cdr,sum(iqtyout) as ccr,0 as clos from ivoucher where branchcd='" & mbr & "' and type like '%' and vchdate   " ;
                    ////wipq3 = " between to_date('" & WIP_start_dt & "','dd/mm/yyyy') and to_Date('" & mdt2 & "','dd/mm/yyyy') AND VCHDATE>=TO_DATE('" & WIP_start_dt & "','dd/mm/yyyy') and store='W'  and stage like '6%' GROUP BY stage,ICODE )a, item b,(Select acref,name from typegrp where branchcd='" & mbr & "' and id='WI') x where trim(A.stage)=trim(x.acref) and trim(A.icode)=trim(B.icode) and nvl(b.wipitm,'-')!='N' group by B.Iname,trim(a.Icode),x.name,b.Unit,B.CPARTNO,b.irate,b.iqd,b.prefx,substr(a.icode,1,4),trim(a.stage) having sum(a.opening)+sum(a.cDr)-sum(a.cCr)<>0  ";
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Job_No,Job_Dt,Job_Name,Job_qty' as col1,trim(a.vchnum)||'!~!~!'||to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||trim(b.Iname)||'!~!~!'||to_char(a.Qty,'9999999999') as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from costestimate a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a." + branch_cd + " and a.type='30' and a.vchdate " + xprdRange + " and a.status!='Y' order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    break;

                case "EP837":

                    xprd1 = "between to_date('" + mydate + "','dd/mm/yyyy')-600 and to_date('" + mydate + "','dd/mm/yyyy')";
                    if (team6.col1.Trim() == "SGRP")
                    {
                        mq2 = "select * from (select c.unit,to_char(a.Orddt,'yyyymmdd')||trim(a.Order_No)||trim(a.acode) as fstr, trim(a.Order_No) as SO_No,to_char(a.Orddt,'dd/mm/yyyy') as SO_DT,max(a.jcno) as job_card,max(to_Char(a.jcdt,'dd-Mon-yy')) as job_dt,b.aname as Customer,max(a.ciname) as Item_Name,max(a.cpartno) as Part_no,max(a.work_ordno) As Order_Catg,max(to_char(a.porddt,'dd/mm/yyyy')) as po_Dt,to_char(max(a.cu_chldt)-nvl(b.dlvtime,0),'dd/mm/yyyy') as SHIP_date,sum(a.qtyord)as SO_qty,sum(a.Sch_qty)As Job_Qty,sum(a.prd_qty) as DA_Qty,sum(a.salqty) as Sal_Qty,sum(a.qtyord)-sum(a.salqty) as Bal_qty,(case when sum(A.qtyord)>0 then round(((sum(a.qtyord)-sum(a.salqty))/sum(a.qtyord))*100,2) else 0 end)as Perct ,round((max(a.cu_chldt)-nvl(b.dlvtime,0))-sysdate,0) as Days_Left,to_char(round(((sum(a.qtyord)-sum(a.salqty))*max(a.fg_rt)),0),'99,999,999') as Bal_Value,max(a.fg_rt) as Fg_rate,max(invdt) as Sales_Dt,max(a.pordno) as po_no,max(a.icat) as SO_Closed,max(a.plant_cd) as Plant_Code,max(to_char(a.cu_chldt,'dd/mm/yyyy')) as Dlv_date,b.dlvtime,trim(a.acode) as Acode,trim(a.icode)As Icode from  (select work_ordno,gmt_size,desc1,BUSI_EXPECT,cpartno,ciname,pordno,porddt,0 as stk,a.cu_chldt,a.ordno as Order_No,a.orddt as Orddt,a.acode,a.icode,a.qtyord,0 as sch_qty,0 as prd_qty,0 as jcqty,0 as salqty,null as jcdt,null as jcno,null as invdt,icat,trim(nvl(mfginbr,'-')) as Plant_cd,a.irate*(decode(a.curr_Rate,0,1,a.curr_rate)) as fg_rt from somas a where a.mfginbr='" + work_br + "' and A.orddt " + xprd1 + " and a.type!='45'  and trim(a.acode)='" + team6.col6.Trim() + "' and trim(a.icat)<>'Y' )a ,famst b, item c where trim(A.acode)=trim(b.acode) and trim(A.icode)=trim(C.icode) group by c.unit,a.Order_No,a.Orddt,to_char(a.Orddt,'dd/mm/yyyy'),trim(a.acode),trim(a.icode),nvl(c.iord,0),c.wt_rft,c.siname,b.dlvtime,b.aname having max(a.icat)<>'Y' and max(a.icat) <>'Y'  ) where 1=1 order by Days_Left,Customer,SO_NO";
                        mq = "select * from (select col1,col2,col3,col4,col5,'-' as col6 from  (Select 'Item_code,Unit,Item_Name,Ord_qty,PO_No' as col1,trim(a.ICode)||'!~!~!'||trim(a.Unit)||'!~!~!'||trim(a.Item_Name)||'!~!~!'||a.SO_qty||'!~!~!'||trim(a.po_no) as col2,a.Days_Left as col3,a.fstr as col4,'-' as col5 ,'-' as col6 from (" + mq2 + ")a ) order by col3,col4 desc ) where rownum<1000 ";

                    }
                    else
                    {
                        mq2 = "select * from (select c.unit,to_char(a.Orddt,'eyyyymmdd')||trim(a.Order_No)||trim(a.acode) as fstr, trim(a.Order_No) as SO_No,to_char(a.Orddt,'dd/mm/yyyy') as SO_DT,max(a.jcno) as job_card,max(to_Char(a.jcdt,'dd-Mon-yy')) as job_dt,b.aname as Customer,max(a.ciname) as Item_Name,max(a.cpartno) as Part_no,max(a.work_ordno) As Order_Catg,max(to_char(a.porddt,'dd/mm/yyyy')) as po_Dt,to_char(max(a.cu_chldt)-nvl(b.dlvtime,0),'dd/mm/yyyy') as SHIP_date,sum(a.qtyord)as SO_qty,sum(a.Sch_qty)As Job_Qty,sum(a.prd_qty) as DA_Qty,sum(a.salqty) as Sal_Qty,sum(a.qtyord)-sum(a.salqty) as Bal_qty,(case when sum(A.qtyord)>0 then round(((sum(a.qtyord)-sum(a.salqty))/sum(a.qtyord))*100,2) else 0 end)as Perct ,round((max(a.cu_chldt)-nvl(b.dlvtime,0))-sysdate,0) as Days_Left,to_char(round(((sum(a.qtyord)-sum(a.salqty))*max(a.fg_rt)),0),'99,999,999') as Bal_Value,max(a.fg_rt) as Fg_rate,max(invdt) as Sales_Dt,max(a.pordno) as po_no,max(a.icat) as SO_Closed,max(a.plant_cd) as Plant_Code,max(to_char(a.cu_chldt,'dd/mm/yyyy')) as Dlv_date,b.dlvtime,trim(a.acode) as Acode,trim(a.icode)As Icode from  (select work_ordno,gmt_size,desc1,BUSI_EXPECT,cpartno,ciname,pordno,porddt,0 as stk,a.cu_chldt,a.ordno as Order_No,a.orddt as Orddt,a.acode,a.icode,a.qtyord,0 as sch_qty,0 as prd_qty,0 as jcqty,0 as salqty,null as jcdt,null as jcno,null as invdt,icat,trim(nvl(mfginbr,'-')) as Plant_cd,a.irate*(decode(a.curr_Rate,0,1,a.curr_rate)) as fg_rt from somas a where a.branchcd='" + work_br + "' and A.orddt " + xprd1 + " and a.type!='45'  and trim(a.acode)='" + team6.col6.Trim() + "' and trim(a.icat)<>'Y' )a ,famst b, item c where trim(A.acode)=trim(b.acode) and trim(A.icode)=trim(C.icode) group by c.unit,a.Order_No,a.Orddt,to_char(a.Orddt,'dd/mm/yyyy'),trim(a.acode),trim(a.icode),nvl(c.iord,0),c.wt_rft,c.siname,b.dlvtime,b.aname having max(a.icat)<>'Y' and max(a.icat) <>'Y'  ) where 1=1 order by Days_Left,Customer,SO_NO";
                        mq = "select * from (select col1,col2,col3,col4,col5,'-' as col6 from  (Select 'Item_code,Unit,Item_Name,Ord_qty,PO_No' as col1,trim(a.ICode)||'!~!~!'||trim(a.Unit)||'!~!~!'||trim(a.Item_Name)||'!~!~!'||a.SO_qty||'!~!~!'||trim(a.po_no) as col2,a.Days_Left as col3,a.fstr as col4,'-' as col5 ,'-' as col6 from (" + mq2 + ")a ) order by col3,col4 desc ) where rownum<1000 ";

                    }

                    break;

                case "EP837A":
                    xprd1 = "between to_date('" + mydate + "','dd/mm/yyyy')-600 and to_date('" + mydate + "','dd/mm/yyyy')";
                    //mq2 = "select * from (select c.unit,to_char(a.Orddt,'yyyymmdd')||trim(a.Order_No)||trim(a.acode) as fstr, trim(a.Order_No) as SO_No,to_char(a.Orddt,'dd/mm/yyyy') as SO_DT,max(a.jcno) as job_card,max(to_Char(a.jcdt,'dd-Mon-yy')) as job_dt,b.aname as Customer,max(a.ciname) as Item_Name,max(a.cpartno) as Part_no,max(a.work_ordno) As Order_Catg,max(to_char(a.porddt,'dd/mm/yyyy')) as po_Dt,to_char(max(a.cu_chldt)-nvl(b.dlvtime,0),'dd/mm/yyyy') as SHIP_date,sum(a.qtyord)as SO_qty,sum(a.Sch_qty)As Job_Qty,sum(a.prd_qty) as DA_Qty,sum(a.salqty) as Sal_Qty,sum(a.qtyord)-sum(a.salqty) as Bal_qty,(case when sum(A.qtyord)>0 then round(((sum(a.qtyord)-sum(a.salqty))/sum(a.qtyord))*100,2) else 0 end)as Perct ,round((max(a.cu_chldt)-nvl(b.dlvtime,0))-sysdate,0) as Days_Left,to_char(round(((sum(a.qtyord)-sum(a.salqty))*max(a.fg_rt)),0),'99,999,999') as Bal_Value,max(a.fg_rt) as Fg_rate,max(invdt) as Sales_Dt,max(a.pordno) as po_no,max(a.icat) as SO_Closed,max(a.plant_cd) as Plant_Code,max(to_char(a.cu_chldt,'dd/mm/yyyy')) as Dlv_date,b.dlvtime,trim(a.acode) as Acode,trim(a.icode)As Icode from  (select work_ordno,gmt_size,desc1,BUSI_EXPECT,cpartno,ciname,pordno,porddt,0 as stk,a.cu_chldt,a.ordno as Order_No,a.orddt as Orddt,a.acode,a.icode,a.qtyord,0 as sch_qty,0 as prd_qty,0 as jcqty,0 as salqty,null as jcdt,null as jcno,null as invdt,icat,trim(nvl(mfginbr,'-')) as Plant_cd,a.irate*(decode(a.curr_Rate,0,1,a.curr_rate)) as fg_rt from somas a where a.branchcd='" + work_br + "' and A.orddt " + xprd1 + " and a.type!='45'  and trim(a.acode)='" + team6.col6.Trim() + "' and trim(a.icat)<>'Y' )a ,famst b, item c where trim(A.acode)=trim(b.acode) and trim(A.icode)=trim(C.icode) group by c.unit,a.Order_No,a.Orddt,to_char(a.Orddt,'dd/mm/yyyy'),trim(a.acode),trim(a.icode),nvl(c.iord,0),c.wt_rft,c.siname,b.dlvtime,b.aname having max(a.icat)<>'Y' and max(a.icat) <>'Y'  ) where 1=1 order by Days_Left,Customer,SO_NO";

                    string acode_str = "";
                    acode_str = "-";
                    if (team6.col6.Trim().Length <= 7)
                    {
                        acode_str = "trim(acode)='" + team6.col6.Trim() + "'";
                    }
                    else
                    {
                        acode_str = "trim(acode)||'-'||trim(type)='" + team6.col6.Trim() + "'";
                    }

                    if (team6.col1.Trim() == "SGRP")
                    {
                        mq2 = "select b.iname,b.unit,a.orddt,trim(a.cdrgno) as Line_no,trim(a.acode) as A_code,trim(a.icode) As I_code,sum(a.qtyord) As ord_qty,sum(a.madeda) as da_qty,sum(a.qtyord)-sum(a.madeda) as bal_qty from (select ordno,orddt,cdrgno,acode,icode,qtyord+nvl(qtysupp,0) as qtyord,0 as madeda from somas where mfginbr='" + work_br + "' and orddt " + xprd1 + " and " + acode_str + " and trim(icat)<>'Y' and app_by!='-' union all select ordno,orddt,ordline,acode,icode,0 as qtyord,qtysupp as madeda from despatch where branchcd='" + work_br + "' and packdate " + xprd1 + " and " + acode_str + " )a,item b where trim(A.icode)=trim(B.icode) group by b.unit,b.iname,a.orddt,trim(a.cdrgno),trim(a.acode),trim(a.icode) having sum(a.qtyord)-sum(a.madeda)>0 ";
                        mq = "select * from (select col1,col2,col3,col4,col5,'-' as col6 from  (Select 'Item_code,Unit,Item_Name,Bal_qty,Ordno,orddt' as col1,trim(a.I_code)||'!~!~!'||trim(a.Unit)||'!~!~!'||trim(a.Iname)||'!~!~!'||a.bal_qty||'!~!~!'||trim(a.Line_no)||'!~!~!'||to_char(a.orddt,'dd/mm/yyyy') as col2,'-' as col3,'-' as col4,a.orddt as col5 ,iname as col6 from (" + mq2 + ")a ) order by col6,col5 ) where rownum<1000 ";

                    }
                    else
                    {
                        mq2 = "select b.iname,b.unit,a.orddt,trim(a.cdrgno) as Line_no,trim(a.acode) as A_code,trim(a.icode) As I_code,sum(a.qtyord) As ord_qty,sum(a.madeda) as da_qty,sum(a.qtyord)-sum(a.madeda) as bal_qty from (select ordno,orddt,cdrgno,acode,icode,qtyord+nvl(qtysupp,0) as qtyord,0 as madeda from somas where branchcd='" + work_br + "' and orddt " + xprd1 + " and " + acode_str + " and trim(icat)<>'Y' union all select ordno,orddt,ordline,acode,icode,0 as qtyord,qtysupp as madeda from despatch where branchcd='" + work_br + "' and packdate " + xprd1 + " and " + acode_str + ")a,item b where trim(A.icode)=trim(B.icode) group by b.unit,b.iname,a.orddt,trim(a.cdrgno),trim(a.acode),trim(a.icode) having sum(a.qtyord)-sum(a.madeda)>0 ";
                        mq = "select * from (select col1,col2,col3,col4,col5,'-' as col6 from  (Select 'Item_code,Unit,Item_Name,Bal_qty,Ordno,orddt' as col1,trim(a.I_code)||'!~!~!'||trim(a.Unit)||'!~!~!'||trim(a.Iname)||'!~!~!'||a.bal_qty||'!~!~!'||trim(a.Line_no)||'!~!~!'||to_char(a.orddt,'dd/mm/yyyy') as col2,'-' as col3,'-' as col4,a.orddt as col5 ,iname as col6 from (" + mq2 + ")a ) order by col6,col5 ) where rownum<1000 ";
                    }

                    break;

                case "EP838":
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'desg_Name,blank,desg_Code,blank' as col1,trim(a.Name)||'!~!~!'||'-'||'!~!~!'||trim(a.type1)||'!~!~!'||'-' as col2,'-' as col3,'-' as col4,a.type1 as col5 from typegrp a where a.branchcd!='DD' and a.id='SN' order by a.Name) ";
                    break;

                case "EP839":
                    // Job No.
                    string wip_st_Dt;

                    wip_st_Dt = fn_seek_iname(team6.col1, "", "Select trim(wipstdt) as wipstdt from type where id='B' and type1='" + work_br + "'", "wipstdt");
                    if (wip_st_Dt.Length < 10)
                    {
                        wip_st_Dt = frm_cDt1;
                    }
                    //mq1 = "select trim(a.kclreelno) as Reel_No,sum(a.iqtyin)-sum(a.iqtyout) as Qty_Bal,B.iname,trim(a.icode) as Erp_Code,b.Cpartno as Part_no from (SELECT a.type,'reelv' as file1,a.ICODE,(Case when a.type='0U' then a.reelwin else a.reelwout-a.reelwin end) AS IQTYIN,0 AS IQTYOUT,trim(a.kclreelno) as kclreelno,null as store_no FROM reelvch a WHERE a.BRANCHCD='" + work_br + "' AND (a.TYPE like '3%' or a.type='11' or a.type='0U') and a.vchdate>= to_Date('" + wip_st_Dt + "','dd/mm/yyyy') AND nvl(a.PO_NUM,'-')!='RP' and trim(a.rlocn) like '" + team6.col6.Trim() + "%' union all SELECT type,'ivch' as file1,ICODE,IQTYOUT,iqtyin,( case when substr(icode,1,1)='7' then genum else vchnum end) as vch,null as st_no FROM ivoucher WHERE  BRANCHCD='" + work_br + "' AND TYPE like '%'  and vchdate>= to_Date('" + wip_st_Dt + "','dd/mm/yyyy') AND trim(SUBSTR(ICODE,1,2)) not in ('07','08','09','81') and store='Y' and trim(stage)='" + team6.col6.Trim() + "' union all SELECT type,'ops' as file1,ICODE,iqtyin,0 as IQTYOUT,(Case when type='BC' or 'VCL'='AHPI' then wolink else vchnum end) as vchnum,null as store_no FROM wipstk WHERE BRANCHCD='" + work_br + "' AND TYPE in ('50','BC') and vchdate>= to_Date('" + wip_st_Dt + "','dd/mm/yyyy') and trim(stage)='" + team6.col6.Trim() + "' UNION ALL SELECT type,'colst25' as file1,ICODE,0 AS IQTYIN,itate as IQTYOUT,col6,null as store_no FROM costestimate WHERE branchcd='" + work_br + "' and type='25'  and vchdate>= to_Date('" + wip_st_Dt + "','dd/mm/yyyy') and trim(col21)='" + team6.col6.Trim() + "' union all SELECT type,'ivch3a' as file1,ICODE,iqtyin,IQTYOUT,(CASE WHEN TYPE='3A' THEN INVNO ELSE btchno END),store_no FROM ivoucher WHERE BRANCHCD='" + work_br + "' AND TYPE like '%' and vchdate>= to_Date('" + wip_st_Dt + "','dd/mm/yyyy') and trim(stage)='" + team6.col6.Trim() + "' and store='W'  and (type='15' or (trim(SUBSTR(ICODE,1,2)) not in ";
                    //mq2 = "('07','08','09') and type='0U') or type='29' or type='3B' or type='3A'  or type='3M' )) a,item b where trim(a.icode)=trim(B.icode) group by b.iname,b.cpartno,b.unit,trim(a.icode),trim(a.kclreelno),trim(a.icode)||'-'||trim(a.kclreelno) having sum(a.iqtyin)-sum(a.iqtyout)>0  and trim(a.kclreelno)!='0' order by B.iname";

                    //mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Reel_no,Name,Qty,Code' as col1,trim(reel_no)||'!~!~!'||trim(Iname)||'!~!~!'||Qty_bal||'!~!~!'||trim(erp_code) as col2,'-' as col3,'-' as col4,iname as col5,substr(erp_Code,1,4) AS Grp from (" + mq1 + mq2 + ") order by grp,col5) ";
                    //break;
                    mq1 = "select trim(a.kclreelno) as Reel_No,sum(a.iqtyin)-sum(a.iqtyout) as Qty_Bal,B.iname,trim(a.icode) as Erp_Code,b.Cpartno as Part_no from (SELECT a.type,'reelv' as file1,a.ICODE,(Case when a.type='0U' then sum(nvl(a.reelwin,0)) else sum(nvl(a.reelwout,0)-nvl(a.reelwin,0)) end) AS IQTYIN,0 AS IQTYOUT,trim(a.kclreelno) as kclreelno,null as store_no FROM reelvch a WHERE a.BRANCHCD='" + work_br + "' AND (a.TYPE like '3%' or a.type='11' or a.type='0U') and a.vchdate>= to_Date('" + wip_st_Dt + "','dd/mm/yyyy') AND nvl(a.PO_NUM,'-')!='RP' and trim(a.rlocn) like '" + team6.col6.Trim() + "%' group by a.type,a.ICODE,trim(a.kclreelno) union all SELECT type,'ivch' as file1,ICODE,IQTYOUT,iqtyin,( case when substr(icode,1,1)='7' then genum else vchnum end) as vch,null as st_no FROM ivoucher WHERE  BRANCHCD='" + work_br + "' AND TYPE like '%'  and vchdate>= to_Date('" + wip_st_Dt + "','dd/mm/yyyy') AND trim(SUBSTR(ICODE,1,2)) not in ('07','08','09','81') and store='Y' and trim(stage)='" + team6.col6.Trim() + "' union all SELECT type,'ops' as file1,ICODE,iqtyin,0 as IQTYOUT,(Case when type='BC' then wolink else vchnum end) as vchnum,null as store_no FROM wipstk WHERE BRANCHCD='" + work_br + "' AND TYPE in ('50','BC') and vchdate>= to_Date('" + wip_st_Dt + "','dd/mm/yyyy') and trim(stage)='" + team6.col6.Trim() + "' UNION ALL SELECT type,'colst25' as file1,ICODE,0 AS IQTYIN,itate as IQTYOUT,col6,null as store_no FROM costestimate WHERE branchcd='" + work_br + "' and type='25'  and vchdate>= to_Date('" + wip_st_Dt + "','dd/mm/yyyy') and trim(col21)='" + team6.col6.Trim() + "' union all SELECT type,'ivch3a' as file1,ICODE,iqtyin,IQTYOUT,(CASE WHEN TYPE='3A' THEN INVNO ELSE btchno END),store_no FROM ivoucher WHERE BRANCHCD='" + work_br + "' AND TYPE like '%' and vchdate>= to_Date('" + wip_st_Dt + "','dd/mm/yyyy') and trim(stage)='" + team6.col6.Trim() + "' and store='W'  and (type='15' or (trim(SUBSTR(ICODE,1,2)) not in ";

                    mq2 = "('07','08','09') and type='0U') or type='29' or type='3B' or type='3A'  or type='3M' )) a,item b where trim(a.icode)=trim(B.icode) group by b.iname,b.cpartno,b.unit,trim(a.icode),trim(a.kclreelno),trim(a.icode)||'-'||trim(a.kclreelno) having sum(a.iqtyin)-sum(a.iqtyout)>0  and trim(a.kclreelno)!='0' order by B.iname";

                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Reel_no,Name,Qty,Code' as col1,trim(reel_no)||'!~!~!'||trim(Iname)||'!~!~!'||Qty_bal||'!~!~!'||trim(erp_code) as col2,'-' as col3,'-' as col4,iname as col5,substr(erp_Code,1,4) AS Grp from (" + mq1 + mq2 + ") order by grp,col5) ";
                    break;

                case "EP840A":
                    //list of party for o/s followup
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Customer,Mktgper,Cust_Code,Addr' as col1,trim(a.acode)||'!~!~!'||nvl(b.Mktggrp,'-')||'!~!~!'||trim(b.aname)||'!~!~!'||sum(a.net) as col2,'-' as col3,'-' as col4,trim(a.acode) as col5 from recdata a,famst b where trim(a.acode)=trim(B.acode) and a.acode like '16%' group by trim(b.aname),nvl(b.Mktggrp,'-'),trim(a.acode) having sum(a.net)<>0 order by trim(b.aname)) ";
                    break;

                case "EP840B":
                    //list of pending bill of selected party for o/s followup

                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Bill_no,Bill_Dt,Amount,Days' as col1,trim(a.invno)||'!~!~!'||to_Char(a.invdate,'dd/mm/yyyy')||'!~!~!'||to_Char(sum(a.net),'99999999.99')||'!~!~!'||'-' as col2,'-' as col3,to_Char(a.invdate,'yyyymmdd') as col4,trim(a.acode) as col5 from recdata a where trim(a.acode) like '" + team6.col6.Trim() + "%' group by trim(a.invno),to_Char(a.invdate,'dd/mm/yyyy'),to_Char(a.invdate,'yyyymmdd'),trim(a.acode) having sum(a.net)<>0 order by to_Char(a.invdate,'yyyymmdd')) ";
                    break;

                case "EP840C":
                    //list of pending bill of selected party for o/s followup
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Reason,blank,Code,blank' as col1,trim(a.type1)||'!~!~!'||'-'||'!~!~!'||a.Name||'!~!~!'||'-' as col2,'-' as col3,'-' as col4,trim(a.type1) as col5 from typegrp a where a.branchcd!='DD' and a.id like 'OB' order by a.Name) ";
                    break;

                case "EP841A":
                    //list of party for o/s followup
                    po_View = "select acode,sum(qty) as qty from (select acode,icode,ordno,orddt,sum(qtyord)-sum(rcvd) as Qty from (select acode,icode,ordno,orddt,qtyord,0 as rcvd from pomas where branchcd='" + work_br + "' and type like '5%' and orddt>=to_DaTE('01/04/2021','dd/mm/yyyy') and pflag !=1 union all select acode,icode,ponum,podate,0 as qtyord,iqtyin as rcvd from ivoucher where branchcd='" + work_br + "' and type like '0%' and vchdate>=to_DaTE('01/04/2021','dd/mm/yyyy') and Store='Y') group by acode,icode,ordno,orddt having sum(qtyord)-sum(rcvd)>0) group by acode";
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Vendor,Mktgper,Vend_Code,Addr' as col1,trim(a.acode)||'!~!~!'||nvl(b.Mktggrp,'-')||'!~!~!'||trim(b.aname)||'!~!~!'||sum(a.qty) as col2,'-' as col3,'-' as col4,trim(a.acode) as col5 from (" + po_View + ") a,famst b where trim(a.acode)=trim(B.acode) and substr(a.acode,1,2) in ('02','06','16') group by trim(b.aname),nvl(b.Mktggrp,'-'),trim(a.acode) having sum(a.qty)>0 order by trim(b.aname)) ";
                    break;

                case "EP841B":
                    //list of pending bill of selected party for o/s followup
                    po_View = "select acode,icode,ordno,orddt,sum(qtyord)-sum(rcvd) as Qty from (select acode,icode,ordno,orddt,qtyord,0 as rcvd from pomas where branchcd='" + work_br + "' and type like '5%' and orddt>=to_DaTE('01/04/2021','dd/mm/yyyy') and pflag !=1 and trim(acode) like '" + team6.col6.Trim() + "%' union all select acode,icode,ponum,podate,0 as qtyord,iqtyin as rcvd from ivoucher where branchcd='" + work_br + "' and type like '0%' and vchdate>=to_DaTE('01/04/2021','dd/mm/yyyy') and Store='Y' and trim(acode) like '" + team6.col6.Trim() + "%') group by acode,icode,ordno,orddt having sum(qtyord)-sum(rcvd)>0 ";
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Vendor,Mktgper,Vend_Code,Addr' as col1,trim(b.iname)||'!~!~!'||nvl(a.ordno,'-')||to_Char(a.orddt,'dd/mm/yyyy')||'!~!~!'||trim(a.icode)||'!~!~!'||sum(a.qty) as col2,'-' as col3,'-' as col4,trim(a.icode) as col5 from (" + po_View + ") a,item b where trim(a.icode)=trim(B.icode)  group by trim(b.iname),nvl(a.ordno,'-'),to_Char(a.orddt,'dd/mm/yyyy'),trim(a.icode) having sum(a.qty)<>0 order by trim(b.iname)) ";
                    break;

                case "EP841C":
                    //list of pending bill of selected party for o/s followup
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Reason,blank,Code,blank' as col1,trim(a.type1)||'!~!~!'||'-'||'!~!~!'||a.Name||'!~!~!'||'-' as col2,'-' as col3,'-' as col4,trim(a.type1) as col5 from typegrp a where a.branchcd!='DD' and a.id like 'BP' order by a.Name) ";
                    break;

                case "EP842A":
                    //list of party for o/s followup
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Lead_no,Lead_Dt,Contact,Ent_by' as col1,trim(a.lrcno)||'!~!~!'||to_char(a.lrcdt,'dd/mm/yyyy')||'!~!~!'||trim(a.ldescr)||'!~!~!'||trim(a.ent_by) as col2,'-' as col3,'-' as col4,to_char(a.lrcdt,'yyyymmdd')||a.branchcd as col5 from wb_lead_log a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a.branchcd='00' and a.type like 'LR%' and a.lrcdt " + xprdRange + " and (uppeR(trim(a.REFFBY))='" + sman_id + "' or uppeR(trim(a.ent_by))='" + sman_id + "')  order by to_char(a.lrcdt,'yyyymmdd')||a.branchcd||a.lrcno desc) ";
                    break;

                case "EP842B":
                    //list of pending bill of selected party for o/s followup
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Lead_no,Lead_Dt,Contact,Ent_by' as col1,trim(a.lrcno)||'!~!~!'||to_char(a.lrcdt,'dd/mm/yyyy')||'!~!~!'||trim(a.ldescr)||'!~!~!'||trim(a.ent_by) as col2,'-' as col3,'-' as col4,to_char(a.lrcdt,'yyyymmdd')||a.branchcd as col5 from wb_lead_log a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a.branchcd='00' and a.type like 'LR%' and a.lrcdt " + xprdRange + " and (uppeR(trim(a.REFFBY))='" + sman_id + "' or uppeR(trim(a.ent_by))='" + sman_id + "')  order by to_char(a.lrcdt,'yyyymmdd')||a.branchcd||a.lrcno desc) ";
                    break;

                case "EP842C":
                    //list of pending bill of selected party for o/s followup
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Reason,blank,Code,blank' as col1,trim(a.type1)||'!~!~!'||'-'||'!~!~!'||a.Name||'!~!~!'||'-' as col2,'-' as col3,'-' as col4,trim(a.type1) as col5 from typegrp a where a.branchcd!='DD' and a.id like 'BP' order by a.Name) ";
                    break;

                case "EP842D":
                    if (team6.col1.Trim() == "SGRP")
                    {
                        mq2 = "select A.ACODE,A.ICODE,b.Aname,trim(a.ciname) as purpose,'-' as exc_57f4,a.qtysupp as iqtyout,'-' as no_bdls,a.srno as morder,c.unit,'-' as mo_Vehi ,a.packno as vchnum,to_char(A.packdate,'dd/mm/yyyy') as vchdt from despatch a, famst b, item c  where a." + branch_cd + " and trim(A.acode)=trim(b.acode) and trim(A.icode)=trim(c.icode) and a.type like '4%' and a.branchcd||a.type||a.packno||to_char(A.packdate,'dd/mm/yyyy')='" + team6.col6.Trim() + "'";
                        mq = "select * from (select col1,col2,col3,col4,col5,'-' as col6 from  (Select 'Customer,Part_Name,Quantity,unit,no_bdls,Vehicle,docno,docdt,ACODE,ICODE' as col1,trim(a.Aname)||'!~!~!'||trim(a.purpose)||'!~!~!'||to_char(a.iqtyout,'99999999.99')||'!~!~!'||trim(a.unit)||'!~!~!'||trim(a.no_bdls)||'!~!~!'||trim(a.mo_vehi)||'!~!~!'||trim(a.vchnum)||'!~!~!'||trim(a.vchdt)||'!~!~!'||trim(a.ACODE)||'!~!~!'||trim(a.ICODE) as col2,'-' as col3,'-' as col4,'-' as col5 ,a.morder as col6 from (" + mq2 + ")a ) order by col6 ) where rownum<1000 ";
                    }
                    else
                    {
                        if ((team6.col6.Substring(2, 1) == "2" || team6.col6.Substring(2, 2) == "65"))
                        {
                            mq2 = "select A.ACODE,A.ICODE,b.Aname,trim(a.purpose) as purpose,a.exc_57f4,a.iqtyout,a.no_bdls,a.morder,c.unit,a.vchnum,to_char(A.vchdate,'dd/mm/yyyy') as vchdt, trim(a.mode_tpt) as mo_vehi from ivoucher a, famst b, item c where a." + branch_cd + " and trim(A.acode)=trim(b.acode) and trim(A.icode)=trim(c.icode) and a.branchcd||a.type||a.vchnum||to_char(A.vchdate,'yyyymmdd')='" + team6.col6.Trim() + "'";
                            mq = "select * from (select col1,col2,col3,col4,col5,'-' as col6 from  (Select 'Customer,Part_Name,Quantity,unit,no_bdls,Vehicle,docno,docdt,ACODE,ICODE' as col1,trim(a.Aname)||'!~!~!'||trim(a.purpose)||'!~!~!'||to_char(a.iqtyout,'99999999.99')||'!~!~!'||trim(a.unit)||'!~!~!'||trim(a.no_bdls)||'!~!~!'||trim(a.mo_vehi)||'!~!~!'||trim(a.vchnum)||'!~!~!'||trim(a.vchdt)||'!~!~!'||trim(a.ACODE)||'!~!~!'||trim(a.ICODE) as col2,'-' as col3,'-' as col4,'-' as col5 ,a.morder as col6 from (" + mq2 + ")a ) order by col6 ) where rownum<1000 ";

                        }
                        else
                        {
                            mq2 = "select A.ACODE,A.ICODE,b.Aname,trim(a.purpose) as purpose,a.exc_57f4,a.iqtyout,a.no_bdls,a.morder,c.unit,d.mo_Vehi ,a.vchnum,to_char(A.vchdate,'dd/mm/yyyy') as vchdt from ivoucher a, famst b, item c,sale d where a." + branch_cd + " and trim(A.acode)=trim(b.acode) and trim(A.icode)=trim(c.icode) and a.branchcd||a.type||a.vchnum||to_char(a.vchdate,'dd/mm/yyyy')=d.branchcd||d.type||d.vchnum||to_char(d.vchdate,'dd/mm/yyyy') and a.type like '4%' and a.branchcd||a.type||a.vchnum||to_char(A.vchdate,'yyyymmdd')='" + team6.col6.Trim() + "'";
                            mq = "select * from (select col1,col2,col3,col4,col5,'-' as col6 from  (Select 'Customer,Part_Name,Quantity,unit,no_bdls,Vehicle,docno,docdt,ACODE,ICODE' as col1,trim(a.Aname)||'!~!~!'||trim(a.purpose)||'!~!~!'||to_char(a.iqtyout,'99999999.99')||'!~!~!'||trim(a.unit)||'!~!~!'||trim(a.no_bdls)||'!~!~!'||trim(a.mo_vehi)||'!~!~!'||trim(a.vchnum)||'!~!~!'||trim(a.vchdt)||'!~!~!'||trim(a.ACODE)||'!~!~!'||trim(a.ICODE) as col2,'-' as col3,'-' as col4,'-' as col5 ,a.morder as col6 from (" + mq2 + ")a ) order by col6 ) where rownum<1000 ";
                        }

                    }

                    break;



                case "EP845":
                    //ariival->loading
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Vehin_Ref,others,Vehin_no,Locations' as col1,trim(a.VEHICLE_ID)||'!~!~!'||trim(a.Customer_Dtl)||'!~!~!'||a.branchcd||'-'||a.type||'-'||a.vchnum||'-'||to_char(a.Vchdate,'dd/mm/yyyy')||'!~!~!'||'-' as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from wb_logis_rec a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a.branchcd='" + work_br + "' and a.type like '11%' and a.vchdate between TRUNC(SYSDATE - 5) AND  TRUNC(SYSDATE)  and a.branchcd||'-'||a.type||'-'||a.vchnum||'-'||to_char(a.Vchdate,'dd/mm/yyyy') not in (select trim(nvl(PREV_VCHDTL,'-')) from  wb_logis_rec where branchcd='" + work_br + "' and type like '12%' and vchdate " + xprdRange + " )  order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    break;
                case "EP846":
                    //loading->departure
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Vehin_Ref,others,Vehin_no,Locations' as col1,trim(a.VEHICLE_ID)||'!~!~!'||trim(a.Customer_Dtl)||'!~!~!'||a.branchcd||'-'||a.type||'-'||a.vchnum||'-'||to_char(a.Vchdate,'dd/mm/yyyy')||'!~!~!'||'-' as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from wb_logis_rec a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a.branchcd='" + work_br + "' and a.type like '12%' and a.vchdate between TRUNC(SYSDATE - 5) AND  TRUNC(SYSDATE)  and a.branchcd||'-'||a.type||'-'||a.vchnum||'-'||to_char(a.Vchdate,'dd/mm/yyyy') not in (select trim(nvl(PREV_VCHDTL,'-')) from  wb_logis_rec where branchcd='" + work_br + "' and type like '13%' and vchdate " + xprdRange + " )  order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    break;
                case "EP847":
                    //departure->start
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Vehin_Ref,others,Vehin_no,Locations' as col1,trim(a.VEHICLE_ID)||'!~!~!'||trim(a.Customer_Dtl)||'!~!~!'||a.branchcd||'-'||a.type||'-'||a.vchnum||'-'||to_char(a.Vchdate,'dd/mm/yyyy')||'!~!~!'||'-' as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from wb_logis_rec a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a.branchcd='" + work_br + "' and a.type like '13%' and to_char(a.vchdate,'dd/mm/yyyy')=to_char(sysdate,'dd/mm/yyyy')  and a.branchcd||'-'||a.type||'-'||a.vchnum||'-'||to_char(a.Vchdate,'dd/mm/yyyy') not in (select trim(nvl(PREV_VCHDTL,'-')) from  wb_logis_rec where branchcd='" + work_br + "' and type like '21%' and vchdate " + xprdRange + " )  order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    break;


                case "EP845_IVLB":
                    //incoming vehicle
                    //ariival->loading
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Vehin_Ref,others,Vehin_no,Locations' as col1,trim(a.VEHICLE_ID)||'!~!~!'||trim(a.Customer_Dtl)||'!~!~!'||a.branchcd||'-'||a.type||'-'||a.vchnum||'-'||to_char(a.Vchdate,'dd/mm/yyyy')||'!~!~!'||'-' as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from wb_logis_rec a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a.branchcd='" + work_br + "' and a.type like '51%' and a.vchdate between TRUNC(SYSDATE - 5) AND  TRUNC(SYSDATE)  and a.branchcd||'-'||a.type||'-'||a.vchnum||'-'||to_char(a.Vchdate,'dd/mm/yyyy') not in (select trim(nvl(PREV_VCHDTL,'-')) from  wb_logis_rec where branchcd='" + work_br + "' and type like '52%' and vchdate " + xprdRange + " )  order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    break;
                case "EP846_IVLE":
                    //incoming vehicle
                    //loading->departure
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Vehin_Ref,others,Vehin_no,Locations' as col1,trim(a.VEHICLE_ID)||'!~!~!'||trim(a.Customer_Dtl)||'!~!~!'||a.branchcd||'-'||a.type||'-'||a.vchnum||'-'||to_char(a.Vchdate,'dd/mm/yyyy')||'!~!~!'||'-' as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from wb_logis_rec a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a.branchcd='" + work_br + "' and a.type like '52%' and a.vchdate between TRUNC(SYSDATE - 5) AND  TRUNC(SYSDATE)  and a.branchcd||'-'||a.type||'-'||a.vchnum||'-'||to_char(a.Vchdate,'dd/mm/yyyy') not in (select trim(nvl(PREV_VCHDTL,'-')) from  wb_logis_rec where branchcd='" + work_br + "' and type like '53%' and vchdate " + xprdRange + " )  order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    break;
                case "EP847_IV":
                    //incoming vehicle
                    //departure->start
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Vehin_Ref,others,Vehin_no,Locations' as col1,trim(a.VEHICLE_ID)||'!~!~!'||trim(a.Customer_Dtl)||'!~!~!'||a.branchcd||'-'||a.type||'-'||a.vchnum||'-'||to_char(a.Vchdate,'dd/mm/yyyy')||'!~!~!'||'-' as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from wb_logis_rec a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a.branchcd='" + work_br + "' and a.type like '53%' and to_char(a.vchdate,'dd/mm/yyyy')=to_char(sysdate,'dd/mm/yyyy')  and a.branchcd||'-'||a.type||'-'||a.vchnum||'-'||to_char(a.Vchdate,'dd/mm/yyyy') not in (select trim(nvl(PREV_VCHDTL,'-')) from  wb_logis_rec where branchcd='" + work_br + "' and type like '54%' and vchdate " + xprdRange + " )  order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    break;
                case "EP848":
                    //start->arrive
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Vehin_Ref,others,Vehin_no,Locations' as col1,trim(a.VEHICLE_ID)||'!~!~!'||trim(a.Customer_Dtl)||'!~!~!'||a.branchcd||'-'||a.type||'-'||a.vchnum||'-'||to_char(a.Vchdate,'dd/mm/yyyy')||'!~!~!'||'-' as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from wb_logis_rec a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a.branchcd='" + work_br + "' and a.type like '21%' and a.vchdate " + xprdRange + "  and a.branchcd||'-'||a.type||'-'||a.vchnum||'-'||to_char(a.Vchdate,'dd/mm/yyyy') not in (select trim(nvl(PREV_VCHDTL,'-')) from  wb_logis_rec where branchcd='" + work_br + "' and type like '22%' and vchdate " + xprdRange + " )  order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    break;
                case "EP849":
                    //arrive->unload
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Vehin_Ref,others,Vehin_no,Locations' as col1,trim(a.VEHICLE_ID)||'!~!~!'||trim(a.Customer_Dtl)||'!~!~!'||a.branchcd||'-'||a.type||'-'||a.vchnum||'-'||to_char(a.Vchdate,'dd/mm/yyyy')||'!~!~!'||'-' as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from wb_logis_rec a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a.branchcd='" + work_br + "' and a.type like '22%' and a.vchdate " + xprdRange + "  and a.branchcd||'-'||a.type||'-'||a.vchnum||'-'||to_char(a.Vchdate,'dd/mm/yyyy') not in (select trim(nvl(PREV_VCHDTL,'-')) from  wb_logis_rec where branchcd='" + work_br + "' and type like '23%' and vchdate " + xprdRange + " )  order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    break;
                case "EP850":
                    //unload->feedback
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Vehin_Ref,others,Vehin_no,Locations' as col1,trim(a.VEHICLE_ID)||'!~!~!'||trim(a.Customer_Dtl)||'!~!~!'||a.branchcd||'-'||a.type||'-'||a.vchnum||'-'||to_char(a.Vchdate,'dd/mm/yyyy')||'!~!~!'||'-' as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from wb_logis_rec a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a.branchcd='" + work_br + "' and a.type like '23%' and a.vchdate " + xprdRange + "  and a.branchcd||'-'||a.type||'-'||a.vchnum||'-'||to_char(a.Vchdate,'dd/mm/yyyy') not in (select trim(nvl(PREV_VCHDTL,'-')) from  wb_logis_rec where branchcd='" + work_br + "' and type like '24%' and vchdate " + xprdRange + " )  order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    break;
                case "EP851":
                    //feedback->erturn
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Vehin_Ref,others,Vehin_no,Locations' as col1,trim(a.VEHICLE_ID)||'!~!~!'||trim(a.Customer_Dtl)||'!~!~!'||a.branchcd||'-'||a.type||'-'||a.vchnum||'-'||to_char(a.Vchdate,'dd/mm/yyyy')||'!~!~!'||'-' as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from wb_logis_rec a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a.branchcd='" + work_br + "' and a.type like '24%' and a.vchdate " + xprdRange + "  and a.branchcd||'-'||a.type||'-'||a.vchnum||'-'||to_char(a.Vchdate,'dd/mm/yyyy') not in (select trim(nvl(PREV_VCHDTL,'-')) from  wb_logis_rec where branchcd='" + work_br + "' and type like '25%' and vchdate " + xprdRange + " )  order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    break;

                case "EP860":
                    //read UDF
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Srno,Blank,Obj_name,Blank' as col1,trim(to_char(a.srno,'99'))||'!~!~!'||'-'||'!~!~!'||trim(a.Obj_caption)||'!~!~!'||'-' as col2,'-' as col3,'-' as col4,a.srno as col5 from udf_config a where a.branchcd!='DD' and a.frm_name='" + team6.col6.Trim() + "' order by a.srno) ";
                    break;
                case "EP861":
                    // comp type
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Comp_Name,C_code,Comp_Code,Other' as col1,trim(a.Name)||'!~!~!'||'-'||'!~!~!'||null||'!~!~!'||trim(a.type1) as col2,'-' as col3,'-' as col4,a.type1 as col5 from typegrp a where a.branchcd!='DD' and a.id='MN' order by a.name) ";
                    break;

                case "EP862":
                    //maint comp-list in Form 

                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Dated,Comp_Ref,Deptt,Ent_by' as col1,to_char(a.ent_dt,'dd/mm/yyyy')||'!~!~!'||trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_Char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||trim(a.Deptt_name)||'!~!~!'||a.Ent_by as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from wb_maint_comp a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a.branchcd='" + work_br + "' and a.type like 'MQ%' and to_DatE(to_char(a.vchdate,'dd/mm/yyyy'),'dd/mm/yyyy') " + xprdRange + "  and trim(nvl(a.app_by,'-'))='-' order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    break;

                case "EP863":
                    //maint comp-details after API
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Shift,Deptt,Machine,Time,Comp_type,Remarks,Ent_by' as col1,trim(a.shft_name)||'!~!~!'||trim(a.Deptt_name)||'!~!~!'||trim(a.Mach_name)||'!~!~!'||to_char(a.comp_hrs,'99')||':'||to_char(a.comp_min,'99')||'!~!~!'||trim(a.comp_type)||'!~!~!'||trim(a.Remarks)||'!~!~!'||a.Ent_by as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from wb_maint_comp a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a.branchcd='" + work_br + "' and a.type like 'MQ%' and to_DatE(to_char(a.vchdate,'dd/mm/yyyy'),'dd/mm/yyyy') " + xprdRange + "  and trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_Char(a.vchdate,'dd/mm/yyyy')=trim(upper('" + team6.col6.Trim() + "')) order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    break;

                case "EP864":
                    // visitor mobile rec
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Viz_Name,Viz_org,Viz_Addres,Viz_phone' as col1,trim(nvl(a.viz_name,'-'))||'!~!~!'||trim(nvl(a.viz_org,'-'))||'!~!~!'||trim(nvl(a.viz_address,'-'))||'!~!~!'||trim(nvl(a.viz_phone,'-')) as col2,'-' as col3,'-' as col4,a.type as col5 from wb_visitor_Rec a where a.branchcd!='DD' and a.type='1N' and trim(a.viz_phone)='" + team6.col6.Trim() + "' order by a.vchdate desc) ";
                    break;

                case "EP865":
                    //Vistor-Exit
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Viz_Name,Viz_org,Viz_Addres,Viz_phone' as col1,trim(nvl(a.viz_name,'-'))||'!~!~!'||trim(nvl(a.viz_org,'-'))||'!~!~!'||trim(nvl(a.viz_address,'-'))||'!~!~!'||a.branchcd||'-'||a.type||'-'||a.vchnum||'-'||to_char(a.Vchdate,'dd/mm/yyyy') as col2,'-' as col3,'-' as col4,a.type as col5 from wb_visitor_Rec a where a.branchcd!='DD' and a.type='1N' and trim(a.viz_phone)='" + team6.col6.Trim() + "' and a.branchcd||'-'||a.type||'-'||a.vchnum||'-'||to_char(a.Vchdate,'dd/mm/yyyy') not in (select trim(nvl(Viz_inref,'-')) from  wb_visitor_rec where branchcd!='DD' and type like '1O%' and vchdate " + xprdRange + " and trim(viz_phone)='" + team6.col6.Trim() + "')  order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    break;

                case "EP461":
                    work_br = fn_seek_iname(team6.col1, "", "Select AND_ENTBR from evas where username='" + team6.col5.ToUpper().Trim() + "'", "AND_ENTBR");
                    //Report of Vehicle Arrived     
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'In_Time,Vehicle,Driver,Ent_by' as col1,to_char(a.ent_dt,'dd/mm/yyyy :hh24:mi:ss')||'!~!~!'||trim(a.VEHICLE_ID)||'!~!~!'||trim(a.driver_ID)||'!~!~!'||a.Ent_by as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from wb_logis_rec a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a.branchcd='" + work_br + "' and a.type like '11%' and a.vchdate " + xprdRange + "  order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    break;
                case "EP462":
                    //Report of Vehicle Loaded
                    work_br = fn_seek_iname(team6.col1, "", "Select AND_ENTBR from evas where username='" + team6.col5.ToUpper().Trim() + "'", "AND_ENTBR");
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Load_Time,Vehicle,Customer,Ent_by' as col1,to_char(a.ent_dt,'dd/mm/yyyy :hh24:mi:ss')||'!~!~!'||trim(a.VEHICLE_ID)||'!~!~!'||trim(a.Customer_Dtl)||'!~!~!'||a.Ent_by as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from wb_logis_rec a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a.branchcd='" + work_br + "' and a.type like '12%' and a.vchdate " + xprdRange + "  order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    break;
                case "EP463":
                    //Report of Vehicle Departed    
                    work_br = fn_seek_iname(team6.col1, "", "Select AND_ENTBR from evas where username='" + team6.col5.ToUpper().Trim() + "'", "AND_ENTBR");
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Depart_on,Vehicle,Customer,Ent_by' as col1,to_char(a.ent_dt,'dd/mm/yyyy :hh24:mi:ss')||'!~!~!'||trim(a.VEHICLE_ID)||'!~!~!'||trim(a.Customer_Dtl)||'!~!~!'||a.Ent_by as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from wb_logis_rec a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a.branchcd='" + work_br + "' and a.type like '13%' and a.vchdate " + xprdRange + "  order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    break;

                case "EP613":
                    // meter read
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Rec_No,Rec_Dt,Machine,Unit_Consumed' as col1,trim(a.vchnum)||'!~!~!'||to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||trim(a.mch_code)||'!~!~!'||to_char(is_number(a.mtr_stop)-is_number(a.mtr_start),'9999999999') as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from wb_pwr_rec a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a." + branch_cd + " and a.type like 'PC%' and a.vchdate " + xprdRange + " order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    break;
                case "EP614":
                    // asset_verify
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Rec_No,Rec_Dt,Equipment,Condition' as col1,trim(a.vchnum)||'!~!~!'||to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||trim(a.Asset_Code)||'!~!~!'||trim(a.Asset_Cond) as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from wb_asset_ver a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a." + branch_cd + " and a.type like 'AV%' and a.vchdate " + xprdRange + " order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    break;
                case "EP511":
                    mq = "select (Case when Mins_elapse>=720 then 'Ok to Tfr' Else 'Pending Cure' end) as Col1,iname as col2,Serial_NO as Col3,Cdrgno as col4,ENTRY_dT as col5,Mins_elapse as col6 from (SELECT B.iNAME,TRIM(UPPER(A.COL4)) AS Serial_NO,trim(A.ICODE) as ERP_Code,b.Cdrgno,MAX(a.ENT_dT) AS ENTRY_dT,max(time_elap) as Mins_elapse,SUM(QTY) AS Serial_Qty FROM (SELECT ICODE,COL4,1 AS QTY,ENT_DT,round(sysdate-ENT_DT,2)*60*24 as time_elap FROM MULTIVCH WHERE " + branch_cd + " AND TYPE='YR' and vchdaTE>to_DaTE('01/04/2021','dd/mm/yyyy') UNION ALL SELECT ICODE,COL4,-1 AS QTY,NULL AS ENT_DT,NULL AS VCHDATE FROM MULTIVCH WHERE " + branch_cd + " AND TYPE='YI' and vchdaTE>to_DaTE('01/04/2021','dd/mm/yyyy') )a,item b where trim(A.icode)=trim(B.icode)  GROUP BY b.Iname,b.Cdrgno,TRIM(a.ICODE),TRIM(UPPER(a.COL4)) HAVING SUM(a.QTY)>0 ORDER BY TRIM(UPPER(A.COL4))) order by Mins_elapse,iname ";
                    break;

                case "EP711":
                    // Issue_req
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Iss_Req,Dated,Item,Qty,Remarks' as col1,trim(a.vchnum)||'!~!~!'||to_char(a.ent_Dt,'dd/mm/yyyy :hh24:mi:ss')||'!~!~!'||trim(b.Iname)||'!~!~!'||to_char(a.req_qty,'9999999.99')||'!~!~!'||trim(a.desc_) as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from wb_iss_Req a, item b where trim(A.icode)=trim(B.icode) and a.branchcd='" + work_br + "' and a.type like '30%' and a.vchdate " + xprdRange + " and a.ent_by='" + team6.col5.Trim() + "' order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    break;
                case "EP712":
                    // ret_Req
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Req_Req,Dated,Item,Qty,Remarks' as col1,trim(a.vchnum)||'!~!~!'||to_char(a.ent_Dt,'dd/mm/yyyy :hh24:mi:ss')||'!~!~!'||trim(b.Iname)||'!~!~!'||to_char(a.req_qty,'9999999.99')||'!~!~!'||trim(a.desc_) as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from wb_iss_Req a, item b where trim(A.icode)=trim(B.icode) and a.branchcd='" + work_br + "' and a.type like '11%' and a.vchdate " + xprdRange + " and a.ent_by='" + team6.col5.Trim() + "' order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    break;
                case "EP713":
                    // Purch_Req
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'P.R.No.,Dated,Item,Qty,Remarks,App_by' as col1,trim(a.ordno)||'!~!~!'||to_char(a.ent_Dt,'dd/mm/yyyy :hh24:mi:ss')||'!~!~!'||trim(b.Iname)||'!~!~!'||to_char(a.qtyord,'9999999.99')||'!~!~!'||trim(a.desc_)||'!~!~!'||trim(a.app_by) as col2,'-' as col3,'-' as col4,to_char(a.orddt,'yyyymmdd')||a.branchcd as col5 from pomas a, item b where trim(A.icode)=trim(B.icode) and a.branchcd='" + work_br + "' and a.type like '60%' and a.orddt " + xprdRange + " and a.ent_by='" + team6.col5.Trim() + "' order by to_char(a.orddt,'yyyymmdd')||a.branchcd||a.ordno desc) ";
                    break;

                case "EP715A":
                    // MRR pending Inspection 
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select distinct 'MRR_no,MRR_Dt,Supplier,INVNO,Ent_by' as col1,trim(a.vchnum)||'!~!~!'||to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||trim(b.Aname)||'!~!~!'||trim(a.invno)||'!~!~!'||a.ent_by as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.vchnum||a.type||a.branchcd as col5 from ivoucher A ,famst b where trim(A.acode)=trim(B.acodE) and a.branchcd='" + work_br + "' and a.type like '0%' and a.vchdate " + last30_prd + " and nvl(a.pname,'-')='-' and a.store='N' order by to_char(a.vchdate,'yyyymmdd')||a.vchnum||a.type||a.branchcd desc) ";
                    break;
                case "EP715B":
                    // Item Wise MRR pending inspection
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'MRR_no,MRR_Dt,Icode,Iname,Qty_Rcv,unit' as col1,trim(a.vchnum)||'!~!~!'||to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||trim(a.Icode)||'!~!~!'||trim(b.iname)||'!~!~!'||to_char(a.iqtyin,'9999999.99')||'!~!~!'||trim(b.unit) as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.vchnum as col5,a.srno from ivoucher A ,item b where trim(A.icode)=trim(B.icodE) and a.branchcd='" + work_br + "' and a.type like '0%' and nvl(a.pname,'-')='-' and a.store='N' and to_char(a.vchdate,'yyyymmdd')||a.vchnum||a.type||a.branchcd='" + team6.col6.Trim() + "' order by a.srno) ";
                    break;
                case "EP715S":
                    // REEL Wise MRR pending inspection SATA
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'MRR_no,MRR_Dt,Icode,Iname,Qty_Rcv,Lot_No' as col1,trim(a.vchnum)||'!~!~!'||to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||trim(a.Icode)||'!~!~!'||trim(b.iname)||'!~!~!'||to_char(a.reelwin,'9999999.99')||'!~!~!'||trim(a.kclreelno) as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.vchnum as col5,a.srno from reelvch A ,item b where trim(A.icode)=trim(B.icodE) and a.branchcd='" + work_br + "' and a.type like '0%' and nvl(a.rinsp_by,'-')='-' and trim(a.icode)||trim(a.kclreelno)='" + team6.col6.Trim() + "' order by a.srno) ";
                    break;
                case "EP720":
                    //
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'ID,TEXT,ENABLED' as col1,'O'||'!~!~!'||'Lot_Method'||'!~!~!'||'" + rm_lot_mode + "' as col2,'-' as col3,'-' as col4,to_char(sysdate,'yyyymmdd') as col5 from dual) ";
                    break;

                case "MVIN700": // packno , packdate selection
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (select distinct 'packno,packdate,acode' as col1, packno||'!~!~!'||to_char(packdate, 'dd/mm/yyyy')||'!~!~!'||acode as 	col2,acode as col3,'-' as col4,'-' as col5 from despatch where type='" + team6.col6 + "'and branchcd='" + work_br + "' AND TRIM(NVL(OPR_NAME, 'N')) !='Y' and packdate " + xprdRange + ")";
                    break;

                case "MVIN703":  // Fill items against packno, packdate selection
                    // wb_iss_req issue
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'icode,roll_no,qty' as col1,trim(icode)||'!~!~!'||trim(no_bdls)||'!~!~!'||qtysupp as col2,'-' as col3,'-' as col4,'-' as col5 		from despatch where branchcd='" + work_br + "' and packno='" + Regex.Split(team6.col6, "---")[0].Trim() + "' and to_char(packdate, 'dd/mm/yyyy')='" + Regex.Split(team6.col6, "---")[1].Trim() + "' and acode='" + Regex.Split(team6.col6, "---")[2].Trim() + "' AND TRIM(NVL(OPR_NAME, 'N')) !='Y')";
                    break;

                case "MEGH701": // transporter code, transporter name for truck arrival
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (select distinct 'acode,-,aname' as col1, acode||'!~!~!'||'-'||'!~!~!'||aname as 	col2,acode as col3,'-' as col4,'-' as col5 from famst where branchcd='" + work_br + "' and substr(acode, 0,2)='06' and ccode='T')";
                    break;

                case "MEGH702": // Imcomming Vehicle Unloading END : pick loading supervisor, customer
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (select distinct 'LOADING_SUPV,-,CUSTOMER_DTL' as col1, LOADING_SUPV||'!~!~!'||'-'||'!~!~!'||CUSTOMER_DTL as col2,'-' as col3,'-' as col4,'-' as col5 from WB_LOGIS_REC where branchcd||'-'||TYPE||'-'||VCHNUM||'-'||to_char(VCHDATE, 'dd/mm/yyyy')='" + team6.col6 + "')";
                    break;

                case "XTEND101":
                    // finsys sales person 
                    mq = "select col1,col2,col3,col4,col5,'Finsys-Sales-Person' as col6 from  (Select 'SAL_ID,SAL_NAME,BRANCH,TARGET,SGROUP,SUB_GRP,BLK' as col1,trim(Type1)||'!~!~!'||trim(Name)||'!~!~!'||branchcd||'!~!~!'||0||'!~!~!'||'-'||'!~!~!'||'-'||'!~!~!'||'No' as col2,'-' as col3,'-' as col4,'-' as col5 from typegrp where branchcd!='DD' and id='EM' order by Name)";
                    break;

                case "XTEND102":
                    // finsys customer
                    mq = "select col1,col2,col3,col4,col5,'Finsys-Customer-Name' as col6 from  (Select 'BRANCH,ACC_NO,ACC_HEAD,CON_NAME,CONTACT,TEL,ACC_ADD1,ACC_ADD2,ADD3,PO_BOX,AREA,REGION,COUNTRY,EMAIL,BLK,TERMS,CREDIT,SAL_ID,TRN_ID' as col1,trim(BRANCHCD)||'!~!~!'||trim(ACODE)||'!~!~!'||TRIM(ANAME)||'!~!~!'||TRIM(PERSON)||'!~!~!'||TRIM(MOBILE)||'!~!~!'||TRIM(TELNUM)||'!~!~!'||TRIM(ADDR1)||'!~!~!'||TRIM(ADDR2)||'!~!~!'||TRIM(ADDR3)||'!~!~!'||TRIM(ADDR4)||'!~!~!'||'-'||'!~!~!'||'-'||'!~!~!'||TRIM(COUNTRY)||'!~!~!'||TRIM(EMAIL)||'!~!~!'||TRIM(DEAC_BY)||'!~!~!'||NVL(PAY_NUM,0)||'!~!~!'||NVL(CLIMIT,0)||'!~!~!'||NVL(MKTGGRP,'-')||'!~!~!'||NVL(GST_NO,'-') as col2,'-' as col3,'-' as col4,'-' as col5 from FAMST where branchcd!='DD' and GRP='16' order by aname)";
                    break;

                case "XTEND103":
                    // finsys item
                    mq = "select col1,col2,col3,col4,col5,'Finsys-Product-Name' as col6 from  (Select 'PART_NO,DES,ICODE,UNIT,DF_UNIT,CAT_CODE,CAT_NAME,SUBCAT_CODE, SUBCAT_NAME,DEPT,SUPPL,CONV,BARCODE' as col1,trim(a.cpartno)||'!~!~!'||trim(a.Iname)||'!~!~!'||trim(a.icode)||'!~!~!'||trim(a.unit)||'!~!~!'||trim(a.no_proc)||'!~!~!'||substr(a.icode,1,2)||'!~!~!'||trim(b.name)||'!~!~!'||substr(a.icode,1,4)||'!~!~!'||c.iname||'!~!~!'||'-'||'!~!~!'||'-'||'!~!~!'||'-'||'!~!~!'||'-' as col2,'-' as col3,'-' as col4,'-' as col5 from item a, item c, type b where trim(c.icode)=substr(trim(a.icode),1,4) and b.id='Y' and b.type1=substr(a.icode,1,2) and a.branchcd!='DD' and a.icode like '9%' and length(Trim(a.icode))>4 and trim(nvl(a.deac_by,'-'))='-' order by substr(a.icode,1,4),a.iname)";
                    break;

                case "XTEND104":
                    // finsys inv
                    mq = "select col1,col2,col3,col4,'-' as col5,'Finsys-Invoice-List' as col6 from  (Select 'srno,type,branch,docno,doc_Date,acc_no,acc_name,sal_id,desc,part_no,unit,qty,amount,total,vat_amt,vat_tot,ent_dt' as col1,a.morder||'!~!~!'||'INV'||'!~!~!'||trim(a.branchcd)||'!~!~!'||trim(a.invno)||'!~!~!'||to_Char(a.invdate,'dd/mm/yyyy')||'!~!~!'||trim(a.acode)||'!~!~!'||trim(b.aname)||'!~!~!'||trim(a.tpt_names)||'!~!~!'||trim(a.purpose)||'!~!~!'||trim(c.cpartno)||'!~!~!'||trim(c.unit)||'!~!~!'||to_char(a.iqtyout,'9999999.99')||'!~!~!'||to_char(a.irate,'9999999.999999')||'!~!~!'||to_char(a.iamount,'9999999.99')||'!~!~!'||to_chaR(a.exc_amt,'9999999.99')||'!~!~!'||to_char(a.iamount+a.exc_Amt,'9999999.99')||'!~!~!'||to_char(a.ent_dt, 'dd/mm/yyyy hh24:mi:ss') as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd') as dtsort from ivoucher a,famst b, item c where trim(a.acode)=trim(B.acode) and trim(A.icode)=trim(C.icode) and a.branchcd!='DD' and a.type like '4%' and a.vchdate>=to_DatE('01/01/2022','dd/mm/yyyy') order by to_char(a.vchdate,'yyyymmdd'),a.vchnum,a.morder)";
                    break;

                case "XTEND105":
                    // finsys collection
                    mq = "select col1,col2,col3,col4,'-' as col5,'Finsys-collection-List' as col6 from  (Select 'branch,docno,doc_Date,tr_type,TR_TYPE_NAME,acc_no,acc_name,L_amount,F_amount,CHQ_Date,CHQ_NO,Inv_Date,Inv_NO' as col1,a.branchcd||'!~!~!'||trim(a.vchnum)||'!~!~!'||to_Char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||trim(a.type)||'!~!~!'||c.name||'!~!~!'||trim(a.acode)||'!~!~!'||trim(b.aname)||'!~!~!'||to_char(a.Cramt,'9999999.99')||'!~!~!'||to_char(a.Dramt,'9999999.99')||'!~!~!'||to_char(a.refdate,'dd/mm/yyyy')||'!~!~!'||trim(a.refnum)||'!~!~!'||to_char(a.invdate,'dd/mm/yyyy')||'!~!~!'||trim(a.invno) as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd') as dtsort from voucher a,famst b, type c where c.id='V'  and a.type=c.type1 and trim(a.acode)=trim(B.acode) and a.branchcd!='DD' and a.type like '1%' and a.vchdate>=to_DatE('01/01/2022','dd/mm/yyyy') and b.grp='16' order by to_char(a.vchdate,'yyyymmdd'),a.vchnum,a.srno)";
                    break;

                case "XTEND106":
                    // finsys due bills
                    mq = "select col1,col2,col3,col4,'-' as col5,'Finsys-due-bills' as col6 from  (Select 'Branch,Inv_NO, Inv_Date,Acc_no,Acc_name,Dramt,Cramt,Net,Due_Dt' as col1,a.branchcd||'!~!~!'||trim(a.invno)||'!~!~!'||to_Char(a.invdate,'dd/mm/yyyy')||'!~!~!'||trim(a.acode)||'!~!~!'||trim(b.aname)||'!~!~!'||to_char(a.Dramt,'9999999.99')||'!~!~!'||to_char(a.Cramt,'9999999.99')||'!~!~!'||to_char(a.dramt-a.Cramt,'9999999.99')||'!~!~!'||to_char(a.invdate+b.pay_num,'dd/mm/yyyy') as col2,'-' as col3,'-' as col4,to_char(a.invdate,'yyyymmdd') as dtsort from recdata a,famst b where trim(a.acode)=trim(B.acode) and a.branchcd!='DD' and b.grp='16' order by to_char(a.invdate,'yyyymmdd'),trim(a.invno))";
                    break;

                case "XTEND107":
                    // customer wise last invoice rate
                    mq = "select col1, col2, col3, col4, '-' as col5, 'Customer Wise Last Sale Rate' as col6 from (select 'branchcd ,vchnum, vchdate, icode, iname, part_no, unit, acode, aname, rate, qty, amount' as col1, a.branchcd||'!~!~!'||a.vchnum||'!~!~!'||a.vchdate||'!~!~!'||trim(a.icode)||'!~!~!'||trim(b.iname)||'!~!~!'||trim(b.cpartno)||'!~!~!'||trim(b.unit)||'!~!~!'||trim(a.acode)||'!~!~!'||trim(c.aname)||'!~!~!'||a.rate||'!~!~!'||a.qty||'!~!~!'||a.amount as col2, '-' as col3, '-' as col4, 'Customer Wise Last Sale Rate' as col5 from (select branchcd,vchnum, vchdate,acode, icode, irate as rate, sum(nvl(iqtyout, 0)) as qty, sum(iamount) as amount  from ivoucher a where type like '4%' and vchdate=(select max(vchdate) from ivoucher where acode=a.acode and vchdate <= sysdate) group by branchcd,vchnum, vchdate,acode, icode, irate order by vchdate desc) a, item b, famst c where trim(a.icode)=trim(b.icode) and trim(a.acode)=trim(c.acode) order by a.vchdate desc)";
                    break;

                case "XTEND108":
                    // Sale Return (m_Sret-read)
                    mq = "select col1, col2, col3, col4, '-' as col5, 'M_ SRET-Read / Sale Return' as col6 from (select 'branchcd, vchnum, vchdate, acode, aname, purpose, icode, iname, cpartno, unit, qty, qty_out, amount, total, invno, vat_rate, vat_total' as col1,  trim(a.branchcd)||'!~!~!'||trim(a.vchnum)||'!~!~!'||to_char(a.vchdate, 'dd/mm/yyyy')||'!~!~!'||trim(a.acode)||'!~!~!'||trim(c.aname)||'!~!~!'||trim(nvl(a.purpose, '-'))||'!~!~!'||trim(b.icode)||'!~!~!'||trim(b.iname)||'!~!~!'||trim(b.cpartno)||'!~!~!'||trim(a.unit)||'!~!~!'||sum(nvl(a.iqty_chl, 0))||'!~!~!'||sum(nvl(a.iqtyout, 0))||'!~!~!'||a.irate||'!~!~!'||sum(nvl(a.iamount, 0))||'!~!~!'||trim(a.invno)||'!~!~!'||trim(a.exc_rate)||'!~!~!'||sum(nvl(a.exc_amt, 0)) as col2, '' as col3, '' as col4, 'Sale Return' as col5 from ivoucher a, item b, famst c where a.type ='04' and trim(a.store) <> 'R' and trim(a.acode)=trim(c.acode) and trim(a.icode)=trim(b.icode) group by a.branchcd, a.vchnum, a.vchdate, a.acode, c.aname, a.purpose,b.icode , b.iname, b.cpartno, a.unit, a.irate, a.invno, a.exc_rate)";
                    break;

                case "XTEND109":
                    //xprd1 = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + mydate + "','dd/mm/yyyy')";
                    //yr_fld = fn_seek_iname(team6.col1, "", "Select to_char(to_date('" + frm_cDt1 + "','dd/mm/yyyy'),'yyyy') as fmdt from dual", "fmdt");
                    //mq1 = "select b.Iname,sum(a.opening)+sum(a.cdr)-sum(a.ccr) as closing,b.cpartno as Part_code,trim(a.icode),substr(a.icode,1,4) as Grp,b.unit from (Select icode, yr_" + yr_fld + " as opening,0 as cdr,0 as ccr,0 as clos from itemba  union all  ";
                    //mq2 = "select icode,0 as op,nvl(iqtyin,0) as cdr,nvl(iqtyout,0) as ccr,0 as clos from ivoucher where  type like '%' and store='Y' ) a, item b where trim(A.icode)=trim(B.icode) and substr(a.icode,1,1)='9' group by substr(a.icode,1,4),b.iname,b.unit,b.cpartno,a.icode having sum(a.opening)+sum(a.cdr)-sum(a.ccr)>0 order by substr(a.icode,1,4),b.iname";
                    //mq3 = mq1 + mq2;
                    //mq = "select * from (select col1,col2,col3,col4,col5,'-' as col6 from  (Select 'Part_Name,Stock,Part_Code,Unit' as col1,trim(a.Iname)||'!~!~!'||to_char(a.closing,'" + numbr_fmt2 + "')||'!~!~!'||trim(a.Part_code)||'!~!~!'||trim(a.unit) as col2,a.Grp as col3,a.iname as col4,'-' as col5 ,'-' as col6 from (" + mq3 + ")a ) order by col3,col4 ) where rownum<1000 ";

                    // Stock View Read
                    mq = "select * from (select col1,col2,col3,col4,col5,'-' as col6 from  (Select 'branchcd,Part_Name,Stock,ICODE,Unit' as col1,trim(a.branchcd)||'!~!~!'||trim(a.Iname)||'!~!~!'||trim(to_char(a.closing,'999,999,999'))||'!~!~!'||trim(nvl(a.ICODE,'-'))||'!~!~!'||trim(a.unit) as col2,a.Grp as col3,a.iname as col4,'-' as col5 ,'-' as col6 from (select a.branchcd,b.Iname,sum(a.cdr)-sum(a.ccr) as closing,b.cpartno as Part_code,trim(a.icode) as icode,substr(a.icode,1,4) as Grp,b.unit from (select branchcd,icode,nvl(iqtyin,0) as cdr,nvl(iqtyout,0) as ccr,0 as clos from ivoucher where  type like '%' and store='Y' ) a, item b where trim(A.icode)=trim(B.icode) and substr(a.icode,1,1)='9' group by substr(a.icode,1,4),b.iname,b.unit,b.cpartno,a.icode, a.branchcd having sum(a.cdr)-sum(a.ccr)>0 order by substr(a.icode,1,4),b.iname)a ) order by col3,col4)";
                    break;

                case "XTEND110":
                    // Sales Order
                    mq = "select * from (select col1,col2,col3,col4,col5,'-' as col6 from  (select 'brachcd, ordno, orddt, acode, aname, irate, disc_pers, addr1, icode, iname, desc_, qty, unit, amount, basic, grand_total, type, type_name, status' as col1, trim(a.branchcd)||'!~!~!'||trim(a.ordno)||'!~!~!'||to_char(a.orddt, 'dd/mm/yyyy')||'!~!~!'||trim(a.acode)||'!~!~!'||trim(b.aname)||'!~!~!'||trim(a.irate)||'!~!~!'||trim(a.cdisc)||'!~!~!'||trim(b.addr1)||'!~!~!'||trim(a.icode)||'!~!~!'||trim(c.iname)||'!~!~!'||trim(a.desc_)||'!~!~!'||sum(nvl(a.qtyord, 0))||'!~!~!'||trim(c.unit)||'!~!~!'||trim(a.irate)||'!~!~!'||sum(nvl(a.basic, 0))||'!~!~!'||sum(nvl(a.total, 0))||'!~!~!'||trim(a.type)||'!~!~!'||trim(d.name)||'!~!~!'||case when nvl(a.app_by, '-') <> '-' then 'Approved'  else 'Un-Approved' end as col2, '-' as col3, '-' as col4, '-' as col5  from somas a, famst b, item c, type d where trim(d.id)='M' and trim(a.type)=trim(d.type1) and  trim(a.acode)=trim(b.acode) and trim(a.icode)=trim(c.icode)  group by a.branchcd, a.ordno, a.orddt, a.acode, b.aname, a.irate, a.cdisc, b.addr1, a.icode, c.iname,a.desc_, c.unit, a.app_by, a.type, d.name))";
                    break;

                case "XTEND111":
                    // quotation read
                    mq = "select * from (select col1,col2,col3,col4,col5,'-' as col6 from  (select 'branchcd, ordno, orddt, acode, aname, icode, iname, unit, qty, irate, amount' as col1, trim(a.branchcd)||'!~!~!'||trim(a.ordno)||'!~!~!'||to_char(a.orddt, 'dd/mm/yyyy')||'!~!~!'||trim(a.acode)||'!~!~!'||trim(b.aname)||'!~!~!'||trim(c.icode)||'!~!~!'||trim(c.iname)||'!~!~!'||trim(c.unit)||'!~!~!'||sum(nvl(a.qtyord, 0))||'!~!~!'||trim(a.irate)||'!~!~!'||sum(nvl(a.qtyord, 0)) * sum(nvl(a.irate, 0)) as col2, '-' as col3, '-' as col4, '-' as col5 from somasq a, famst b, item c where trim(a.acode)=trim(b.acode) and trim(a.icode)=trim(c.icode) group by a.branchcd, a.ordno, a.orddt, a.acode, b.aname,a.irate, c.icode, c.iname, c.unit))";
                    break;


                case "BUPL_PARTY":
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Cust_code,Cust_Name,customer_location,business_domain,business_segment' as col1,trim(a.Acode)||'!~!~!'||trim(a.Aname)||'!~!~!'||trim(a.staten)||'!~!~!'||'-'||'!~!~!'||'-' as col2,'-' as col3,'-' as col4,a.branchcd as col5 from famst a where trim(nvl(deac_by,'-'))='-' and substr(Acode,1,2) in ('16', '05', '06') order by a.aname) ";
                    break;

                case "BUPL_ITEM":
                    //     mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (Select 'Part_code, description, customer_part_no,UOM,company_name, company_code, customer, product_category,product_model_name_and_no, special_product_category, supplier,sob, gross_weight,net_wt' as col1,trim(a.cpartno)||'!~!~!'||trim(a.Iname)||'!~!~!'||trim(a.CINAME)||'!~!~!'||trim(a.unit)||'!~!~!'||'-'||'!~!~!'||'-'||'!~!~!'||'-'||'!~!~!'||b.name||'!~!~!'||trim(a.Iname)||'!~!~!'||b.name||'!~!~!'||'-'||'!~!~!'||'-'||'!~!~!'||'-'||'!~!~!'||'-' as col2,'-' as col3,'-' as col4,a.branchcd as col5 from item a, type b where substr(a.icode,1,1)='9' and trim(nvl(deac_by,'-'))='-' and b.id='Y' and trim(b.type1)=trim(substr(a.icode, 1,2)) and length(trim(a.icode))>4  order by a.Iname) ";
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from  (select 'BRANCHCD, ICODE, INAME, ICAT, UNIT, IRATE, IRATE1, IEXC_ADDL, IOPQTY, ICLQTY, MRP, TARRIFNO, IQD, ISD, CPARTNO, TARRIFRATE, CINAME, IRECEQTY, IISSUQTY, IOPBAL, ICLBAL, IRECEAMT, IISSUAMT, IMAX, IMIN, ICOST, IWEIGHT, MAT1, MQTY1, MAT2, MQTY2, MAT3, MQTY3, MAT4, MQTY4, MAT5, MQTY5, MQTY6, MAT6, MQTY7, MAT7, MAT8, MQTY8, MAT9, MQTY9, MAT10, MQTY10, NO_PROC, WT_GROSS, WT_NET, WT_CD, WT_MD, WT_RR, PACKSIZE, BOPCOST, OPRATE1, OPRATE2, OPRATE3, OPRATE4, OPRATE5, IORD, LOCATION, BINNO, IMAGEF, REVIS_DT, IMPLE_DT, STOP_DT, ISSUE_NO, AUTO_SCH, ABC_CLASS, SLOW_MOV, LEAD_TIME, DEALER_RAT, BIN2, DEFAULT_US, NSP_FLAG, NSP_DT, SERVICABLE, IMPORTED, PURCHASED, ISSU_UOM, ISSU_LOT_S, PUR_UOM, PUR_LOT_SZ, CDRGNO, ALLOY, BFACTOR, PAGENO, LABRCHG, CAVITY, SHOTS, MAKER, SALLOY, AC_ACODE, HSCODE, VAT_CODE,	WIP_CODE, SINAME, SEC_UNIT,	MADEINBR,SUBGCODE,SUBGNAME,MGCODE,MG*NAME' as col1, trim(a.BRANCHCD)||'!~!~!'|| trim(a.ICODE)||'!~!~!'|| trim(a.INAME)||'!~!~!'|| trim(a.ICAT)||'!~!~!'|| trim(a.UNIT)||'!~!~!'|| trim(a.IRATE)||'!~!~!'|| trim(a.IRATE1)||'!~!~!'|| trim(a.IEXC_ADDL)||'!~!~!'|| trim(a.IOPQTY)||'!~!~!'|| trim(a.ICLQTY)||'!~!~!'|| trim(a.MRP)||'!~!~!'|| trim(a.TARRIFNO)||'!~!~!'|| trim(a.IQD)||'!~!~!'|| trim(a.ISD)||'!~!~!'|| trim(a.CPARTNO)||'!~!~!'|| trim(a.TARRIFRATE)||'!~!~!'|| trim(a.CINAME)||'!~!~!'|| trim(a.IRECEQTY)||'!~!~!'|| trim(a.IISSUQTY)||'!~!~!'|| trim(a.IOPBAL)||'!~!~!'|| trim(a.ICLBAL)||'!~!~!'|| trim(a.IRECEAMT)||'!~!~!'|| trim(a.IISSUAMT)||'!~!~!'|| trim(a.IMAX)||'!~!~!'|| trim(a.IMIN)||'!~!~!'|| trim(a.ICOST)||'!~!~!'|| trim(a.IWEIGHT)||'!~!~!'|| trim(a.MAT1)||'!~!~!'|| trim(a.MQTY1)||'!~!~!'|| trim(a.MAT2)||'!~!~!'|| trim(a.MQTY2)||'!~!~!'|| trim(a.MAT3)||'!~!~!'|| trim(a.MQTY3)||'!~!~!'|| trim(a.MAT4)||'!~!~!'|| trim(a.MQTY4)||'!~!~!'|| trim(a.MAT5)||'!~!~!'|| trim(a.MQTY5)||'!~!~!'|| trim(a.MQTY6)||'!~!~!'|| trim(a.MAT6)||'!~!~!'|| trim(a.MQTY7)||'!~!~!'|| trim(a.MAT7)||'!~!~!'|| trim(a.MAT8)||'!~!~!'|| trim(a.MQTY8)||'!~!~!'|| trim(a.MAT9)||'!~!~!'|| trim(a.MQTY9)||'!~!~!'|| trim(a.MAT10)||'!~!~!'|| trim(a.MQTY10)||'!~!~!'|| trim(a.NO_PROC)||'!~!~!'|| trim(a.WT_GROSS)||'!~!~!'|| trim(a.WT_NET)||'!~!~!'|| trim(a.WT_CD)||'!~!~!'|| trim(a.WT_MD)||'!~!~!'|| trim(a.WT_RR)||'!~!~!'|| trim(a.PACKSIZE)||'!~!~!'|| trim(a.BOPCOST)||'!~!~!'|| trim(a.OPRATE1)||'!~!~!'|| trim(a.OPRATE2)||'!~!~!'|| trim(a.OPRATE3)||'!~!~!'|| trim(a.OPRATE4)||'!~!~!'|| trim(a.OPRATE5)||'!~!~!'|| trim(a.IORD)||'!~!~!'|| trim(a.LOCATION)||'!~!~!'|| trim(a.BINNO)||'!~!~!'|| trim(a.IMAGEF)||'!~!~!'|| trim(a.REVIS_DT)||'!~!~!'|| trim(a.IMPLE_DT)||'!~!~!'|| trim(a.STOP_DT)||'!~!~!'|| trim(a.ISSUE_NO)||'!~!~!'|| trim(a.AUTO_SCH)||'!~!~!'|| trim(a.ABC_CLASS)||'!~!~!'|| trim(a.SLOW_MOV)||'!~!~!'|| trim(a.LEAD_TIME)||'!~!~!'|| trim(a.DEALER_RAT)||'!~!~!'|| trim(a.BIN2)||'!~!~!'|| trim(a.DEFAULT_US)||'!~!~!'|| trim(a.NSP_FLAG)||'!~!~!'|| trim(a.NSP_DT)||'!~!~!'|| trim(a.SERVICABLE)||'!~!~!'|| trim(a.IMPORTED)||'!~!~!'|| trim(a.PURCHASED)||'!~!~!'|| trim(a.ISSU_UOM)||'!~!~!'|| trim(a.ISSU_LOT_S)||'!~!~!'|| trim(a.PUR_UOM)||'!~!~!'|| trim(a.PUR_LOT_SZ)||'!~!~!'|| trim(a.CDRGNO)||'!~!~!'|| trim(a.ALLOY)||'!~!~!'|| trim(a.BFACTOR)||'!~!~!'|| trim(a.PAGENO)||'!~!~!'|| trim(a.LABRCHG)||'!~!~!'|| trim(a.CAVITY)||'!~!~!'|| trim(a.SHOTS)||'!~!~!'|| trim(a.MAKER)||'!~!~!'|| trim(a.SALLOY)||'!~!~!'|| trim(a.AC_ACODE)||'!~!~!'|| trim(a.HSCODE)||'!~!~!'|| trim(a.VAT_CODE)||'!~!~!'||	trim(a.WIP_CODE)||'!~!~!'|| trim(a.SINAME)||'!~!~!'|| trim(a.SEC_UNIT)||'!~!~!'||	trim(a.MADEINBR)||'!~!~!'||'!~!~!'||b.ICODE||'!~!~!'||b.INAME||'!~!~!'||c.TYPE1||'!~!~!'||c.NAME as col2, '-' as col3, '-' as col4, '-' as col5 from item a,ITEM b,TYPE c where substr(trim(a.icode), 1,4)=trim(b.icode) and c.id='Y' and c.type1=substr(trim(a.icode), 1,2)  and length(trim(a.icode)) > 4  and a.edt_dt >= to_date('" + team6.col3.Trim() + "', 'dd/mm/yyyy') and a.edt_dt <= to_date('" + team6.col4.Trim() + "', 'dd/mm/yyyy'))"; //and nvl(a.deac_by, '-') = '-'
                    break;

                case "BUPL_MRR":
                    mq = "select col1,col2,col3,col4,col5,'DataListB_api' as col6 from (select 'BRANCHCD,MRRNO,MRR_DATE,MRRTYPE,PCODE,PARTY_NAME,ICODE,ITEM_NAME,UNIT,IQTYIN,LCRATE,IRATE,MRRIVAL,ICOUNT,FRT_MRR,FINVNO,PONUM,PODATE,POTYPE,BILL_NO,BILL_DT,PTAX,PEXC,EXC_RATE,FREIGHT_REM' as col1, trim(a.BRANCHCD)||'!~!~!'||TRIM(a.VCHNUM)||'!~!~!'||TRIM(a.vchdate)||'!~!~!'||TRIM(a.TYPE)||'!~!~!'||TRIM(a.ACODE)||'!~!~!'||TRIM(c.ANAME)||'!~!~!'||TRIM(a.icode)||'!~!~!'||TRIM(b.iname)||'!~!~!'||TRIM(b.unit)||'!~!~!'||TRIM(a.IQTYIN)||'!~!~!'||'LCRATE'||'!~!~!'||TRIM(a.IRATE)||'!~!~!'||TRIM(a.IAMOUNT)||'!~!~!'||count(TRIM(a.ICODE))||'!~!~!'||'FRT_MRR'||'!~!~!'||TRIM(a.FINVNO)||'!~!~!'||TRIM(a.PONUM)||'!~!~!'||TRIM(a.PODATE)||'!~!~!'||TRIM(a.POTYPE)||'!~!~!'||TRIM(a.INVNO)||'!~!~!'||TRIM(a.invdate)||'!~!~!'||'PTAX'||'!~!~!'||'PEXC'||'!~!~!'||TRIM(a.EXC_RATE)||'!~!~!'||TRIM(a.FREIGHT) as col2, '-' as col3, '-' as col4, '-' as col5 FROM IVOUCHER a,ITEM b, famst c where TRIM(a.icode)=TRIM(b.icode) and trim(a.type)  in ('02', '07') and TRIM(a.acode)=TRIM(c.acode)  and a.edt_dt >= to_date('" + team6.col3.Trim() + "', 'dd/mm/yyyy') and a.edt_dt <= to_date('" + team6.col4.Trim() + "', 'dd/mm/yyyy')  group by trim(a.BRANCHCD),TRIM(a.VCHNUM),TRIM(a.vchdate),TRIM(a.TYPE),TRIM(a.ACODE),TRIM(c.ANAME),TRIM(a.icode),TRIM(b.iname),TRIM(b.unit),TRIM(a.IQTYIN),TRIM(a.IRATE),TRIM(a.IAMOUNT),TRIM(a.FINVNO),TRIM(a.PONUM),TRIM(a.PODATE),TRIM(a.POTYPE),TRIM(a.INVNO),TRIM(a.invdate),TRIM(a.EXC_RATE),TRIM(a.FREIGHT))";
                    break;
                    //select max(oprate1) as max_operate1, max(oprate3)  as max_operate3, min(oprate1) as min_oprate1, min(oprate3) as min_oprate3 from item where branchcd='00' and trim(icode) in (select distinct trim(col9) as icode from costestimate where vchnum='000045' and vchdate=to_date('25/05/2022', 'dd/mm/yyyy') and type='30' and branchcd='00' and  nvl(trim(col9), '-') !='-') order by oprate1, oprate3 

                    string cond = cond.Length > 2 ? cond : " AND TRIM(A.ICODE) LIKE '9%' ";
                    string mbr = work_br;
                    string SQuery = "";
                    string branch_Cd = (co_cd == "KHEM" || co_cd == "KCLG" || co_cd == "BUPL" || co_cd == "XDIL" || co_cd == "DREM" || co_cd == "LOGW" || co_cd == "ROOP" || co_cd == "WING" || co_cd == "SDM" || co_cd == "DLJM" || co_cd == "AEPL") ? "BRANCHCD NOT IN ('DD','88')" : "BRANCHCD='" + mbr + "'";
                    SQuery = "Select a.*,(case when B.IQD>0 then B.IQD else B.irate end) as itrate,b.iname as itemname,B.UNIT AS BUNIT,b.cpartno,c.iname as piname,c.cpartno as pcpartno from itemosp a,item b,item c where trim(a.ibcode)=trim(b.icode) and trim(a.icode)=trim(c.icodE) " + cond + " AND a." + branch_Cd + " order by a.srno,a.icode";

                    DataTable dt3 = getdata(team6.col1, co_cd, SQuery);
                    DataTable vdt = new DataTable();
                    DataTable mdt = new DataTable();
                    mdt.Columns.Add(new DataColumn("branchcd", typeof(string)));
                    mdt.Columns.Add(new DataColumn("lvl", typeof(string)));
                    mdt.Columns.Add(new DataColumn("icode", typeof(string)));
                    mdt.Columns.Add(new DataColumn("pcode", typeof(string)));
                    mdt.Columns.Add(new DataColumn("vcode", typeof(string)));
                    mdt.Columns.Add(new DataColumn("ibqty", typeof(string)));
                    mdt.Columns.Add(new DataColumn("ibcode", typeof(string)));
                    mdt.Columns.Add(new DataColumn("irate", typeof(string)));
                    mdt.Columns.Add(new DataColumn("val", typeof(string)));

                    mdt.Columns.Add(new DataColumn("iname", typeof(string)));
                    mdt.Columns.Add(new DataColumn("pcpartno", typeof(string)));
                    mdt.Columns.Add(new DataColumn("ibname", typeof(string)));
                    mdt.Columns.Add(new DataColumn("cpartno", typeof(string)));
                    mdt.Columns.Add(new DataColumn("unit", typeof(string)));
                    mdt.Columns.Add(new DataColumn("jr", typeof(string)));

                    DataTable fmdt = new DataTable();
                    fmdt.Columns.Add(new DataColumn("icode", typeof(string)));
                    fmdt.Columns.Add(new DataColumn("val", typeof(string)));

                    int v = 0;

                    SQuery = "Select a.*,(case when B.IQD>0 then B.IQD else B.irate end) as bchrate,b.iname as itemname,b.cpartno,b.unit AS BUNIT from itemosp a,item b where trim(a.ibcode)=trim(b.icode) AND a." + branch_Cd + " order by a.srno,a.icode,a.ibcode";
                    if (co_cd == "KCLG") SQuery = "Select a.*,(case when B.IQD>0 then B.IQD else B.irate end) as bchrate,b.iname as itemname,b.unit AS BUNIT,b.cpartno from itemosp a,item b where trim(a.ibcode)=trim(b.icode) AND a.BRANCHCD = ('02') order by a.srno,a.icode,a.ibcode";
                    string rmcBranch = "";
                    vdt = getdata(team6.col1, co_cd, SQuery); v = 0;
                    DataTable dt2 = new DataTable();

                    #region
                    //SQuery = "Select branchcd,trim(icode) as icode,(case when ichgs>0 then ichgs else irate end) as rate,to_Char(vchdate,'yyyymmdd') as vdd,vchdate from ivoucher where " + rmcBranch + " and " + rateCond + " and (trim(nvl(finvno,'-'))!='-' or type='0U') and vchdate>=round(to_Date('" + todt + "','dd/mm/yyyy')-500) and substr(icode,1,1)<7 /*and icode like '9%'*/ order by icode,vdd desc";
                    //if (co_cd == "BUPL") SQuery = "Select branchcd,trim(icode) as icode,(case when ichgs>0 then ichgs else irate end) as rate,to_Char(vchdate,'yyyymmdd') as vdd,vchdate from ivoucher where " + rmcBranch + " and type in ('02','05','07') and (trim(nvl(finvno,'-'))!='-' or type='0U') and vchdate>=round(to_Date('" + todt + "','dd/mm/yyyy')-500) /* and icode like '9%'*/ order by icode,vdd desc";
                    ////if (co_cd == "KCLG") SQuery = "Select branchcd,trim(icode) as icode,(case when ichgs>0 then ichgs else irate end) as rate,to_Char(vchdate,'yyyymmdd') as vdd,vchdate from ivoucher where BRANCHCD not in ('DD','88') and type like '0%' and trim(nvl(finvno,'-'))!='-' and vchdate>=round(to_Date('" + todt + "','dd/mm/yyyy')-500)  /*and icode like '9%'*/ order by icode,vdd desc";
                    //if (val == "F05124")
                    //{
                    //    //wtd avg rate
                    //    if (fgenMV.Fn_Get_Mvar(frm_qstr, "U_COLR10") == "N")
                    //        SQuery = "Select trim(icode) as icode,round((sum(iqtyin*ichgs) / sum(iqtyin)) ,3) as rate,1 AS VDD from ivoucher where " + rmcBranch + " and " + rateCond + " and (trim(nvl(finvno,'-'))!='-' or type='0U') and vchdate>=round(to_Date('" + todt + "','dd/mm/yyyy')-500) and substr(icode,1,1)<7 /*and icode like '9%'*/ group by trim(icode) order by icode";
                    //}
                    //if (val != "29157")
                    //{
                    //    if (co_cd != "KCLG") dt2 = getdata(team6.col1, co_cd, SQuery);
                    //}

                    //DataTable dtPo = new DataTable();
                    //SQuery = "SELECT distinct TRIM(ICODe) AS ICODE,PRATE,TO_CHAR(ORDDT,'YYYYMMDD') AS VDD FROM POMAS WHERE BRANCHCD='" + mbr + "' and type='53' and orddt>=round(to_Date('" + todt + "','dd/mm/yyyy')-500) and icode like '7%' /* and orddt " + xprdrange + "*/ order by vdd desc ";
                    //if (co_cd == "NIRM") dtPo = getdata(team6.col1, co_cd, SQuery);

                    //if (co_cd == "DREM")
                    //{
                    //    SQuery = "Select c.iname,c.cpartno,b.name as names,a.* from itemospanx a,type b,item c  where b.id='1' and trim(a.icode)=trim(c.icode) and trim(a.stg_Cd)=trim(b.type1) and a.branchcd!='DD'";
                    //    bomanx = getdata(team6.col1, co_cd, SQuery);
                    //}
                    #endregion

                    string mq7 = "";
                    DataView dist1_view = new DataView(dt3);
                    DataTable dt_dist = new DataTable();
                    if (dist1_view.Count > 0)
                    {
                        dist1_view.Sort = "icode";
                        dt_dist = dist1_view.ToTable(true, "icode");
                    }
                    DataTable mdt1;
                    DataView mvdview;
                    DataRow dro1, dro;
                    double mainLotSize = 0, joVal = 0, db5, db6;
                    foreach (DataRow dt_dist_row in dt_dist.Rows)
                    {
                        mdt1 = new DataTable();
                        mdt1 = mdt.Clone();
                        mvdview = new DataView(dt3, "icode='" + dt_dist_row["icode"].ToString().Trim() + "'", "icode,ibcode", DataViewRowState.CurrentRows);
                        dt = new DataTable();
                        mvdview.Sort = "srno,icode";
                        dt = mvdview.ToTable();
                        // filling parent
                        foreach (DataRow drc in dt.Rows)
                        {
                            double cVa = 0;
                            dro = mdt1.NewRow();
                            dro["lvl"] = "1";
                            dro["branchcd"] = drc["branchcd"].ToString().Trim();
                            dro["icode"] = drc["icode"].ToString().Trim();
                            dro["vcode"] = drc["icode"].ToString().Trim();
                            dro["iname"] = drc["piname"].ToString().Trim();
                            dro["pcpartno"] = drc["pcpartno"].ToString().Trim();
                            dro["ibname"] = drc["itemname"].ToString().Trim();
                            dro["cpartno"] = drc["cpartno"].ToString().Trim();
                            dro["unit"] = drc["Bunit"].ToString().Trim();
                            dro["pcode"] = drc["icode"].ToString().Trim();
                            mainLotSize = makeDouble(drc["main_issue_no"].ToString().Trim());
                            if (mainLotSize <= 0) mainLotSize = 1;
                            dro["ibqty"] = makeDouble(drc["ibqty"].ToString()) / mainLotSize;
                            dro["ibcode"] = drc["ibcode"].ToString().Trim();
                            dro["irate"] = drc["itrate"].ToString().Trim();

                            dro["val"] = "0";
                            mdt1.Rows.Add(dro);
                        }
                        int i0 = 1; v = 0;
                        for (int i = v; i < mdt1.Rows.Count; i++)
                        {
                            //vipin
                            if (vdt.Rows.Count <= 0) break;
                            DataView vdview = new DataView(vdt, "icode='" + mdt1.Rows[i]["ibcode"] + "'", "icode", DataViewRowState.CurrentRows);
                            if (vdview.Count > 0)
                            {
                                DataView vdview1 = new DataView(mdt1, "icode='" + mdt1.Rows[i]["icode"].ToString().Trim() + "' and ibcode='" + mdt1.Rows[i]["ibcode"].ToString().Trim() + "' and ibqty='" + mdt1.Rows[i]["ibqty"] + "'", "ibcode", DataViewRowState.CurrentRows);
                                if (vdview1.Count <= 0) vdview1 = new DataView(mdt1, "ibcode='" + mdt1.Rows[i]["ibcode"].ToString().Trim() + "'", "ibcode", DataViewRowState.CurrentRows);

                                for (int x = 0; x < vdview.Count; x++)
                                {
                                    if (mq0 != vdview[x].Row["icode"].ToString().Trim())
                                    {
                                        DataRow[] value3 = mdt1.Select("IBCODE='" + vdview[x].Row["icode"].ToString().Trim() + "'", "LVL");
                                        int value = Convert.ToInt32(value3[0]["LVL"].ToString()) + 1;
                                        if (value > 0)
                                            i0 += 1;
                                        else i0 = Convert.ToInt32(value3[0]["LVL"].ToString()) + 1;
                                    }
                                    dro = mdt1.NewRow();
                                    dro["lvl"] = i0.ToString();
                                    dro["icode"] = vdview[x].Row["icode"].ToString().Trim();
                                    dro["branchcd"] = vdview[x].Row["branchcd"].ToString().Trim();
                                    mq0 = vdview[x].Row["icode"].ToString().Trim();
                                    double lotSize = makeDouble(vdview[x].Row["MAIN_ISSUE_NO"].ToString().Trim());
                                    if (lotSize <= 0) lotSize = 1;
                                    dro["ibqty"] = (Convert.ToDouble(vdview[x].Row["ibqty"]) * (Convert.ToDouble(vdview1[0].Row["ibqty"]) / lotSize)).ToString();
                                    dro["ibcode"] = vdview[x].Row["ibcode"].ToString().Trim();
                                    //dro["irate"] = vdview[0].Row["bchrate"];
                                    dro["irate"] = vdview[x].Row["bchrate"];
                                    dro["ibname"] = vdview[x].Row["itemname"];
                                    dro["cpartno"] = vdview[x].Row["cpartno"].ToString().Trim();
                                    dro["unit"] = vdview[x].Row["Bunit"].ToString().Trim();


                                    dro["val"] = "0";
                                    if (mdt1.Rows[i]["lvl"].ToString() == "1")
                                    {
                                        mq7 = "";
                                        dro["pcode"] = mdt1.Rows[i]["icode"].ToString().Trim();
                                        mq7 = mdt1.Rows[i]["icode"].ToString().Trim();
                                    }
                                    else dro["pcode"] = mq7;

                                    dro["vcode"] = mdt1.Rows[i]["icode"].ToString().Trim();
                                    v++;

                                    mdt1.Rows.Add(dro);
                                } vdview1.Dispose();
                            } vdview.Dispose();

                            //mdt1.DefaultView.Sort = "pcode,lvl,icode";
                            //mdt1 = mdt1.DefaultView.ToTable();
                        }

                        #region
                        //mdt1.DefaultView.Sort = "pcode,lvl,icode";
                        //mdt1 = mdt1.DefaultView.ToTable();

                        // seeking LC and update value
                        //string value1 = "";
                        //for (int i = 0; i < mdt1.Rows.Count; i++)
                        //{
                        //    DataView vdview = new DataView(mdt1, "branchcd='" + mdt1.Rows[i]["branchcd"].ToString().Trim() + "' and icode='" + mdt1.Rows[i]["ibcode"] + "'", "icode", DataViewRowState.CurrentRows);
                        //    if (vdview.Count <= 0)
                        //    {
                        //        if (co_cd != "KCLG")
                        //        {
                        //            if (val != "29157")
                        //            {
                        //                if (dt2.Rows.Count > 0)
                        //                {
                        //                    DataView sort_view = new DataView(dt2, "trim(icode)='" + mdt1.Rows[i]["ibcode"].ToString().Trim() + "'", "vdd desc", DataViewRowState.CurrentRows);
                        //                    if (sort_view.Count > 0) mdt1.Rows[i]["irate"] = sort_view[0].Row["rate"].ToString().Trim();
                        //                    else
                        //                    {
                        //                        sort_view = new DataView(dt2, "trim(icode)='" + mdt1.Rows[i]["ibcode"].ToString().Trim() + "'", "vdd desc", DataViewRowState.CurrentRows);
                        //                        if (sort_view.Count > 0) mdt1.Rows[i]["irate"] = sort_view[0].Row["rate"].ToString().Trim();
                        //                    }
                        //                }
                        //            }
                        //        }
                        //    }
                        //    else mdt1.Rows[i]["irate"] = "0";
                        //    vdview.Dispose();


                        //    string fl1 = "";
                        //    string fl2 = "";
                        //    fl1 = mdt1.Rows[i]["ibqty"].ToString();
                        //    fl2 = mdt1.Rows[i]["irate"].ToString();
                        //    mdt1.Rows[i]["val"] = fgen.make_double(fl1) * fgen.make_double(fl2);

                        //    //mdt1.Rows[i]["val"] = Convert.ToDouble(fgen.make_double(mdt1.Rows[i]["ibqty"].ToString()) * fgen.make_double(mdt1.Rows[i]["irate"].ToString()));

                        //    double dvl = 0;
                        //    if (co_cd == "NIRM")
                        //    {
                        //        dvl += fgen.make_double(fgen.seek_iname_dt(dtPo, "icode='" + mdt1.Rows[i]["ibcode"].ToString().Trim() + "'", "prate"));
                        //        if (fgen.make_double(mdt1.Rows[i]["jr"].ToString()) <= 0)
                        //            mdt1.Rows[i]["jr"] = dvl;
                        //    }
                        //}
                        #endregion

                        mq0 = "0";
                        mq7 = "0";

                        //vdview.Dispose();

                        db6 = 0;
                        db5 = 0;
                        double mul_fact = 0;


                        for (int f = 0; f < mdt1.Rows.Count; f++)
                        {
                            mdt.ImportRow(mdt1.Rows[f]);
                        }

                        mdt1.Dispose();

                        // mdt is table which is having Bom in Expended Form
                        dro1 = fmdt.NewRow();
                        dro1["icode"] = dt_dist_row["icode"].ToString().Trim();
                        dro1["val"] = mq0;
                        fmdt.Rows.Add(dro1);
                    }
                    break;

            }
            try
            {
                DataTable dt = new DataTable();
                dt = getdata(team6.col1, "-", mq);
                list = (from DataRow row in dt.Rows
                        select new Team6()
                        {
                            col1 = row["col1"].ToString(),
                            col2 = row["col2"].ToString(),
                            col3 = row["col3"].ToString(),
                            col4 = row["col4"].ToString(),
                            col5 = row["col5"].ToString(),
                            col6 = row["col6"].ToString(),
                        }).ToList();
            }
            catch (Exception e)
            {

                list.Add(new Team6 { col1 = e.Message.ToString(), col2 = "-", col3 = "-", col4 = "-", col5 = "-", col6 = "-", });
            }
            return list;
        }



        public List<BOMlist> aBUPL_BOM(Team6 team6)
        {
            //-------------------------
            //------------------------

            //-------------------------
            //Fn_set_andapp_opts(team6.col1, "N");
            //------------------------

            List<Team6> list = new List<Team6>();
            string query1, m4, m5, m6, m7, m8, m9, m10, m11, m12, m1, m2, m3, frm_cDt1, frm_cDt2;
            string year1 = "";
            string mq1 = "", mq2 = "", mq3 = "", mq4 = "";
            string xprd1 = "", xprd2 = "";
            string xprdRange = "";
            string mfld;

            string co_cd = "";
            string xfrom_dt = team6.col3.Trim();
            string xto_dt = team6.col4.Trim();

            //makeCur(team6.col1.ToUpper());
            co_cd = team6.col1.ToUpper();

            mq2 = fn_seek_iname(team6.col1, "", "Select to_char((LAST_DAY(ADD_MONTHS(to_DaTE(sysdate),-0))),'dd/mm/yyyy') AS xdt2 from dual", "xdt2");

            string mydate = DateTime.Now.ToString("dd/MM/yyyy");

            string mycocd = team6.col1.ToUpper().Trim();
            if (team6.col1.ToUpper().Trim() == "MCPL2" || team6.col1.ToUpper().Trim() == "MCPL4") mycocd = "MCPL";
            //------CHANGE BY SURENDAR -------//
            //if (team6.col1.ToUpper().Trim() == "BUPL")
            //{
            //    string mydate_ss = "31/03/2023";
            //    frm_cDt1 = fn_seek_iname(team6.col1, "", "Select to_Char(fmdate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%' and FMDATE<=TO_DATE('" + mydate_ss + "','DD/MM/YYYY') AND TODATE>=TO_DATE('" + mydate_ss + "','DD/MM/YYYY') order by fmdate desc", "fmdt");
            //    frm_cDt2 = fn_seek_iname(team6.col1, "", "Select to_Char(todate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%' and to_CHAR(FMDATE,'DD/MM/YYYY')='" + frm_cDt1 + "' order by fmdate desc", "fmdt");
            //}
            //else
            //{
            //    frm_cDt1 = fn_seek_iname(team6.col1, "", "Select to_Char(fmdate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%' and FMDATE<=TO_DATE('" + mydate + "','DD/MM/YYYY') AND TODATE>=TO_DATE('" + mydate + "','DD/MM/YYYY') order by fmdate desc", "fmdt");
            //    frm_cDt2 = fn_seek_iname(team6.col1, "", "Select to_Char(todate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%' and to_CHAR(FMDATE,'DD/MM/YYYY')='" + frm_cDt1 + "' order by fmdate desc", "fmdt");
            //}
            //------CHANGE BY SURENDAR -------//
            frm_cDt1 = fn_seek_iname(team6.col1, "", "Select to_Char(fmdate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%' and FMDATE<=TO_DATE('" + mydate + "','DD/MM/YYYY') AND TODATE>=TO_DATE('" + mydate + "','DD/MM/YYYY') order by fmdate desc", "fmdt");
            frm_cDt2 = fn_seek_iname(team6.col1, "", "Select to_Char(todate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%' and to_CHAR(FMDATE,'DD/MM/YYYY')='" + frm_cDt1 + "' order by fmdate desc", "fmdt");
        
            xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";

            if (team6.col3.Trim() != "" && team6.col3.Trim() != "-")
                xprdRange = "between to_datE('" + team6.col3 + "','dd/mm/yyyy') and to_datE('" + team6.col4 + "','dd/mm/yyyy')";

            string last30_prd = "";
            last30_prd = "between to_datE('" + mydate + "','dd/mm/yyyy')-31 and to_datE('" + mydate + "','dd/mm/yyyy')";

            year1 = frm_cDt1.Substring(6, 4);
            branchwise(team6.col1, "", team6.col5);

            string fldfevas = "", work_br = "", sman_id = "", cust_Sch = "", user_lvl = "";
            fldfevas = fn_seek_iname(team6.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-')))||'^'||trim(nvl(smsopts,'-'))||'^'||trim(nvl(ulevel,'-')) as fstr from evas where upper(Trim(username))='" + team6.col5.ToUpper().Trim() + "'", "fstr");


            string reel_trans = fn_seek_iname(team6.col1, "", "Select count(*) as cnt from reelvch where icode like '07%'", "cnt");
            string O74 = fn_seek_iname(team6.col1.Trim(), "", "SELECT PARAMS FROM CONTROLS WHERE ID='O74' AND ENABLE_YN='Y' ", "PARAMS").Trim();
            if (O74.Length < 2)
            {
                O74 = "60";
            }
            work_br = "00";
            sman_id = "--";

            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
                sman_id = fldfevas.Split('^')[1];
                cust_Sch = fldfevas.Split('^')[2];
                user_lvl = fldfevas.Split('^')[3];

                if (sman_id.Length <= 1)
                {
                    sman_id = team6.col5.ToUpper().Trim();
                }
            }

            string famtbl = fn_seek_iname(team6.col1.ToUpper(), "", "SELECT tname FROM tab WHERE tname=upper('wbvu_fam_crm') ", "tname");

            string yr_fld = "";

            m4 = Convert.ToString(year1).Trim() + "04";
            m5 = Convert.ToString(year1).Trim() + "05";
            m6 = Convert.ToString(year1).Trim() + "06";
            m7 = Convert.ToString(year1).Trim() + "07";
            m8 = Convert.ToString(year1).Trim() + "08";
            m9 = Convert.ToString(year1).Trim() + "09";
            m10 = Convert.ToString(year1).Trim() + "10";
            m11 = Convert.ToString(year1).Trim() + "11";
            m12 = Convert.ToString(year1).Trim() + "12";
            m1 = Convert.ToString(Convert.ToDecimal(year1) + 1).Trim() + "01";
            m2 = Convert.ToString(Convert.ToDecimal(year1) + 1).Trim() + "02";
            m3 = Convert.ToString(Convert.ToDecimal(year1) + 1).Trim() + "03";

            string po_View = "";
            string pop_sql;
            string spl_qry = "";



            #region checking Cyclical BOM

            #endregion
            string cond = "", val = "";
            // for selected item
            // cond = " trim(a.icode)='90010001'";

            // for all
            //cond = " substr(trim(a.icode),1,1) in ('7','9') ";

            string xxicode = team6.col6.Trim();
            if (xxicode.Length == 8)
                xxicode = "and a.icode='" + xxicode + "'";
            else
                xxicode = "";

            string xent_dt = "";
            if (xfrom_dt.Length == 10 && xto_dt.Length == 10)
                xent_dt = "  and a.edt_dt>=to_date('" + xfrom_dt + "', 'dd/mm/yyyy') and a.edt_dt<=to_date('" + xto_dt + "', 'dd/mm/yyyy')";
            else
                xent_dt = "";

            //cond = cond.Length > 2 ? cond : " AND TRIM(A.ICODE) LIKE '9%' ";
            string mbr = work_br;
            string SQuery = "";
            string branch_Cd = (co_cd == "KHEM" || co_cd == "KCLG" || co_cd == "BUPL" || co_cd == "XDIL" || co_cd == "DREM" || co_cd == "LOGW" || co_cd == "ROOP" || co_cd == "WING" || co_cd == "SDM" || co_cd == "DLJM" || co_cd == "AEPL") ? "BRANCHCD NOT IN ('DD','88')" : "BRANCHCD='" + mbr + "'";
            SQuery = "Select a.*,(case when B.IQD>0 then B.IQD else B.irate end) as itrate,b.iname as itemname,B.UNIT AS BUNIT,b.cpartno,c.iname as piname,c.cpartno as pcpartno from itemosp a,item b,item c where trim(a.ibcode)=trim(b.icode) and trim(a.icode)=trim(c.icodE) " + xxicode + "  " + xent_dt + " AND a." + branch_Cd + " order by a.srno,a.icode";
            DataTable vdt = getdata(team6.col1, co_cd, SQuery);
            //dt3 = new DataTable();
            DataTable mdt = new DataTable();
            mdt.Columns.Add(new DataColumn("branchcd", typeof(string)));
            mdt.Columns.Add(new DataColumn("lvl", typeof(string)));
            mdt.Columns.Add(new DataColumn("asterisk", typeof(string)));

            mdt.Columns.Add(new DataColumn("icode", typeof(string)));
            mdt.Columns.Add(new DataColumn("pcode", typeof(string)));
            mdt.Columns.Add(new DataColumn("vcode", typeof(string)));
            mdt.Columns.Add(new DataColumn("mqty", typeof(string)));
            mdt.Columns.Add(new DataColumn("lotsize", typeof(string)));
            mdt.Columns.Add(new DataColumn("ibqty", typeof(string)));
            mdt.Columns.Add(new DataColumn("ibcode", typeof(string)));
            mdt.Columns.Add(new DataColumn("irate", typeof(string)));
            mdt.Columns.Add(new DataColumn("val", typeof(string)));

            mdt.Columns.Add(new DataColumn("iname", typeof(string)));
            mdt.Columns.Add(new DataColumn("pcpartno", typeof(string)));
            mdt.Columns.Add(new DataColumn("ibname", typeof(string)));
            mdt.Columns.Add(new DataColumn("cpartno", typeof(string)));
            mdt.Columns.Add(new DataColumn("unit", typeof(string)));
            mdt.Columns.Add(new DataColumn("jr", typeof(string)));

            mdt.Columns.Add(new DataColumn("gross_wt", typeof(string)));
            mdt.Columns.Add(new DataColumn("net_wt", typeof(string)));
            mdt.Columns.Add(new DataColumn("assembly_iden", typeof(string)));

            mdt.Columns.Add(new DataColumn("total_net_wt", typeof(string)));

            DataTable fmdt = new DataTable();
            fmdt.Columns.Add(new DataColumn("icode", typeof(string)));
            fmdt.Columns.Add(new DataColumn("val", typeof(string)));

            int v = 0;

            SQuery = "Select a.*,(case when B.IQD>0 then B.IQD else B.irate end) as bchrate,b.iname as itemname,b.cpartno,b.unit AS BUNIT from itemosp a,item b where trim(a.ibcode)=trim(b.icode) AND a." + branch_Cd + " order by a.srno,a.icode,a.ibcode";
            if (co_cd == "KCLG") SQuery = "Select a.*,(case when B.IQD>0 then B.IQD else B.irate end) as bchrate,b.iname as itemname,b.unit AS BUNIT,b.cpartno from itemosp a,item b where trim(a.ibcode)=trim(b.icode) AND a.BRANCHCD = ('02') order by a.srno,a.icode,a.ibcode";
            string rmcBranch = mbr;
            DataTable dt3 = getdata(team6.col1, co_cd, SQuery); v = 0;
            DataTable dt2 = new DataTable();

            #region
            SQuery = "Select branchcd,trim(icode) as icode,(case when ichgs>0 then ichgs else irate end) as rate,to_Char(vchdate,'yyyymmdd') as vdd,vchdate from ivoucher where branchcd = '" + rmcBranch + "' and type in ('02','05','07','0U') and vchdate>=round(sysdate-500) and (trim(nvl(finvno,'-'))!='-' or type='0U') /* and icode like '9%' */ order by icode,vdd desc";
            dt2 = getdata(team6.col1, co_cd, SQuery);

            //DataTable dtPo = new DataTable();
            //SQuery = "SELECT distinct TRIM(ICODe) AS ICODE,PRATE,TO_CHAR(ORDDT,'YYYYMMDD') AS VDD FROM POMAS WHERE BRANCHCD='" + mbr + "' and type='53' and orddt>=round(to_Date('" + todt + "','dd/mm/yyyy')-500) and icode like '7%' /* and orddt " + xprdrange + "*/ order by vdd desc ";
            //if (co_cd == "NIRM") dtPo = getdata(team6.col1, co_cd, SQuery);

            //if (co_cd == "DREM")
            //{
            //    SQuery = "Select c.iname,c.cpartno,b.name as names,a.* from itemospanx a,type b,item c  where b.id='1' and trim(a.icode)=trim(c.icode) and trim(a.stg_Cd)=trim(b.type1) and a.branchcd!='DD'";
            //    bomanx = getdata(team6.col1, co_cd, SQuery);
            //}
            #endregion

            string mq7 = "";
            DataView dist1_view = new DataView(vdt);
            DataTable dt_dist = new DataTable();
            if (dist1_view.Count > 0)
            {
                dist1_view.Sort = "icode";
                dt_dist = dist1_view.ToTable(true, "icode");
            }
            DataTable mdt1;
            DataView mvdview;
            DataRow dro1, dro;
            // dt3 = vdt;
            double mainLotSize = 0, joVal = 0, db5, db6;
            mdt1 = new DataTable();
            foreach (DataRow dt_dist_row in dt_dist.Rows)
            {
                mdt1 = new DataTable();
                mdt1 = mdt.Clone();
                //mvdview = new DataView(dt3, "icode='" + dt_dist_row["icode"].ToString().Trim() + "'", "icode,ibcode", DataViewRowState.CurrentRows);
                mvdview = new DataView(vdt, "icode='" + dt_dist_row["icode"].ToString().Trim() + "'", "icode,ibcode", DataViewRowState.CurrentRows);
                dt = new DataTable();
                mvdview.Sort = "srno,icode";
                dt = mvdview.ToTable();
                // filling parent
                foreach (DataRow drc in dt.Rows)
                {
                    double cVa = 0;
                    dro = mdt1.NewRow();
                    dro["lvl"] = "1";
                    dro["branchcd"] = drc["branchcd"].ToString().Trim();
                    dro["icode"] = drc["icode"].ToString().Trim();
                    dro["vcode"] = drc["icode"].ToString().Trim();
                    dro["iname"] = drc["piname"].ToString().Trim();
                    dro["pcpartno"] = drc["pcpartno"].ToString().Trim();
                    dro["ibname"] = drc["itemname"].ToString().Trim();
                    dro["cpartno"] = drc["cpartno"].ToString().Trim();
                    dro["unit"] = drc["Bunit"].ToString().Trim();
                    dro["pcode"] = drc["icode"].ToString().Trim();
                    mainLotSize = makeDouble(drc["main_issue_no"].ToString().Trim());
                    if (mainLotSize <= 0) mainLotSize = 1;

                    dro["mqty"] = drc["ibqty"].ToString();
                    dro["lotsize"] = mainLotSize;

                    dro["ibqty"] = makeDouble(drc["ibqty"].ToString()) / mainLotSize;
                    dro["ibcode"] = drc["ibcode"].ToString().Trim();
                    dro["irate"] = drc["itrate"].ToString().Trim();

                    dro["gross_wt"] = drc["ibdiepc"].ToString().Trim();  // shivam added
                    dro["net_wt"] = drc["sub_issue_no"].ToString().Trim();  // shivam added
                    dro["assembly_iden"] = "*";  // shivam added

                    dro["val"] = "0";
                    mdt1.Rows.Add(dro);
                }
                int i0 = 1; v = 0;
                for (int i = v; i < mdt1.Rows.Count; i++)
                {
                    //vipin
                    if (vdt.Rows.Count <= 0) break;
                    DataView vdview = new DataView(dt3, "icode='" + mdt1.Rows[i]["ibcode"] + "'", "icode", DataViewRowState.CurrentRows);
                    if (vdview.Count > 0)
                    {
                        mdt1.Rows[i]["asterisk"] = "*";
                        //DataView vdview1 = new DataView(mdt1, "icode='" + mdt1.Rows[i]["icode"].ToString().Trim() + "' and ibcode='" + mdt1.Rows[i]["ibcode"].ToString().Trim() + "' and ibqty='" + mdt1.Rows[i]["ibqty"] + "'", "ibcode", DataViewRowState.CurrentRows);
                        //if (vdview1.Count <= 0) vdview1 = new DataView(mdt1, "ibcode='" + mdt1.Rows[i]["ibcode"].ToString().Trim() + "'", "ibcode", DataViewRowState.CurrentRows);
                        string ibqt = mdt1.Rows[i]["ibqty"].ToString().Trim();

                        int value = 1;
                        for (int x = 0; x < vdview.Count; x++)
                        {
                            if (mq0 != vdview[x].Row["icode"].ToString().Trim())
                            {
                                DataRow[] value3 = mdt1.Select("IBCODE='" + vdview[x].Row["icode"].ToString().Trim() + "'", "LVL"); //mdt1.Select("IBCODE='" + vdview[x].Row["icode"].ToString().Trim() + "'", "LVL");
                                value = Convert.ToInt32(value3[0]["LVL"].ToString()) + 1;
                                //if (value > 0)
                                //    i0 += 1;
                                //else i0 = Convert.ToInt32(value3[0]["LVL"].ToString()) + 1;
                            }
                            dro = mdt1.NewRow();
                            dro["lvl"] = value; //i0.ToString();
                            dro["asterisk"] = (x == 0 ? "*" : "");
                            dro["icode"] = vdview[x].Row["icode"].ToString().Trim();
                            dro["branchcd"] = vdview[x].Row["branchcd"].ToString().Trim();
                            mq0 = vdview[x].Row["icode"].ToString().Trim();
                            double lotSize = makeDouble(vdview[x].Row["MAIN_ISSUE_NO"].ToString().Trim());
                            if (lotSize <= 0) lotSize = 1;
                            //dro["ibqty"] = (Convert.ToDouble(vdview[x].Row["ibqty"]) * (Convert.ToDouble(vdview1[0].Row["ibqty"]) / lotSize)).ToString();
                            dro["ibqty"] = (Convert.ToDouble(vdview[x].Row["ibqty"]) * (Convert.ToDouble(ibqt) / lotSize)).ToString();

                            dro["mqty"] = Convert.ToDouble(ibqt);
                            dro["lotsize"] = lotSize;

                            dro["ibcode"] = vdview[x].Row["ibcode"].ToString().Trim();
                            //dro["irate"] = vdview[0].Row["bchrate"];
                            dro["irate"] = vdview[x].Row["bchrate"];
                            dro["ibname"] = vdview[x].Row["itemname"];
                            dro["cpartno"] = vdview[x].Row["cpartno"].ToString().Trim();
                            dro["unit"] = vdview[x].Row["Bunit"].ToString().Trim();



                            dro["gross_wt"] = vdview[x].Row["ibdiepc"].ToString().Trim();  // shivam added
                            dro["net_wt"] = vdview[x].Row["sub_issue_no"].ToString().Trim();  // shivam added
                            dro["assembly_iden"] = "*";  // shivam added
                            dro["total_net_wt"] = (Convert.ToDecimal(dro["ibqty"]) * Convert.ToDecimal(dro["net_wt"])).ToString();   // shivam added


                            dro["val"] = "0";
                            if (mdt1.Rows[i]["lvl"].ToString() == "1")
                            {
                                mq7 = "";
                                dro["pcode"] = mdt1.Rows[i]["icode"].ToString().Trim();
                                mq7 = mdt1.Rows[i]["icode"].ToString().Trim();
                            }
                            else dro["pcode"] = mq7;

                            dro["vcode"] = mdt1.Rows[i]["icode"].ToString().Trim();
                            v++;

                            mdt1.Rows.Add(dro);
                        }
                        //vdview1.Dispose();
                    } vdview.Dispose();

                    //mdt1.DefaultView.Sort = "pcode,lvl,icode";
                    //mdt1 = mdt1.DefaultView.ToTable();
                }

                #region
                mdt1.DefaultView.Sort = "pcode,lvl,icode";
                mdt1 = mdt1.DefaultView.ToTable();

                // seeking LC and update value
                string value1 = "";
                for (int i = 0; i < mdt1.Rows.Count; i++)
                {
                    DataView vdview = new DataView(mdt1, "branchcd='" + mdt1.Rows[i]["branchcd"].ToString().Trim() + "' and icode='" + mdt1.Rows[i]["ibcode"] + "'", "icode", DataViewRowState.CurrentRows);
                    if (vdview.Count <= 0)
                    {
                        if (co_cd != "KCLG")
                        {
                            if (val != "29157")
                            {
                                if (dt2.Rows.Count > 0)
                                {
                                    DataView sort_view = new DataView(dt2, "trim(icode)='" + mdt1.Rows[i]["ibcode"].ToString().Trim() + "'", "vdd desc", DataViewRowState.CurrentRows);
                                    if (sort_view.Count > 0) mdt1.Rows[i]["irate"] = sort_view[0].Row["rate"].ToString().Trim();
                                    else
                                    {
                                        sort_view = new DataView(dt2, "trim(icode)='" + mdt1.Rows[i]["ibcode"].ToString().Trim() + "'", "vdd desc", DataViewRowState.CurrentRows);
                                        if (sort_view.Count > 0) mdt1.Rows[i]["irate"] = sort_view[0].Row["rate"].ToString().Trim();
                                    }
                                }
                            }
                        }
                    }
                    else mdt1.Rows[i]["irate"] = "0";
                    vdview.Dispose();


                    string fl1 = "";
                    string fl2 = "";
                    fl1 = mdt1.Rows[i]["ibqty"].ToString();
                    fl2 = mdt1.Rows[i]["irate"].ToString();
                    mdt1.Rows[i]["val"] = makeDouble(fl1) * makeDouble(fl2);

                    mdt1.Rows[i]["val"] = Convert.ToDouble(makeDouble(mdt1.Rows[i]["ibqty"].ToString()) * makeDouble(mdt1.Rows[i]["irate"].ToString()));

                    double dvl = 0;
                }
                #endregion

                mq0 = "0";
                mq7 = "0";

                //vdview.Dispose();

                db6 = 0;
                db5 = 0;
                double mul_fact = 0;


                for (int f = 0; f < mdt1.Rows.Count; f++)
                {
                    mdt.ImportRow(mdt1.Rows[f]);
                }

                mdt1.Dispose();

                // mdt is table which is haviareel_jccheckng Bom in Expended Form
                //dro1 = fmdt.NewRow();
                //dro1["icode"] = dt_dist_row["icode"].ToString().Trim();
                //dro1["val"] = mq0;
                //fmdt.Rows.Add(dro1);
            }


            List<BOMlist> mylist = new List<BOMlist>();
            try
            {
                DataTable dt = new DataTable();
                dt = mdt;
                mylist = (from DataRow row in dt.Rows
                          select new BOMlist()
                        {
                            branchcd = row["branchcd"].ToString(),
                            lvl = row["lvl"].ToString(),
                            asterisk = row["asterisk"].ToString(),
                            assembly_iden = row["asterisk"].ToString(),
                            icode = row["icode"].ToString(),
                            pcode = row["pcode"].ToString(),
                            vcode = row["vcode"].ToString(),
                            mqty = row["mqty"].ToString(),
                            lotsize = row["lotsize"].ToString(),
                            ibqty = row["ibqty"].ToString(),
                            ibcode = row["ibcode"].ToString(),
                            irate = row["irate"].ToString(),
                            val = row["val"].ToString(),
                            iname = row["iname"].ToString(),
                            pcpartno = row["pcpartno"].ToString(),
                            ibname = row["ibname"].ToString(),
                            cpartno = row["cpartno"].ToString(),
                            unit = row["unit"].ToString(),
                            jr = row["jr"].ToString(),

                            gross_wt = row["gross_wt"].ToString(),
                            net_wt = row["net_wt"].ToString(),
                            total_net_wt = row["total_net_wt"].ToString(),
                        }).ToList();
            }
            catch (Exception e)
            {

                mylist.Add(new BOMlist { branchcd = e.Message.ToString(), lvl = "-", icode = "-", pcode = "-", vcode = "-", ibqty = "-", ibcode = "-", irate = "-", val = "-", iname = "-", pcpartno = "-", cpartno = "-", ibname = "-", jr = "-", unit = "-" });
            }

            return mylist;
        }

        public List<Team> bom_updated(Team team)
        {
            List<Team> list = new List<Team>();

            DataTable dtBomEdited = new DataTable();
            string cocd = team.col1;
            string fromDt = team.col4;
            string toDt = team.col5;

            DataTable dttoRet = new System.Data.DataTable();
            dttoRet.Columns.Add("Doc_NO");
            dttoRet.Columns.Add("Doc_dt");
            dttoRet.Columns.Add("ErpCode");
            dttoRet.Columns.Add("ProductName");
            dttoRet.Columns.Add("Edit_Dtl");
            dttoRet.Columns.Add("UOM");
            DataRow drtoRet = null;

            dtBomEdited = getdata(cocd, "", "SELECT DISTINCT a.vchnum,to_Char(a.vchdate,'dd/mm/yyyy') as vchdate,a.ICODE,b.iname,b.cpartno,b.unit,a.edt_by,a.edt_dt,a.eNt_by,a.eNt_dt FROM ITEMOSP a,item b WHERE trim(a.icodE)=trim(B.icode) and a.BRANCHCD!='DD' AND TRIM(NVL(a.EDT_BY,'-'))!='-' AND a.EDT_DT BETWEEN TO_DATE('" + fromDt + "','DD/MM/YYYY') AND TO_DATE('" + toDt + "','DD/MM/YYYY')   union all SELECT DISTINCT a.vchnum,to_Char(a.vchdate,'dd/mm/yyyy') as vchdate,a.ICODE,b.iname,b.cpartno,b.unit,a.edt_by,a.edt_dt,a.eNt_by,a.eNt_dt FROM ITEMOSP a,item b WHERE trim(a.icodE)=trim(B.icode) and a.BRANCHCD!='DD' AND TRIM(NVL(a.EDT_BY,'-'))='-' AND a.ENT_DT BETWEEN TO_DATE('" + fromDt + "','DD/MM/YYYY') AND TO_DATE('" + toDt + "','DD/MM/YYYY')");
            for (int i = 0; i < dtBomEdited.Rows.Count; i++)
            {
                DataView dv1;
                dv1 = new DataView(dttoRet, "ERPCODE='" + dtBomEdited.Rows[i]["ICODE"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                if (dv1.Count <= 0)
                {
                    drtoRet = dttoRet.NewRow();
                    drtoRet["Doc_no"] = dtBomEdited.Rows[i]["VCHNUM"].ToString().Trim();
                    drtoRet["Doc_DT"] = dtBomEdited.Rows[i]["VCHDATE"].ToString().Trim();
                    drtoRet["ErpCode"] = dtBomEdited.Rows[i]["icode"].ToString().Trim();
                    drtoRet["ProductName"] = dtBomEdited.Rows[i]["iname"].ToString().Trim();
                    drtoRet["Edit_Dtl"] = (dtBomEdited.Rows[i]["edt_by"].ToString().Trim() != "-" ? "Edit By : " + dtBomEdited.Rows[i]["edt_by"].ToString().Trim() + ", Dt : " + dtBomEdited.Rows[i]["edt_dt"].ToString().Trim() : "Ent By : " + dtBomEdited.Rows[i]["ent_by"].ToString().Trim() + ", Dt : " + dtBomEdited.Rows[i]["ent_dt"].ToString().Trim());
                    dttoRet.Rows.Add(drtoRet);
                    getBomDtl(dttoRet, cocd, dtBomEdited.Rows[i]["ICODE"].ToString().Trim());
                }
            }

            if (dttoRet.Rows.Count > 0)
            {
                list = (from DataRow row in dttoRet.Rows
                        select new Team()
                        {
                            col1 = row["Doc_no"].ToString() + " - Dt : " + row["Doc_dt"].ToString(),
                            col2 = row["ErpCode"].ToString(),
                            col3 = row["ProductName"].ToString(),
                            col4 = row["Edit_Dtl"].ToString(),
                            col5 = "From " + fromDt + " to " + toDt
                        }).ToList();
            }
            else
            {
                list.Add(new Team { col1 = "No Edited BOM Found !!", col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            return list;
        }
        void getBomDtl(DataTable dttoRet, string cocd, string ibcode)
        {
            DataTable dtx = new System.Data.DataTable();
            dtx = getdata(cocd, "", "SELECT DISTINCT a.vchnum,TO_CHAR(a.vchdate,'DD/MM/YYYY') AS VCHDATE,a.icode as pcode,c.iname as pname,a.edt_by,a.edt_Dt,a.ent_by,a.ent_dt FROM ITEMOSP a,item c WHERE trim(a.icode)=trim(c.icode) and a.BRANCHCD!='DD' AND TRIM(A.ibcode)='" + ibcode + "'  ORDER BY a.ICODE ");
            if (dtx.Rows.Count > 0)
            {
                DataRow drtoRet = null;
                for (int x = 0; x < dtx.Rows.Count; x++)
                {
                    DataView dv1;
                    dv1 = new DataView(dttoRet, "ERPCODE='" + dtx.Rows[x]["PCODE"].ToString().Trim() + "'", "", DataViewRowState.CurrentRows);
                    if (dv1.Count <= 0)
                    {
                        drtoRet = dttoRet.NewRow();
                        drtoRet["Doc_no"] = dtx.Rows[x]["VCHNUM"].ToString().Trim();
                        drtoRet["Doc_DT"] = dtx.Rows[x]["VCHDATE"].ToString().Trim();
                        drtoRet["ErpCode"] = dtx.Rows[x]["PCODE"].ToString().Trim();
                        drtoRet["ProductName"] = dtx.Rows[x]["PNAME"].ToString().Trim();
                        drtoRet["Edit_Dtl"] = "Edit By : " + dtx.Rows[x]["edt_by"].ToString().Trim() + ", Dt : " + dtx.Rows[x]["edt_dt"].ToString().Trim();
                        dttoRet.Rows.Add(drtoRet);

                        getBomDtl(dttoRet, cocd, dtx.Rows[x]["PCODE"].ToString().Trim());
                    }
                }
            }
        }

        //public List<Team6> comman_method(Team6 team6)
        //{
        //    string xreelno = "select max(kclreelno) as reelno from ztemp_shiv"; 
        //    int row_count = 0;
        //    xreelno = fn_seek_iname(team6.col1, "", xreelno, "reelno");

        //    string query = "select a.* from (select trim(branchcd)||trim(type)||trim(vchnum)||to_char(vchdate, 'dd/mm/yyyy') as dtl from reelvch where type like '0%' and vchdate >= to_date('01/04/2022', 'dd/mm/yyyy')  having reelwout = 0 )a order by a.dtl";
        //    DataTable dt_query = getdata(team6.col1, co_cd, query);
        //    foreach(DataRow dtl in dt_query.Rows)
        //    {
        //        query = "update reelvch set kclreelno='" + xreelno.ToString() + "' where trim(branchcd)||trim(type)||trim(vchnum)||to_char(vchdate, 'dd/mm/yyyy')='"+dtl["dtl"].ToString().Trim()+"'";
        //        string  msg = execute_cmd1(team6.col1, query);
        //        row_count++;

        //        xreelno = next_no(team6.col1, "00", "-", "select max(kclreelno) as reelno from ztemp_shiv", 8, "reelno");

        //        query = "insert into ztemp_shiv values('"+xreelno+"')";
        //        msg = execute_cmd1(team6.col1, query);

        //    }
        //    List<Team6> list = new List<Team6>();
        //    try
        //    {
        //        list.Add(new Team6
        //        {
        //            col1 = "Record Update : " + row_count.ToString(),
        //            col2 = "-",
        //            col3 = "-",
        //            col4 = "-",
        //            col5 = "-",
        //            col6 = "0",
        //        });
        //    }
        //    catch (Exception e)
        //    {

        //        list.Add(new Team6 { col1 = e.Message.ToString(), col2 = "-", col3 = "-", col4 = "-", col5 = "-", col6 = "-", });
        //    }

        //    return list; 
        //}

        public List<Team6> comman_method(Team6 team6)
        {
            string xvoucher = "select max(xvchnum) as voucher from ztemp_shiv";
            xvoucher = fn_seek_iname(team6.col1, "", xvoucher, "voucher");

            int row_count = 0;
            //91020155   // 16D003
            for (int i = 0; i < 138; i++)
            {
                string query = "insert into SALE (BRANCHCD, type, vchnum, vchdate,acode) values ('01', '65', '" + xvoucher + "', TO_DATE('01/04/2022', 'DD/MM/YYYY') ,'16D003')";
                string msg = execute_cmd1(team6.col1, query);

                query = "insert into ivoucher (ENT_BY, ENT_DT, EDT_BY, EDT_DT, STORE, MORDER, BRANCHCD, type, vchnum, vchdate,acode, icode, IQTYIN) values ('FINTEAM', TO_DATE('01/04/2022', 'DD/MM/YYYY'), '-',TO_DATE('01/04/2022', 'DD/MM/YYYY'), '-', '0000','01', '65', '" + xvoucher + "', TO_DATE('01/04/2022', 'DD/MM/YYYY') ,'16D003', '91020155', '0')";
                msg = execute_cmd1(team6.col1, query);

                xvoucher = next_no(team6.col1, "00", "-", "select max(xvchnum) as voucher from ztemp_shiv", 6, "voucher");
                query = "insert into ztemp_shiv values('" + xvoucher + "')";
                msg = execute_cmd1(team6.col1, query);

                row_count++;
            }

            List<Team6> list = new List<Team6>();
            try
            {
                list.Add(new Team6
                {
                    col1 = "Record Update : " + row_count.ToString(),
                    col2 = "-",
                    col3 = "-",
                    col4 = "-",
                    col5 = "-",
                    col6 = "0",
                });
            }
            catch (Exception e)
            {

                list.Add(new Team6 { col1 = e.Message.ToString(), col2 = "-", col3 = "-", col4 = "-", col5 = "-", col6 = "-", });
            }

            return list;
        }


        //------------------------------------------------
        // Api for Report Level 2 by APP 29/10/2017
        //------------------------------------------------

        public List<Team6> DataListB_api(Team6 team6)
        {
            //-------------------------
            Fn_set_andapp_opts(team6.col1, "N");
            //------------------------

            makeCur(team6.col1.ToUpper());
            List<Team6> list = new List<Team6>();
            string query1, m4, m5, m6, m7, m8, m9, m10, m11, m12, m1, m2, m3, frm_cDt1, frm_cDt2;
            string xprdRange = "";
            string mfld;
            string mq2 = "";
            mq2 = fn_seek_iname(team6.col1, "", "Select to_char((LAST_DAY(ADD_MONTHS(to_DaTE(sysdate),-0))),'dd/mm/yyyy') AS xdt2 from dual", "xdt2");

            string mydate = DateTime.Now.ToString("dd/MM/yyyy");

            string mycocd = team6.col1.ToUpper().Trim();
            if (team6.col1.ToUpper().Trim() == "MCPL2" || team6.col1.ToUpper().Trim() == "MCPL4") mycocd = "MCPL";
            frm_cDt1 = fn_seek_iname(team6.col1, "", "Select to_Char(fmdate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%' and FMDATE<=TO_DATE('" + mydate + "','DD/MM/YYYY') AND TODATE>=TO_DATE('" + mydate + "','DD/MM/YYYY') order by fmdate desc", "fmdt");
            frm_cDt2 = fn_seek_iname(team6.col1, "", "Select to_Char(todate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%' and to_CHAR(FMDATE,'DD/MM/YYYY')='" + frm_cDt1 + "' order by fmdate desc", "fmdt");

            xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
            xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
            if (team6.col3 != "")
                xprdRange = "between to_datE('" + team6.col3 + "','dd/mm/yyyy') and to_datE('" + team6.col4 + "','dd/mm/yyyy')";
            string year1 = frm_cDt1.Substring(6, 4);
            branchwise(team6.col1, "", team6.col5);

            m4 = Convert.ToString(year1).Trim() + "04";
            m5 = Convert.ToString(year1).Trim() + "05";
            m6 = Convert.ToString(year1).Trim() + "06";
            m7 = Convert.ToString(year1).Trim() + "07";
            m8 = Convert.ToString(year1).Trim() + "08";
            m9 = Convert.ToString(year1).Trim() + "09";
            m10 = Convert.ToString(year1).Trim() + "10";
            m11 = Convert.ToString(year1).Trim() + "11";
            m12 = Convert.ToString(year1).Trim() + "12";
            m1 = Convert.ToString(Convert.ToDecimal(year1) + 1).Trim() + "01";
            m2 = Convert.ToString(Convert.ToDecimal(year1) + 1).Trim() + "02";
            m3 = Convert.ToString(Convert.ToDecimal(year1) + 1).Trim() + "03";

            switch (team6.col2)
            {
                case "EP101":
                    mq = "select col1,col2,col3,col4,col5,'DataListC_api' as col6 from (Select 'Customer,Dated,Basic_Sale" + home_div_iden + ",Gross_Sale" + home_div_iden + ",Taxes" + home_div_iden + "' as col1,trim(b.aname)||'!~!~!'||to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||round(sum(a.amt_sale)/" + home_divider + ",2)||'!~!~!'||round(sum(a.bill_tot)/" + home_divider + ",2)||'!~!~!'||round((sum(a.amt_exc)+sum(a.rvalue))/" + home_divider + ",2)  as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||trim(A.acode)||a.branchcd as col5 from sale a, famst b where trim(A.acode)=trim(B.acode) and a." + branch_cd + " and a.type like '4%' and a.type!='47' and substr(a.acode,1,2)!='02' and a.vchdate " + xprdRange + " and to_char(a.vchdate,'yyyymmdd')||a.branchcd ='" + team6.col5 + "' group by trim(b.aname),trim(A.mo_vehi),trim(A.mode_tpt),to_char(a.vchdate,'dd/mm/yyyy'),to_char(a.vchdate,'yyyymmdd')||trim(A.acode)||a.branchcd order by trim(b.aname) )  ";
                    break;
                case "EP102":
                    mq = "select col1,col2,col3,col4,col5,'DataListC_api' as col6 from (Select 'Customer,Dated,Collection" + home_div_iden + "' as col1,trim(b.aname)||'!~!~!'||to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||round(sum(a.cramt-a.dramt)/" + home_divider + ",2)  as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||trim(A.acode)||a.branchcd as col5 from voucher a, famst b where trim(A.acode)=trim(B.acode) and a." + branch_cd + " and a.type like '1%' and substr(a.acode,1,2)='16' and a.vchdate " + xprdRange + " and to_char(a.vchdate,'yyyymmdd')||a.branchcd ='" + team6.col5 + "' group by trim(b.aname),to_char(a.vchdate,'dd/mm/yyyy'),to_char(a.vchdate,'yyyymmdd')||trim(A.acode)||a.branchcd order by trim(b.aname) )  ";
                    break;
                case "EP103":
                    mq = "select col1,col2,col3,col4,col5,'DataListC_api' as col6 from (Select 'Supplier,Dated,Payments" + home_div_iden + "' as col1,trim(b.aname)||'!~!~!'||to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||round(sum(a.dramt-a.cramt)/" + home_divider + ",2)  as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||trim(A.acode)||a.branchcd as col5 from voucher a, famst b where trim(A.acode)=trim(B.acode) and a." + branch_cd + " and a.type like '2%' and substr(a.acode,1,2) in ('02','05','06') and a.vchdate " + xprdRange + " and to_char(a.vchdate,'yyyymmdd')||a.branchcd ='" + team6.col5 + "' group by trim(b.aname),to_char(a.vchdate,'dd/mm/yyyy'),to_char(a.vchdate,'yyyymmdd')||trim(A.acode)||a.branchcd order by trim(b.aname) )  ";
                    break;
                case "EP104":
                    mq = "select col1,col2,col3,col4,col5,'DataListC_api' as col6 from (Select 'Supplier,Dated,Inward.Amt" + home_div_iden + "' as col1,trim(b.aname)||'!~!~!'||to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||round(sum(a.bill_tot)/" + home_divider + ",2)  as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||trim(A.acode)||a.branchcd as col5 from ivchctrl a, famst b where trim(A.acode)=trim(B.acode) and a." + branch_cd + " and a.type like '0%' and a.type!='04' and a.vchdate " + xprdRange + " and to_char(a.vchdate,'yyyymmdd')||a.branchcd ='" + team6.col5 + "' group by trim(b.aname),to_char(a.vchdate,'dd/mm/yyyy'),to_char(a.vchdate,'yyyymmdd')||trim(A.acode)||a.branchcd order by trim(b.aname) )  ";
                    break;

                //case "EP401*":
                //    mfld = "round(sum(a.Dramt-a.cramt)/" + home_divider + ")";
                //    query1 = "Select  trim(b.Aname) as Account,substr(a.acode,1,2) as grp,decode(to_chaR(vchdate,'yyyymm')," + m4 + "," + mfld + ",0) as April,decode(to_chaR(vchdate,'yyyymm')," + m5 + "," + mfld + ",0) as May,decode(to_chaR(vchdate,'yyyymm')," + m6 + "," + mfld + ",0) as June,decode(to_chaR(vchdate,'yyyymm')," + m7 + "," + mfld + ",0) as July,decode(to_chaR(vchdate,'yyyymm')," + m8 + "," + mfld + ",0) as August,decode(to_chaR(vchdate,'yyyymm')," + m9 + "," + mfld + ",0) as Sept,decode(to_chaR(vchdate,'yyyymm')," + m10 + "," + mfld + ",0) as Oct,decode(to_chaR(vchdate,'yyyymm')," + m11 + "," + mfld + ",0) as Nov,decode(to_chaR(vchdate,'yyyymm')," + m12 + "," + mfld + ",0) as Dec ";
                //    query1 = query1 + " ,decode(to_chaR(vchdate,'yyyymm')," + m1 + "," + mfld + ",0) as Jan,decode(to_chaR(vchdate,'yyyymm')," + m2 + "," + mfld + ",0) as Feb,decode(to_chaR(vchdate,'yyyymm')," + m3 + "," + mfld + ",0) as Mar,a.acode from voucher a left outer join famst b on  TRIM(A.ACODE)=TRIM(b.acode) where a." + branch_cd + " and a.vchdate " + xprdRange + " and substr(a.acode,1,2)='16' and a.type like '4%' group by a.acode,trim(b.aname),to_char(vchdate,'yyyymm'),substr(a.acode,1,2)  ";
                //    mq = "select * from (select col1,col2,col3,col4,col5,'-' as col6 from  (Select 'Customer,Total,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec,Jan,Feb,Mar,Code' as col1,a.Account||'!~!~!'||to_char(sum(a.April)+sum(a.may)+sum(a.june)+sum(a.july)+sum(a.August)+sum(a.sept)+sum(a.oct)+sum(a.nov)+sum(a.dec)+sum(a.jan)+sum(a.feb)+sum(a.mar),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.April),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.May),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.June),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.July),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.August),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Sept),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.oct),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Nov),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Dec),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Jan),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Feb),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Mar),'" + numbr_fmt + "') as col2,'-' as col3,sum(a.April)+sum(a.may)+sum(a.june)+sum(a.july)+sum(a.August)+sum(a.sept)+sum(a.oct)+sum(a.nov)+sum(a.dec)+sum(a.jan)+sum(a.feb)+sum(a.mar) as col4,'-' as col5 ,'-' as col6 from (" + query1 + ")a group by a.Grp,a.account,a.acode order by col4 desc) order by col4 desc) where rownum<41 ";
                //    break;
                //case "EP402":
                //    mfld = "round(sum(a.iamount)/" + home_divider + ")";
                //    query1 = "Select  trim(b.Iname) as Account,substr(a.Icode,1,2) as grp,decode(to_chaR(vchdate,'yyyymm')," + m4 + "," + mfld + ",0) as April,decode(to_chaR(vchdate,'yyyymm')," + m5 + "," + mfld + ",0) as May,decode(to_chaR(vchdate,'yyyymm')," + m6 + "," + mfld + ",0) as June,decode(to_chaR(vchdate,'yyyymm')," + m7 + "," + mfld + ",0) as July,decode(to_chaR(vchdate,'yyyymm')," + m8 + "," + mfld + ",0) as August,decode(to_chaR(vchdate,'yyyymm')," + m9 + "," + mfld + ",0) as Sept,decode(to_chaR(vchdate,'yyyymm')," + m10 + "," + mfld + ",0) as Oct,decode(to_chaR(vchdate,'yyyymm')," + m11 + "," + mfld + ",0) as Nov,decode(to_chaR(vchdate,'yyyymm')," + m12 + "," + mfld + ",0) as Dec ";
                //    query1 = query1 + " ,decode(to_chaR(vchdate,'yyyymm')," + m1 + "," + mfld + ",0) as Jan,decode(to_chaR(vchdate,'yyyymm')," + m2 + "," + mfld + ",0) as Feb,decode(to_chaR(vchdate,'yyyymm')," + m3 + "," + mfld + ",0) as Mar,a.icode from ivoucher a left outer join item b on  TRIM(A.iCODE)=TRIM(b.icode) where a." + branch_cd + " and a.vchdate " + xprdRange + " and substr(a.acode,1,2) in ('16','02') and a.type like '4%' group by a.icode,trim(b.iname),to_char(vchdate,'yyyymm'),substr(a.acode,1,2)  ";
                //    mq = "select * from (select col1,col2,col3,col4,col5,'-' as col6 from  (Select 'Customer,Total,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec,Jan,Feb,Mar,Code' as col1,a.Account||'!~!~!'||to_char(sum(a.April)+sum(a.may)+sum(a.june)+sum(a.july)+sum(a.August)+sum(a.sept)+sum(a.oct)+sum(a.nov)+sum(a.dec)+sum(a.jan)+sum(a.feb)+sum(a.mar),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.April),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.May),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.June),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.July),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.August),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Sept),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.oct),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Nov),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Dec),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Jan),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Feb),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Mar),'" + numbr_fmt + "') as col2,'-' as col3,sum(a.April)+sum(a.may)+sum(a.june)+sum(a.july)+sum(a.August)+sum(a.sept)+sum(a.oct)+sum(a.nov)+sum(a.dec)+sum(a.jan)+sum(a.feb)+sum(a.mar) as col4,'-' as col5 ,'-' as col6 from (" + query1 + ")a group by a.Grp,a.account,a.icode  ) order by col4 desc) where rownum<41  ";
                //    break;
                //case "EP403":
                //    mfld = "round(sum(a.Dramt-a.cramt)/" + home_divider + ")";
                //    query1 = "Select  trim(b.Aname) as Account,substr(a.acode,1,2) as grp,decode(to_chaR(vchdate,'yyyymm')," + m4 + "," + mfld + ",0) as April,decode(to_chaR(vchdate,'yyyymm')," + m5 + "," + mfld + ",0) as May,decode(to_chaR(vchdate,'yyyymm')," + m6 + "," + mfld + ",0) as June,decode(to_chaR(vchdate,'yyyymm')," + m7 + "," + mfld + ",0) as July,decode(to_chaR(vchdate,'yyyymm')," + m8 + "," + mfld + ",0) as August,decode(to_chaR(vchdate,'yyyymm')," + m9 + "," + mfld + ",0) as Sept,decode(to_chaR(vchdate,'yyyymm')," + m10 + "," + mfld + ",0) as Oct,decode(to_chaR(vchdate,'yyyymm')," + m11 + "," + mfld + ",0) as Nov,decode(to_chaR(vchdate,'yyyymm')," + m12 + "," + mfld + ",0) as Dec ";
                //    query1 = query1 + " ,decode(to_chaR(vchdate,'yyyymm')," + m1 + "," + mfld + ",0) as Jan,decode(to_chaR(vchdate,'yyyymm')," + m2 + "," + mfld + ",0) as Feb,decode(to_chaR(vchdate,'yyyymm')," + m3 + "," + mfld + ",0) as Mar,a.acode from voucher a left outer join famst b on  TRIM(A.ACODE)=TRIM(b.acode) where a." + branch_cd + " and a.vchdate " + xprdRange + " and substr(a.acode,1,2)>='30' group by a.acode,trim(b.aname),to_char(vchdate,'yyyymm'),substr(a.acode,1,2)  ";
                //    mq = "select * from (select col1,col2,col3,col4,col5,'-' as col6 from  (Select 'Expense_Head,Total,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec,Jan,Feb,Mar,Code' as col1,a.Account||'!~!~!'||to_char(sum(a.April)+sum(a.may)+sum(a.june)+sum(a.july)+sum(a.August)+sum(a.sept)+sum(a.oct)+sum(a.nov)+sum(a.dec)+sum(a.jan)+sum(a.feb)+sum(a.mar),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.April),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.May),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.June),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.July),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.August),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Sept),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.oct),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Nov),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Dec),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Jan),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Feb),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Mar),'" + numbr_fmt + "') as col2,'-' as col3,sum(a.April)+sum(a.may)+sum(a.june)+sum(a.july)+sum(a.August)+sum(a.sept)+sum(a.oct)+sum(a.nov)+sum(a.dec)+sum(a.jan)+sum(a.feb)+sum(a.mar) as col4,'-' as col5 ,'-' as col6 from (" + query1 + ")a group by a.Grp,a.account,a.acode order by col4 desc) order by col4 desc) where rownum<101 ";
                //    break;
                //case "EP404":
                //    mfld = "round(sum(a.bill_tot)/" + home_divider + ")";
                //    query1 = "Select  trim(b.Aname) as Account,substr(a.acode,1,2) as grp,decode(to_chaR(vchdate,'yyyymm')," + m4 + "," + mfld + ",0) as April,decode(to_chaR(vchdate,'yyyymm')," + m5 + "," + mfld + ",0) as May,decode(to_chaR(vchdate,'yyyymm')," + m6 + "," + mfld + ",0) as June,decode(to_chaR(vchdate,'yyyymm')," + m7 + "," + mfld + ",0) as July,decode(to_chaR(vchdate,'yyyymm')," + m8 + "," + mfld + ",0) as August,decode(to_chaR(vchdate,'yyyymm')," + m9 + "," + mfld + ",0) as Sept,decode(to_chaR(vchdate,'yyyymm')," + m10 + "," + mfld + ",0) as Oct,decode(to_chaR(vchdate,'yyyymm')," + m11 + "," + mfld + ",0) as Nov,decode(to_chaR(vchdate,'yyyymm')," + m12 + "," + mfld + ",0) as Dec ";
                //    query1 = query1 + " ,decode(to_chaR(vchdate,'yyyymm')," + m1 + "," + mfld + ",0) as Jan,decode(to_chaR(vchdate,'yyyymm')," + m2 + "," + mfld + ",0) as Feb,decode(to_chaR(vchdate,'yyyymm')," + m3 + "," + mfld + ",0) as Mar,a.acode from ivchctrl a left outer join famst b on  TRIM(A.ACODE)=TRIM(b.acode) where a." + branch_cd + " and a.vchdate " + xprdRange + " and substr(a.type,1,2)='04' group by a.acode,trim(b.aname),to_char(vchdate,'yyyymm'),substr(a.acode,1,2)  ";
                //    mq = "select * from (select col1,col2,col3,col4,col5,'-' as col6 from  (Select 'Sales_Returns,Total,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec,Jan,Feb,Mar,Code' as col1,a.Account||'!~!~!'||to_char(sum(a.April)+sum(a.may)+sum(a.june)+sum(a.july)+sum(a.August)+sum(a.sept)+sum(a.oct)+sum(a.nov)+sum(a.dec)+sum(a.jan)+sum(a.feb)+sum(a.mar),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.April),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.May),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.June),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.July),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.August),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Sept),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.oct),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Nov),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Dec),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Jan),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Feb),'" + numbr_fmt + "')||'!~!~!'||to_char(sum(a.Mar),'" + numbr_fmt + "') as col2,'-' as col3,sum(a.April)+sum(a.may)+sum(a.june)+sum(a.july)+sum(a.August)+sum(a.sept)+sum(a.oct)+sum(a.nov)+sum(a.dec)+sum(a.jan)+sum(a.feb)+sum(a.mar) as col4,'-' as col5 ,'-' as col6 from (" + query1 + ")a group by a.Grp,a.account,a.acode order by col4 desc) order by col4 desc) where rownum<101 ";

                //    break;

            }

            try
            {
                DataTable dt = new DataTable();
                if (mq == "") list.Add(new Team6 { col1 = "Did not work!", col2 = "-", col3 = "-", col4 = "-", col5 = "-", col6 = "-", });
                else
                {
                    dt = getdata(team6.col1, "-", mq);
                    list = (from DataRow row in dt.Rows
                            select new Team6()
                            {
                                col1 = row["col1"].ToString(),
                                col2 = row["col2"].ToString(),
                                col3 = row["col3"].ToString(),
                                col4 = row["col4"].ToString(),
                                col5 = row["col5"].ToString(),
                                col6 = row["col6"].ToString(),
                            }).ToList();
                }
            }
            catch (Exception e)
            {

                list.Add(new Team6 { col1 = e.Message.ToString(), col2 = "-", col3 = "-", col4 = "-", col5 = "-", col6 = "-", });
            }

            return list;
        }

        //------------------------------------------------
        // Api for Report Level 3 by APP 29/10/2017
        //------------------------------------------------

        public List<Team6> DataListC_api(Team6 team6)
        {
            //-------------------------
            Fn_set_andapp_opts(team6.col1, "N");
            //------------------------

            makeCur(team6.col1.ToUpper());
            List<Team6> list = new List<Team6>();

            string query1, m4, m5, m6, m7, m8, m9, m10, m11, m12, m1, m2, m3, frm_cDt1, frm_cDt2;
            string xprdRange = "";
            string mfld;
            string mq2 = "";
            makeCur(team6.col1.ToUpper());
            mq2 = fn_seek_iname(team6.col1, "", "Select to_char((LAST_DAY(ADD_MONTHS(to_DaTE(sysdate),-0))),'dd/mm/yyyy') AS xdt2 from dual", "xdt2");

            string mydate = DateTime.Now.ToString("dd/MM/yyyy");

            string mycocd = team6.col1.ToUpper().Trim();
            if (team6.col1.ToUpper().Trim() == "MCPL2" || team6.col1.ToUpper().Trim() == "MCPL4") mycocd = "MCPL";

            frm_cDt1 = fn_seek_iname(team6.col1, "", "Select to_Char(fmdate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%' and FMDATE<=TO_DATE('" + mydate + "','DD/MM/YYYY') AND TODATE>=TO_DATE('" + mydate + "','DD/MM/YYYY') order by fmdate desc", "fmdt");
            frm_cDt2 = fn_seek_iname(team6.col1, "", "Select to_Char(todate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%' and to_CHAR(FMDATE,'DD/MM/YYYY')='" + frm_cDt1 + "' order by fmdate desc", "fmdt");
            xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
            if (team6.col3 != "")
                xprdRange = "between to_datE('" + team6.col3 + "','dd/mm/yyyy') and to_datE('" + team6.col4 + "','dd/mm/yyyy')";

            switch (team6.col2)
            {
                case "EP101":
                    mq = "select col1,col2,col3,col4,col5,'-' as col6 from (Select 'Item_Name,Part_No,Basic_Sale" + home_div_iden + ",Quantity,Dated' as col1,trim(a.purpose)||'!~!~!'||trim(a.exc_57f4)||'!~!~!'||round(sum(a.iamount)/" + home_divider + ",2)||'!~!~!'||round(sum(a.iqtyout),3)||'!~!~!'||to_char(a.vchdate,'dd/mm/yyyy')  as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from ivoucher a where a." + branch_cd + " and a.type like '4%' and a.type!='47' and substr(a.acode,1,2)!='02' and a.vchdate " + xprdRange + " and to_char(a.vchdate,'yyyymmdd')||trim(a.acode)||a.branchcd ='" + team6.col5 + "' and a.irate>0 group by trim(a.purpose),trim(a.exc_57f4),to_char(a.vchdate,'dd/mm/yyyy'),to_char(a.vchdate,'yyyymmdd')||a.branchcd order by to_char(a.vchdate,'yyyymmdd')||a.branchcd desc)  ";
                    break;
                case "EP102":
                    mq = "select col1,col2,col3,col4,col5,'-' as col6 from (Select 'Vch_no,Dated,Collection" + home_div_iden + ",Chq_no,Ent_by' as col1,trim(a.vchnum)||'!~!~!'||to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||round(sum(a.cramt-a.dramt)/" + home_divider + ",2)||'!~!~!'||trim(A.refnum)||'!~!~!'||trim(a.ent_by)  as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from voucher a where a." + branch_cd + " and a.type like '1%' and substr(a.acode,1,2)='16' and a.vchdate " + xprdRange + " and to_char(a.vchdate,'yyyymmdd')||trim(a.acode)||a.branchcd ='" + team6.col5 + "' group by trim(a.vchnum),trim(a.ent_by),trim(a.refnum),to_char(a.vchdate,'dd/mm/yyyy'),to_char(a.vchdate,'yyyymmdd')||a.branchcd order by to_char(a.vchdate,'yyyymmdd')||a.branchcd desc) ";
                    break;
                case "EP103":
                    mq = "select col1,col2,col3,col4,col5,'-' as col6 from (Select 'Vch_no,Dated,Payment" + home_div_iden + ",Chq_no,Ent_by' as col1,trim(a.vchnum)||'!~!~!'||to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||round(sum(a.dramt-a.cramt)/" + home_divider + ",2)||'!~!~!'||trim(A.refnum)||'!~!~!'||trim(a.ent_by)  as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from voucher a where a." + branch_cd + " and a.type like '2%' and substr(a.acode,1,2) in ('02','05','06') and a.vchdate " + xprdRange + " and to_char(a.vchdate,'yyyymmdd')||trim(a.acode)||a.branchcd ='" + team6.col5 + "' group by trim(a.vchnum),trim(a.ent_by),trim(a.refnum),to_char(a.vchdate,'dd/mm/yyyy'),to_char(a.vchdate,'yyyymmdd')||a.branchcd order by to_char(a.vchdate,'yyyymmdd')||a.branchcd desc) ";
                    break;
                case "EP104":
                    mq = "select col1,col2,col3,col4,col5,'-' as col6 from (Select 'Item_Name,Inward.Qty,Unit,Rate,Inw_No' as col1,trim(b.Iname)||'!~!~!'||sum(a.iqtyin)||'!~!~!'||trim(b.Unit)||'!~!~!'||max(a.irate)||'!~!~!'||trim(a.vchnum)  as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from ivoucher a,item b where trim(a.icode)=trim(B.icode) and a." + branch_cd + " and a.type like '0%' and a.vchdate " + xprdRange + " and to_char(a.vchdate,'yyyymmdd')||trim(a.acode)||a.branchcd ='" + team6.col5 + "' group by b.iname,b.unit,trim(a.vchnum),to_char(a.vchdate,'dd/mm/yyyy'),to_char(a.vchdate,'yyyymmdd')||a.branchcd order by to_char(a.vchdate,'yyyymmdd')||a.branchcd desc) ";
                    break;
            }

            try
            {
                DataTable dt = new DataTable();
                if (mq == "") list.Add(new Team6 { col1 = "Did not work!", col2 = "-", col3 = "-", col4 = "-", col5 = "-", col6 = "-", });
                else
                {
                    dt = getdata(team6.col1, "-", mq);

                    list = (from DataRow row in dt.Rows
                            select new Team6()
                            {
                                col1 = row["col1"].ToString(),
                                col2 = row["col2"].ToString(),
                                col3 = row["col3"].ToString(),
                                col4 = row["col4"].ToString(),
                                col5 = row["col5"].ToString(),
                                col6 = row["col6"].ToString(),
                            }).ToList();
                }
            }
            catch (Exception e)
            {

                list.Add(new Team6 { col1 = e.Message.ToString(), col2 = "-", col3 = "-", col4 = "-", col5 = "-", col6 = "-", });
            }

            return list;
        }

        //------------------------------------------------
        // Api for Sending Data For Graph by APP 29/10/2017
        //------------------------------------------------

        public List<Team> DataGraph_api(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            //------------------------

            List<Team> list = new List<Team>();
            makeCur(team.col1.ToUpper());
            string query1, m4, m5, m6, m7, m8, m9, m10, m11, m12, m1, m2, m3, frm_cDt1, frm_cDt2;
            string xprdRange = "";
            string mfld;
            string mq2 = "";
            makeCur(team.col1.ToUpper());
            mq2 = fn_seek_iname(team.col1, "", "Select to_char((LAST_DAY(ADD_MONTHS(to_DaTE(sysdate),-0))),'dd/mm/yyyy') AS xdt2 from dual", "xdt2");

            string mydate = DateTime.Now.ToString("dd/MM/yyyy");

            string mycocd = team.col1.ToUpper().Trim();
            if (team.col1.ToUpper().Trim() == "MCPL2" || team.col1.ToUpper().Trim() == "MCPL4") mycocd = "MCPL";

            frm_cDt1 = fn_seek_iname(team.col1, "", "Select to_Char(fmdate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%' and FMDATE<=TO_DATE('" + mydate + "','DD/MM/YYYY') AND TODATE>=TO_DATE('" + mydate + "','DD/MM/YYYY') order by fmdate desc", "fmdt");
            frm_cDt2 = fn_seek_iname(team.col1, "", "Select to_Char(todate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%' and to_CHAR(FMDATE,'DD/MM/YYYY')='" + frm_cDt1 + "' order by fmdate desc", "fmdt");
            xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
            if (team.col3 != "")
                xprdRange = "between to_datE('" + team.col3 + "','dd/mm/yyyy') and to_datE('" + team.col4 + "','dd/mm/yyyy')";
            switch (team.col2)
            {
                case "EP301":
                    //mq = "select col1,col2,col3,col4,col5 from (Select 'Plant,Month,Basic_Sale"+home_div_iden+"' as col1,b.Name as col2,to_char(a.vchdate,'Mon-yyyy')  as col3,round(sum(a.amt_sale)/"+home_divider+",2)  as col4,'-'  as col5,to_char(a.vchdate,'yyyymm')||a.branchcd from sale a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a." + branch_cd + " and a.type like '4%' and a.type!='47' and a.vchdate between to_datE('" + team.col3 + "','dd/mm/yyyy') and to_datE('" + team.col4 + "','dd/mm/yyyy') group by b.Name,to_char(a.vchdate,'Mon-yyyy'),to_char(a.vchdate,'yyyymm')||a.branchcd order by to_char(a.vchdate,'yyyymm')||a.branchcd) ";
                    mq = "select col1,col2,col3,col4,col5 from (Select 'Plant,Month,Basic_Sale" + home_div_iden + "' as col1,'-' as col2,to_char(a.vchdate,'Mon-yyyy')  as col3,round(sum(a.amt_sale)/" + home_divider + ",2) as col4,'-'  as col5,to_char(a.vchdate,'yyyymm') from sale a where a." + branch_cd + " and a.type like '4%' and a.type!='47' and substr(a.acode,1,2)!='02' and a.vchdate between to_datE('" + team.col3 + "','dd/mm/yyyy') and to_datE('" + team.col4 + "','dd/mm/yyyy') group by to_char(a.vchdate,'Mon-yyyy'),to_char(a.vchdate,'yyyymm')  order by to_char(a.vchdate,'yyyymm')) ";
                    break;
                case "EP302":
                    //mq = "select col1,col2,col3,col4,col5 from (Select 'Plant,Month,Purchase"+home_div_iden+"' as col1,b.Name as col2,to_char(a.vchdate,'Mon-yyyy')  as col3,round(sum(a.amt_sale)/"+home_divider+",2)  as col4,'-'  as col5,to_char(a.vchdate,'yyyymm')||a.branchcd from ivchctrl a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a." + branch_cd + " and a.type like '0%' and a.type<='08' and a.vchdate between to_datE('" + team.col3 + "','dd/mm/yyyy') and to_datE('" + team.col4 + "','dd/mm/yyyy') group by b.Name,to_char(a.vchdate,'Mon-yyyy'),to_char(a.vchdate,'yyyymm')||a.branchcd order by to_char(a.vchdate,'yyyymm')||a.branchcd) ";
                    mq = "select col1,col2,col3,col4,col5 from (Select 'Plant,Month,Purchase" + home_div_iden + "' as col1,'-' as col2,to_char(a.vchdate,'Mon-yyyy')  as col3,round(sum(a.amt_sale)/" + home_divider + ",2)  as col4,'-'  as col5,to_char(a.vchdate,'yyyymm') from ivchctrl a where a." + branch_cd + " and a.type like '0%' and a.type<='08' and a.vchdate between to_datE('" + team.col3 + "','dd/mm/yyyy') and to_datE('" + team.col4 + "','dd/mm/yyyy') group by to_char(a.vchdate,'Mon-yyyy'),to_char(a.vchdate,'yyyymm') order by to_char(a.vchdate,'yyyymm')) ";
                    break;
                case "EP303":
                    //mq = "select col1,col2,col3,col4,col5 from (Select 'Plant,Month,New Orders"+home_div_iden+"' as col1,b.Name as col2,to_char(a.orddt,'Mon-yyyy')  as col3,round(sum(round((a.qtyord*a.irate)*((100-a.cdisc)/100),2))/"+home_divider+",2)  as col4,'-'  as col5,to_char(a.orddt,'yyyymm')||a.branchcd from somas a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a." + branch_cd + " and a.type like '4%' and a.type!='45' and a.orddt between to_datE('" + team.col3 + "','dd/mm/yyyy') and to_datE('" + team.col4 + "','dd/mm/yyyy') group by b.Name,to_char(a.orddt,'Mon-yyyy'),to_char(a.orddt,'yyyymm')||a.branchcd order by to_char(a.orddt,'yyyymm')||a.branchcd) ";
                    mq = "select col1,col2,col3,col4,col5 from (Select 'Plant,Month,New Orders" + home_div_iden + "' as col1,'-' as col2,to_char(a.orddt,'Mon-yyyy')  as col3,round(sum(round((a.qtyord*a.irate)*((100-a.cdisc)/100),2))/" + home_divider + ",2)  as col4,'-'  as col5,to_char(a.orddt,'yyyymm') from somas a where a." + branch_cd + " and a.type like '4%' and a.type!='45' and a.orddt between to_datE('" + team.col3 + "','dd/mm/yyyy') and to_datE('" + team.col4 + "','dd/mm/yyyy') group by to_char(a.orddt,'Mon-yyyy'),to_char(a.orddt,'yyyymm') order by to_char(a.orddt,'yyyymm')) ";
                    break;
            }
            try
            {
                DataTable dt = new DataTable();
                dt = getdata(team.col1, "-", mq);


                list = (from DataRow row in dt.Rows
                        select new Team()
                        {
                            col1 = row["col1"].ToString(),
                            col2 = row["col2"].ToString(),
                            col3 = row["col3"].ToString(),
                            col4 = row["col4"].ToString(),
                            col5 = row["col5"].ToString(),
                        }).ToList();
            }
            catch (Exception e)
            {

                list.Add(new Team { col1 = e.Message.ToString(), col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }

            return list;
        }

        //------------------------------------------------
        // Api for Showing Data For Approval by APP 29/10/2017
        //------------------------------------------------

        public List<Team6> PendAppr_api(Team6 team6)
        {
            //-------------------------
            Fn_set_andapp_opts(team6.col1, "N");
            //------------------------

            string fldfevas = "", work_br = "";
            fldfevas = fn_seek_iname(team6.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team6.col5.ToUpper().Trim() + "'", "fstr");

            work_br = "00";
            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
            }

            //string finsys_webapp = api_paths +":1517/CSS/fin-base";
            string finsys_webapp = api_paths + ":1515//fin-base";
            makeCur(team6.col1.ToUpper());
            //fn_seek_iname(team6.col1, "00", "Select params as fstr from controls where id='X41'", "fstr");
            string serv_DD = fn_seek_iname(team6.col1, "00", "Select to_char(sysdate,'dd') as fstr from dual", "fstr");
            string user_code = fn_seek_iname(team6.col1, "00", "Select userid as fstr from evas where username='" + team6.col5 + "'", "fstr");

            string mydate = DateTime.Now.ToString("dd/MM/yyyy");
            string myear = "";
            string mycocd = team6.col1.ToUpper().Trim();
            if (team6.col1.ToUpper().Trim() == "MCPL2" || team6.col1.ToUpper().Trim() == "MCPL4") mycocd = "MCPL";
            myear = fn_seek_iname(team6.col1, "", "Select to_Char(fmdate,'yyyy') as fmdt from co where code like '" + mycocd + "%' and FMDATE<=TO_DATE('" + mydate + "','DD/MM/YYYY') AND TODATE>=TO_DATE('" + mydate + "','DD/MM/YYYY') order by fmdate desc", "fmdt");
            string co_cdt2 = fn_seek_iname(team6.col1, "", "Select to_Char(todate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%' and FMDATE<=TO_DATE('" + mydate + "','DD/MM/YYYY') AND TODATE<=TO_DATE('" + mydate + "','DD/MM/YYYY') order by fmdate desc", "fmdt");
            string proc_code = "";

            branchwise(team6.col1, "", team6.col5);

            string query1, m4, m5, m6, m7, m8, m9, m10, m11, m12, m1, m2, m3, frm_cDt1, frm_cDt2;
            string xprdRange = "";
            string mfld;
            string mq2 = "";
            makeCur(team6.col1.ToUpper());
            mq2 = fn_seek_iname(team6.col1, "", "Select to_char((LAST_DAY(ADD_MONTHS(to_DaTE(sysdate),-0))),'dd/mm/yyyy') AS xdt2 from dual", "xdt2");

            frm_cDt1 = fn_seek_iname(team6.col1, "", "Select to_Char(fmdate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%' and FMDATE<=TO_DATE('" + mydate + "','DD/MM/YYYY') AND TODATE>=TO_DATE('" + mydate + "','DD/MM/YYYY') order by fmdate desc", "fmdt");
            frm_cDt2 = fn_seek_iname(team6.col1, "", "Select to_Char(todate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%' and to_CHAR(FMDATE,'DD/MM/YYYY')='" + frm_cDt1 + "' order by fmdate desc", "fmdt");
            xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
            if (team6.col3 != "")
                xprdRange = "between to_datE('" + team6.col3 + "','dd/mm/yyyy') and to_datE('" + team6.col4 + "','dd/mm/yyyy')";

            switch (team6.col2)
            {
                case "EPA201":
                case "EP201":
                    mq = "select col1,col2,col3,col4,col5,col6 from (Select 'Plant,Customer,Product,Quantity,Rate,Disc,SO_No,SO_Dt,Delv_dt,Ent_by' as col1,trim(b.Name)||'!~!~!'||trim(C.Aname)||'!~!~!'||trim(d.Iname)||'!~!~!'||a.Qtyord||'!~!~!'||a.Irate||'!~!~!'||a.cdisc||'!~!~!'||a.ordno||'!~!~!'||to_char(a.orddt,'dd/mm/yyyy')||'!~!~!'||to_char(a.cu_chldt,'dd/mm/yyyy')||'!~!~!'||trim(a.ent_by) as Col2,a.branchcd||trim(a.type)||trim(a.ordno)||to_char(a.orddt,'yyyymmdd')||trim(a.icode)||trim(to_chaR(a.srno,'9999')) as col3,to_char(a.orddt,'yyyymmdd')||a.ordno||trim(to_chaR(a.srno,'9999')) as col4,'!~!~!' as col5,'-' as col6 from somas a, type b,famst c , item d where trim(A.acode)=trim(c.acodE) and trim(A.icode)=trim(D.icode) and trim(A.branchcd)=trim(B.type1) and b.id='B' and a." + branch_cd + " and a.type like '4%'  and a.orddt " + xprdRange + " and trim(nvl(a.app_by,'-'))='-' and trim(nvl(a.icat,'-'))<>'Y' ) order by col4";
                    proc_code = "F1005";
                    break;
                case "EPA202":
                case "EP202":
                    branchwise(team6.col1, team6.col5.Trim().ToUpper(), "");
                    string cond = "";
                    string branchCd = "", poType = "";
                    dt1 = new DataTable();
                    dt1 = getdatav(team6.col1, "select prate||'~'||pdisc as col1,allowedbr,potypes from pomst where type='20' and trim(acode)='" + team6.col5 + "'");

                    if (dt1.Rows.Count > 0)
                    {
                        double lowerLimit = makeDouble(dt1.Rows[0]["col1"].ToString().Split('~')[0].ToString());
                        double upperLimit = makeDouble(dt1.Rows[0]["col1"].ToString().Split('~')[1].ToString());
                        cond = " and a.rate_cd between " + lowerLimit + " and " + upperLimit + " ";

                        foreach (string branch in dt1.Rows[0]["allowedbr"].ToString().Trim().Split(';'))
                        {
                            if (branch.ToString().Length > 0)
                                branchCd += ",'" + branch + "'";
                        }
                        branchCd = branchCd.TrimStart(',');
                        string branchcond = "a.branchcd in (" + branchCd + ")";
                        if (branchCd == "'-'" || branchCd == "") branchcond = "a.branchcd not in ('DD','88')";

                        foreach (string povty in dt1.Rows[0]["potypes"].ToString().Trim().Split(';'))
                        {
                            if (povty.ToString().Length > 0)
                                poType += ",'" + povty + "'";
                        }
                        poType = poType.TrimStart(',');

                        string potypecond = "a.type in (" + poType + ")";
                        if (poType == "'-'" || poType == "") potypecond = "a.type like '5%'";
                        // chk_by condition apply for amar - 10/07/2023//
                        if (team6.col1.ToUpper().Trim() == "AMAR")
                        {
                            mq = "select col1,col2,col3,col4,col5,col6 from (Select 'Plant,Supplier,Product,Quantity,Rate,Disc,PO_No,PO_Dt,Delv_dt,Ent_by' as col1,trim(b.Name)||'!~!~!'||trim(C.Aname)||'!~!~!'||trim(d.Iname)||'!~!~!'||a.Qtyord||'!~!~!'||a.Prate||'!~!~!'||a.pdisc||'!~!~!'||a.ordno||'!~!~!'||to_char(a.orddt,'dd/mm/yyyy')||'!~!~!'||trim(a.delv_item)||'!~!~!'||trim(a.ent_by) as Col2,a.branchcd||trim(a.type)||trim(a.ordno)||to_char(a.orddt,'yyyymmdd')||trim(a.icode)||trim(to_chaR(a.srno,'9999')) as col3,to_char(a.orddt,'yyyymmdd')||a.ordno||trim(to_chaR(a.srno,'9999')) as col4,'!~!~!' as col5,'-' as col6 from pomas a, type b,famst c , item d where trim(A.acode)=trim(c.acodE) and trim(A.icode)=trim(D.icode) and trim(A.branchcd)=trim(B.type1) and b.id='B' and " + branchcond + " and " + potypecond + "  and a.orddt " + xprdRange + " and trim(nvl(a.app_by,'-'))='-' and trim(nvl(a.CHK_BY,'-'))!='-' and nvl(a.pflag,0)<>1 " + cond + " ) order by col4";

                        }
                        else
                        {
                            mq = "select col1,col2,col3,col4,col5,col6 from (Select 'Plant,Supplier,Product,Quantity,Rate,Disc,PO_No,PO_Dt,Delv_dt,Ent_by' as col1,trim(b.Name)||'!~!~!'||trim(C.Aname)||'!~!~!'||trim(d.Iname)||'!~!~!'||a.Qtyord||'!~!~!'||a.Prate||'!~!~!'||a.pdisc||'!~!~!'||a.ordno||'!~!~!'||to_char(a.orddt,'dd/mm/yyyy')||'!~!~!'||trim(a.delv_item)||'!~!~!'||trim(a.ent_by) as Col2,a.branchcd||trim(a.type)||trim(a.ordno)||to_char(a.orddt,'yyyymmdd')||trim(a.icode)||trim(to_chaR(a.srno,'9999')) as col3,to_char(a.orddt,'yyyymmdd')||a.ordno||trim(to_chaR(a.srno,'9999')) as col4,'!~!~!' as col5,'-' as col6 from pomas a, type b,famst c , item d where trim(A.acode)=trim(c.acodE) and trim(A.icode)=trim(D.icode) and trim(A.branchcd)=trim(B.type1) and b.id='B' and " + branchcond + " and " + potypecond + "  and a.orddt " + xprdRange + " and trim(nvl(a.app_by,'-'))='-' and nvl(a.pflag,0)<>1 " + cond + " ) order by col4";
                        }

                    }
                    // removing condition of approval level limit -- because it is not working on IOS -- VV 23/05/2020
                    if (team6.col1.Trim() != "SAGM")
                    {
                        cond = "";
                        mq = "select col1,col2,col3,col4,col5,col6 from (Select 'Plant,Supplier,Product,Quantity,Rate,Disc,PO_No,PO_Dt,Delv_dt,Ent_by' as col1,trim(b.Name)||'!~!~!'||trim(C.Aname)||'!~!~!'||trim(d.Iname)||'!~!~!'||a.Qtyord||'!~!~!'||a.Prate||'!~!~!'||a.pdisc||'!~!~!'||a.ordno||'!~!~!'||to_char(a.orddt,'dd/mm/yyyy')||'!~!~!'||trim(a.delv_item)||'!~!~!'||trim(a.ent_by) as Col2,a.branchcd||trim(a.type)||trim(a.ordno)||to_char(a.orddt,'yyyymmdd')||trim(a.icode)||trim(to_chaR(a.srno,'9999')) as col3,to_char(a.orddt,'yyyymmdd')||a.ordno||trim(to_chaR(a.srno,'9999')) as col4,'!~!~!' as col5,'-' as col6 from pomas a, type b,famst c , item d where trim(A.acode)=trim(c.acodE) and trim(A.icode)=trim(D.icode) and trim(A.branchcd)=trim(B.type1) and b.id='B' and a." + branch_cd + " and a.type like '5%' and a.orddt " + xprdRange + " and trim(nvl(a.app_by,'-'))='-' and nvl(a.pflag,0)<>1 " + cond + " ) order by col4";
                    }
                    proc_code = "F1004";
                    break;
                case "EPA203":
                case "EP203":
                    mq = "select col1,col2,col3,col4,col5,col6 from (Select 'Plant,Department,Product,Quantity,Rate,Value,PR_No,PR_Dt,Reqd_dt,Ent_by' as col1,trim(b.Name)||'!~!~!'||trim(a.Bank)||'!~!~!'||trim(d.Iname)||'!~!~!'||a.Qtyord||'!~!~!'||a.Prate||'!~!~!'||(a.qtyord*a.prate)||'!~!~!'||a.ordno||'!~!~!'||to_char(a.orddt,'dd/mm/yyyy')||'!~!~!'||trim(a.delv_term)||'!~!~!'||trim(a.ent_by) as Col2,a.branchcd||trim(a.type)||trim(a.ordno)||to_char(a.orddt,'yyyymmdd')||trim(a.icode)||trim(to_chaR(a.srno,'9999')) as col3,to_char(a.orddt,'yyyymmdd')||a.ordno||trim(to_chaR(a.srno,'9999')) as col4,'!~!~!' as col5,'-' as col6 from pomas a, type b , item d where trim(A.icode)=trim(D.icode) and trim(A.branchcd)=trim(B.type1) and b.id='B' and a." + branch_cd + " and a.type like '60%'  and a.orddt " + xprdRange + " and trim(nvl(a.app_by,'-'))='-' and nvl(a.pflag,0)<>0 ) order by col4";
                    proc_code = "F1003";
                    break;

                case "EP605":

                    mq = "select col1,col2,col3,col4,col5,col6 from (Select 'Plant,Department,Machine,Topic,Comp_No,Comp_Dt,Ent_by' as col1,trim(b.Name)||'!~!~!'||trim(a.deptt_name)||'!~!~!'||trim(a.Mach_name)||'!~!~!'||trim(a.comp_type)||a.vchnum||'!~!~!'||to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||trim(a.ent_by) as Col2,a.branchcd||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'yyyymmdd') as col3,to_char(a.vchdate,'yyyymmdd')||a.vchnum as col4,'!~!~!' as col5,'-' as col6 from wb_maint_comp a, type b  where trim(A.branchcd)=trim(B.type1) and b.id='B' and a." + branch_cd + " and a.type like 'MQ%'  and a.vchdate " + xprdRange + " and a.ent_by='" + team6.col5.Trim().ToUpper() + "' and trim(nvl(a.app_by,'-'))='-'  ) order by col4";
                    proc_code = "F1003";
                    break;

                case "EP921":
                    mq = "select col1,col2,col3,col4,col5,col6 from  (Select 'Req_No,Req_Dt,Leave_From,Leave_Dt,Ent_by' as col1,trim(a.LRQNO)||'!~!~!'||to_char(a.LRQDT,'dd/mm/yyyy')||'!~!~!'||trim(a.LEVFROM)||'!~!~!'||trim(a.LEVUPTO)||'!~!~!'||trim(a.ent_by) as col2,trim(a.branchcd)||trim(a.type)||trim(a.LRQNO)||to_char(a.LRQDT,'yyyymmdd') as col3,'-' as col4,to_char(a.LRQDT,'yyyymmdd')||a.branchcd as col5,'-' as col6 from wb_LEVREQ a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a.branchcd='" + work_br + "' and a.type like 'LR%' and a.LRQDT " + xprdRange + "  and trim(nvl(a.app_by,'-'))='-' and  order by to_char(a.LRQDT,'yyyymmdd')||a.branchcd||a.lrqno desc) ";
                    if (team6.col1 == "MINV")
                    {
                        string emp_Str = "";
                        mq = "select trim(CONTACTNO) as fstr from evas where trim(username)='" + team6.col5.Trim().ToUpper() + "' and NVL(CAN_TNS,'N')='Y'";
                        emp_Str = fn_seek_iname(team6.col1, "", mq, "fstr");

                        mq = "Select branchcd||grade||trim(empcode) as fstr from empmas where substr(trim(nvl(tfr_stat,'-')),1,8)<>'TRANSFER' and length(Trim(nvl(leaving_dt,'-')))<5 and replace(trim(mobile),'-','')='" + emp_Str + "'";
                        emp_Str = fn_seek_iname(team6.col1, "", mq, "fstr");

                        mq = "select col1,col2,col3,col4,col5,col6 from  (Select 'Ent_by,Req_Dt,Leave_From,Leave_Dt,Req_No' as col1,trim(a.ent_by)||'!~!~!'||to_char(a.LRQDT,'dd/mm/yyyy')||'!~!~!'||trim(a.LEVFROM)||'!~!~!'||trim(a.LEVUPTO)||'!~!~!'||trim(a.LRQNO) as col2,trim(a.branchcd)||trim(a.type)||trim(a.LRQNO)||to_char(a.LRQDT,'yyyymmdd') as col3,'-' as col4,to_char(a.LRQDT,'yyyymmdd')||a.branchcd as col5,'-' as col6 from wb_LEVREQ a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a.branchcd!='DD' and a.type like 'LR%' and a.LRQDT " + xprdRange + "  and trim(nvl(a.app_by,'-'))='-' and trim(empcode) in (select trim(icode) from multivch where branchcd!='DD' and type='LA' and result='" + emp_Str + "')  order by to_char(a.LRQDT,'yyyymmdd')||a.branchcd||a.lrqno desc) ";
                    }

                    proc_code = "F1003";
                    break;
                case "EP924":
                    mq = "select col1,col2,col3,col4,col5,col6 from  (Select 'OD_No,OD_Dt,Remarks,Emp_locn,Ent_by' as col1,trim(a.Vchnum)||'!~!~!'||to_char(a.Vchdate,'dd/mm/yyyy')||'!~!~!'||trim(a.Emp_rmk)||'!~!~!'||trim(a.Emp_locn)||'!~!~!'||trim(a.ent_by) as col2,trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'yyyymmdd') as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5,'-' as col6 from wb_eattn_rec a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a.branchcd='" + work_br + "' and a.type like 'CI%' and a.vchdate " + xprdRange + "  and trim(nvl(a.app_by,'-'))='-' and  order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    if (team6.col1 == "MINV")
                    {
                        string emp_Str = "";
                        mq = "select trim(CONTACTNO) as fstr from evas where trim(username)='" + team6.col5.Trim().ToUpper() + "' and NVL(CAN_TNS,'N')='Y'";
                        emp_Str = fn_seek_iname(team6.col1, "", mq, "fstr");

                        mq = "Select branchcd||grade||trim(empcode) as fstr from empmas where substr(trim(nvl(tfr_stat,'-')),1,8)<>'TRANSFER' and length(Trim(nvl(leaving_dt,'-')))<5 and replace(trim(mobile),'-','')='" + emp_Str + "'";
                        emp_Str = fn_seek_iname(team6.col1, "", mq, "fstr");

                        mq = "select col1,col2,col3,col4,col5,col6 from  (Select 'Ent_by,OD_Dt,Remarks,Location,OD_No' as col1,trim(a.ent_by)||'!~!~!'||to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||trim(a.emp_rmk)||'!~!~!'||trim(a.emp_locn)||'!~!~!'||trim(a.vchnum) as col2,trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'yyyymmdd') as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5,'-' as col6 from wb_eattn_rec a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a.branchcd!='DD' and a.type like 'CI%' and a.vchdate " + xprdRange + "  and trim(nvl(a.app_by,'-'))='-' and trim(emp_code) in (select trim(icode) from multivch where branchcd!='DD' and type='LA' and result='" + emp_Str + "')  order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    }

                    proc_code = "F1924";
                    break;

                case "EP922":
                    mq = "select col1,col2,col3,col4,col5,col6 from  (Select 'Req_No,Req_Dt,Req_Amt,Appr_Amt,remarks,Ent_by' as col1,trim(a.vchnum)||'!~!~!'||to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||trim(a.req_amt)||'!~!~!'||trim(a.dramt)||'!~!~!'||trim(a.remark)||'!~!~!'||trim(a.ent_by) as col2,trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'yyyymmdd') as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5,'-' as col6 from payadv a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a.branchcd='" + work_br + "' and a.type like '%' and a.vchdate " + xprdRange + " and trim(nvl(a.app_by,'-'))='-' order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    break;
                case "EP923":
                    mq = "select col1,col2,col3,col4,col5,col6 from  (Select 'Req_No,Req_Dt,Req_Amt,Appr_Amt,remarks,Ent_by' as col1,trim(a.vchnum)||'!~!~!'||to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||trim(a.req_amt)||'!~!~!'||trim(a.dramt)||'!~!~!'||trim(a.remark)||'!~!~!'||trim(a.ent_by) as col2,trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'yyyymmdd') as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5,'-' as col6 from payloan a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a.branchcd='" + work_br + "' and a.type like '%' and a.vchdate " + xprdRange + " and trim(nvl(a.app_by,'-'))='-' order by to_char(a.vchdate,'yyyymmdd')||a.branchcd||a.vchnum desc) ";
                    break;

            }
            DataTable dt = new DataTable();
            dt = getdata(team6.col1, "-", mq);

            List<Team6> list = new List<Team6>();
            list = (from DataRow row in dt.Rows


                    select new Team6()
                    {

                        col1 = row["col1"].ToString(),
                        col2 = row["col2"].ToString(),
                        col3 = row["col3"].ToString(),
                        col4 = row["col4"].ToString(),
                        col5 = row["col5"].ToString(),
                        col6 = finsys_webapp + "/iprint.aspx?STR=" + "ERP@" + serv_DD + "@" + team6.col1 + "@" + myear + row["col3"].ToString().Substring(0, 2) + "@" + user_code + "@BVAL@" + proc_code + "@" + row["col3"].ToString().Substring(0, 18)

                    }).ToList();

            return list;
        }

        //------------------------------------------------
        // Api for Approving Selected Rows by APP 29/10/2017
        //------------------------------------------------

        public List<Team> ApprAction_api(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            //------------------------

            String mq0 = "";
            mq0 = team.col2;
            string msg = "-";
            string errmsg = "-";
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            int dsv_ok = 0;
            int dsv_nok = 0;
            int tot_rec = 0;
            OpenConn(team.col1);

            try
            {

                for (int i = 0; i < qrlist.Length; i++)
                {
                    tot_rec = tot_rec + 1;
                    switch (team.col3)
                    {
                        case "EPA201":
                        case "EP201":
                            if (qrlist[i].ToString().Substring(0, 1) == "Y")
                            {
                                mq = "update somas set  app_by='" + team.col4 + "',app_dt= to_date(to_Char(sysdate,'dd/mm/yyyy hh24:mi'),'dd/mm/yyyy hh24:mi') where branchcd||trim(type)||trim(ordno)||to_char(orddt,'yyyymmdd')||trim(icode)||trim(to_char(srno,'9999'))='" + qrlist[i].ToString().Remove(0, 1) + "'";
                                mq1 = execute_cmd1(team.col1, mq);
                                if (mq1.Equals("Data Saved"))
                                {
                                    dsv_ok = dsv_ok + 1;
                                }
                                else if (mq1.Equals("Data Not Saved"))
                                {
                                    dsv_nok = dsv_nok + 1;
                                }
                                else
                                {
                                    errmsg = mq1;
                                    dsv_nok = dsv_nok + 1;
                                }
                            }
                            else
                            {
                                dsv_nok = dsv_nok + 1;
                            }
                            break;
                        case "EP202":
                        case "EP203":
                        case "EPA202":
                        case "EPA203":
                            if (qrlist[i].ToString().Substring(0, 1) == "Y")
                            {
                                mq = "update Pomas set  app_by='" + team.col4 + "',app_dt= to_date(to_Char(sysdate,'dd/mm/yyyy hh24:mi'),'dd/mm/yyyy hh24:mi') where branchcd||trim(type)||trim(ordno)||to_char(orddt,'yyyymmdd')||trim(icode)||trim(to_char(srno,'9999'))='" + qrlist[i].ToString().Remove(0, 1) + "'";
                                mq1 = execute_cmd1(team.col1, mq);
                                if (mq1.Equals("Data Saved"))
                                {
                                    dsv_ok = dsv_ok + 1;
                                }
                                else if (mq1.Equals("Data Not Saved"))
                                {
                                    dsv_nok = dsv_nok + 1;
                                }
                                else
                                {
                                    errmsg = mq1;
                                    dsv_nok = dsv_nok + 1;
                                }
                            }
                            else
                            {
                                dsv_nok = dsv_nok + 1;
                            }
                            break;
                        case "EP605":
                            if (qrlist[i].ToString().Substring(0, 1) == "Y")
                            {
                                mq = "update wb_maint_comp set  app_by='" + team.col4 + "',app_dt= to_date(to_Char(sysdate,'dd/mm/yyyy hh24:mi'),'dd/mm/yyyy hh24:mi') where branchcd||trim(type)||trim(vchnum)||to_char(vchdate,'yyyymmdd')='" + qrlist[i].ToString().Remove(0, 1) + "'";
                                mq1 = execute_cmd1(team.col1, mq);
                                if (mq1.Equals("Data Saved"))
                                {
                                    dsv_ok = dsv_ok + 1;
                                }
                                else if (mq1.Equals("Data Not Saved"))
                                {
                                    dsv_nok = dsv_nok + 1;
                                }
                                else
                                {
                                    errmsg = mq1;
                                    dsv_nok = dsv_nok + 1;
                                }
                            }
                            else
                            {
                                dsv_nok = dsv_nok + 1;
                            }
                            break;

                        case "EP921":
                            if (qrlist[i].ToString().Substring(0, 1) == "Y")
                            {
                                mq = "update wb_LEVREQ set  app_by='" + team.col4 + "',app_dt= to_date(to_Char(sysdate,'dd/mm/yyyy hh24:mi'),'dd/mm/yyyy hh24:mi') where branchcd||trim(type)||trim(LRQNO)||to_char(LRQDT,'yyyymmdd')='" + qrlist[i].ToString().Remove(0, 1) + "'";
                                mq1 = execute_cmd1(team.col1, mq);
                                if (mq1.Equals("Data Saved"))
                                {
                                    dsv_ok = dsv_ok + 1;
                                }
                                else if (mq1.Equals("Data Not Saved"))
                                {
                                    dsv_nok = dsv_nok + 1;
                                }
                                else
                                {
                                    errmsg = mq1;
                                    dsv_nok = dsv_nok + 1;
                                }
                            }
                            else
                            {
                                dsv_nok = dsv_nok + 1;
                            }
                            break;
                        case "EP924":
                            if (qrlist[i].ToString().Substring(0, 1) == "Y")
                            {
                                mq = "update wb_eattn_rec set  app_by='" + team.col4 + "',app_dt= to_date(to_Char(sysdate,'dd/mm/yyyy hh24:mi'),'dd/mm/yyyy hh24:mi') where branchcd||trim(type)||trim(vchnum)||to_char(vchdate,'yyyymmdd')='" + qrlist[i].ToString().Remove(0, 1) + "'";
                                mq1 = execute_cmd1(team.col1, mq);
                                if (mq1.Equals("Data Saved"))
                                {
                                    dsv_ok = dsv_ok + 1;
                                }
                                else if (mq1.Equals("Data Not Saved"))
                                {
                                    dsv_nok = dsv_nok + 1;
                                }
                                else
                                {
                                    errmsg = mq1;
                                    dsv_nok = dsv_nok + 1;
                                }
                            }
                            else
                            {
                                dsv_nok = dsv_nok + 1;
                            }
                            break;

                        case "EP922":
                            if (qrlist[i].ToString().Substring(0, 1) == "Y")
                            {

                                mq = "update payadv set  app_by='" + team.col4 + "',app_dt= to_date(to_Char(sysdate,'dd/mm/yyyy hh24:mi'),'dd/mm/yyyy hh24:mi') where branchcd||trim(type)||trim(vchnum)||to_char(vchdate,'yyyymmdd')='" + qrlist[i].ToString().Remove(0, 1) + "'";
                                mq1 = execute_cmd1(team.col1, mq);
                                if (mq1.Equals("Data Saved"))
                                {
                                    dsv_ok = dsv_ok + 1;
                                }
                                else if (mq1.Equals("Data Not Saved"))
                                {
                                    dsv_nok = dsv_nok + 1;
                                }
                                else
                                {
                                    errmsg = mq1;
                                    dsv_nok = dsv_nok + 1;
                                }
                            }
                            else
                            {
                                dsv_nok = dsv_nok + 1;
                            }
                            break;

                        case "EP923":
                            if (qrlist[i].ToString().Substring(0, 1) == "Y")
                            {

                                mq = "update payloan set  app_by='" + team.col4 + "',app_dt= to_date(to_Char(sysdate,'dd/mm/yyyy hh24:mi'),'dd/mm/yyyy hh24:mi') where branchcd||trim(type)||trim(vchnum)||to_char(vchdate,'yyyymmdd')='" + qrlist[i].ToString().Remove(0, 1) + "'";
                                mq1 = execute_cmd1(team.col1, mq);
                                if (mq1.Equals("Data Saved"))
                                {
                                    dsv_ok = dsv_ok + 1;
                                }
                                else if (mq1.Equals("Data Not Saved"))
                                {
                                    dsv_nok = dsv_nok + 1;
                                }
                                else
                                {
                                    errmsg = mq1;
                                    dsv_nok = dsv_nok + 1;
                                }
                            }
                            else
                            {
                                dsv_nok = dsv_nok + 1;
                            }
                            break;



                    }

                }

            }
            catch (Exception e)
            {

                errmsg = e.ToString();
                msg = "-";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                string sb1 = "-";
                if (dsv_ok > 0)
                {
                    sb1 = dsv_ok + " Rows Approved";
                }
                string sb2 = "-";
                if (dsv_nok > 0)
                {
                    sb2 = dsv_nok + " Rows Not Approved";
                }
                //if (dsv_nok > 0 || dsv_nok > 0)
                //{
                //    mylist.Add(new Team { col1 = sb1 + " " + sb2, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
                //}
                //else
                //{
                mylist.Add(new Team { col1 = sb1, col2 = sb2, col3 = "Total Rec " + tot_rec, col4 = msg, col5 = errmsg, });
                //}

            }
            catch { }
            return mylist;
        }

        //------------------------------------------------
        // Api for 3 Text box Saving by APP 03/11/2017
        //------------------------------------------------

        public List<Team> SaveFeebk_api(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            //------------------------

            string brachcd = "-", type = "-", vchnum = "-", vchdate = "-", tcol13 = "-", tcol14 = "-", tremark = "-";

            string msg = "Data Saved";

            OpenConn(team.col1);

            OracleTransaction transaction;
            transaction = con.BeginTransaction(IsolationLevel.ReadCommitted);
            OracleCommand command = con.CreateCommand();
            command.Transaction = transaction;
            try
            {
                type = "FB";
                brachcd = "00";
                vchdate = Fn_curr_dt(team.col1, brachcd, "-");
                tcol13 = team.col2;
                tcol14 = team.col3;
                tremark = team.col4;

                int p = 0;
                string error = "Y";
                do
                {
                    vchnum = next_no(team.col1, brachcd, "-", "select max(vchnum)+" + p + " as max from scratch2 where type ='" + type + "'", 6, "max");
                    error = fn_chk_pk(brachcd + type + vchnum + vchdate, team.col1, brachcd, type, vchnum, vchdate, "FBKAPI", "WEBAPI").Trim();
                    if (p > 20)
                    {
                        error = "N";
                        throw new Exception("Test Exception " + brachcd + type + vchnum + vchdate);
                        p = 0;
                    }
                    p++;
                }
                while (error.Equals("Y"));

                mq = "insert into scratch2(branchcd,type,vchnum,vchdate,icode,acode,col13,col14,remarks) values('" + brachcd + "','" + type + "','" + vchnum + "',to_date('" + vchdate + "','dd/MM/yyyy'),'-','-','" + tcol13 + "','" + tcol14 + "','" + tremark + "')";
                command.CommandText = mq;
                command.ExecuteNonQuery();
                transaction.Commit();
            }
            catch (Exception e)
            {
                transaction.Rollback();
                msg = e.ToString();
                msg = "Data Not Saved " + e;
            }

            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = vchnum, col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }

        //------------------------------------------------
        // Api for for password change by APP 03/11/2017
        //------------------------------------------------

        public List<Team> PassChg_api(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            //------------------------

            string msg = "Password Changed";

            OpenConn(team.col1);

            OracleTransaction transaction;
            transaction = con.BeginTransaction(IsolationLevel.ReadCommitted);
            OracleCommand command = con.CreateCommand();
            command.Transaction = transaction;
            try
            {

                mq = "update evas set level3pw='" + team.col4 + "' where username='" + team.col2.Trim().ToUpper() + "'";
                command.CommandText = mq;
                command.ExecuteNonQuery();
                transaction.Commit();
            }
            catch (Exception e)
            {
                transaction.Rollback();
                msg = e.ToString();
                msg = "Password Not Changed";
            }

            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }

        //------------------------------------------------
        // Api for for getting dbd info  by APP 09/11/2017
        //------------------------------------------------

        public List<Team6> dbd_info_api(Team6 team6)
        {

            //-------------------------
            Fn_set_andapp_opts(team6.col1, "N");
            //------------------------

            string msg = "Success";
            OpenConn(team6.col1);
            makeCur(team6.col1.ToUpper());
            mq1 = "";
            string to_Day = "";
            string st_Dt = "";
            string lm_Dt = "";
            string cur_Dt = "";
            string dbd_caps = "";
            string inf1 = "";
            string inf2 = "";
            string inf3 = "";
            string inf4 = "";
            string mq2 = "";

            string sta_Dt, sq1, sq2, sq3, sq4, sq5, sq6;

            mq = "alter table evas add Iph_opt number(3) default 0";
            mq1 = execute_cmd1(team6.col1, mq);


            try
            {

                mq2 = fn_seek_iname(team6.col1, "", "Select to_char((LAST_DAY(ADD_MONTHS(to_DaTE(sysdate),-0))),'dd/mm/yyyy') AS xdt2 from dual", "xdt2");

                string mydate = DateTime.Now.ToString("dd/MM/yyyy");

                string mycocd = team6.col1.ToUpper().Trim();
                if (team6.col1.ToUpper().Trim() == "MCPL2" || team6.col1.ToUpper().Trim() == "MCPL4") mycocd = "MCPL";
                st_Dt = fn_seek_iname(team6.col1, "", "Select to_Char(fmdate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%' and FMDATE<=TO_DATE('" + mydate + "','DD/MM/YYYY') AND TODATE>=TO_DATE('" + mydate + "','DD/MM/YYYY') order by fmdate desc", "fmdt");
                lm_Dt = fn_seek_iname(team6.col1, "", "Select to_char((LAST_DAY(ADD_MONTHS(to_DaTE(sysdate),-1))),'dd/mm/yyyy') AS xdt2 from dual", "xdt2");
                cur_Dt = fn_seek_iname(team6.col1, "", "Select to_char(sysdate,'dd/mm/yyyy') AS xdt2 from dual", "xdt2");

                //to_Day = fn_seek_iname(team6.col1, "", "Select substr(to_char(sysdate,'DAY'),1,3) AS xdt2 from dual", "xdt2");
                //to_Day = fn_seek_iname(team6.col1, "", "Select substr(to_char(sysdate,'dd/mm/yyyy :hh24:mi:ss'),13,2) AS xdt2 from dual", "xdt2");
                to_Day = fn_seek_iname(team6.col1, "", "Select LPAD(trim(to_char(iph_opt,'99')),2,'0') as iph_op from evas where upper(trim(username))='" + team6.col2.Trim().ToUpper() + "'", "iph_op");

                branchwise(team6.col1, "", team6.col2.Trim().ToUpper());

                // 

                inf1 = "Crucial";
                inf2 = "MIS Tiles";
                inf3 = "To Start";
                inf4 = "Tap Twice";
                string tapinfo = "(TapTwice:Next)";
                string cond_02_acode = "";

                if (team6.col1.ToUpper().Trim() == "VIPL")
                {
                    cond_02_acode = "1=1";
                }
                else
                {
                    cond_02_acode = "substr(acode,1,2)!='02'";
                }

                switch (to_Day)
                {

                    case "01":
                        dbd_caps = "Sales Y.T.D!~!~!(A)Previous Month!~!~!(B)Current Month!~!~!%(A,B) " + tapinfo;
                        inf1 = fn_seek_iname(team6.col1, "", "Select round(sum(amt_sale)/" + home_divider + ",2) as Bas_Val from sale where " + branch_cd + " and type like '4%' and type!='47' and " + cond_02_acode + "  and vchdate between to_DatE('" + st_Dt + "','dd/mm/yyyy') and to_DatE('" + cur_Dt + "','dd/mm/yyyy')", "Bas_Val") + home_div_iden;
                        inf2 = fn_seek_iname(team6.col1, "", "Select round(sum(amt_sale)/" + home_divider + ",2) as Bas_Val from sale where " + branch_cd + " and type like '4%' and type!='47' and " + cond_02_acode + "  and to_char(vchdate,'yyyymm') =to_Char(to_Date('" + lm_Dt + "','dd/mm/yyyy'),'yyyymm') ", "Bas_Val") + home_div_iden;
                        inf3 = fn_seek_iname(team6.col1, "", "Select round(sum(amt_sale)/" + home_divider + ",2) as Bas_Val from sale where " + branch_cd + " and type like '4%' and type!='47' and " + cond_02_acode + "  and to_char(vchdate,'yyyymm') =to_Char(to_Date('" + cur_Dt + "','dd/mm/yyyy'),'yyyymm') ", "Bas_Val") + home_div_iden;
                        inf4 = "";
                        try
                        {
                            inf4 = fn_seek_iname(team6.col1, "", "Select (Case when (" + inf2.Replace(home_div_iden, "") + ") >0 then (100-round((((" + inf2.Replace(home_div_iden, "") + ")-(" + inf3.Replace(home_div_iden, "") + "))/(" + inf2.Replace(home_div_iden, "") + "))*100,2)) else 0 end)||' %' as Bas_Val from dual", "Bas_Val");
                        }
                        catch
                        { }
                        break;
                    case "02":
                        dbd_caps = "Collection Y.T.D!~!~!(A)Previous Month!~!~!(B)Current Month!~!~!%(A,B) " + tapinfo;
                        inf1 = fn_seek_iname(team6.col1, "", "Select round(sum(A.cramt-A.dramt)/" + home_divider + ",2) as Bas_Val from voucher A,FAMST B where A." + branch_cd + " AND TRIM(A.ACODE)=TRIM(B.ACODE) and A.type like '1%' and substr(B.GRP,1,2) in ('02','16') and A.vchdate between to_DatE('" + st_Dt + "','dd/mm/yyyy') and to_DatE('" + cur_Dt + "','dd/mm/yyyy')", "Bas_Val") + home_div_iden;
                        inf2 = fn_seek_iname(team6.col1, "", "Select round(sum(A.cramt-A.dramt)/" + home_divider + ",2) as Bas_Val from voucher A,FAMST B where A." + branch_cd + " AND TRIM(A.ACODE)=TRIM(B.ACODE) and A.type like '1%' and substr(B.GRP,1,2) in ('02','16') and to_char(A.vchdate,'yyyymm') =to_Char(to_Date('" + lm_Dt + "','dd/mm/yyyy'),'yyyymm') ", "Bas_Val") + home_div_iden;
                        inf3 = fn_seek_iname(team6.col1, "", "Select round(sum(A.cramt-A.dramt)/" + home_divider + ",2) as Bas_Val from voucher A,FAMST B where A." + branch_cd + " AND TRIM(A.ACODE)=TRIM(B.ACODE) and A.type like '1%' and substr(B.GRP,1,2) in ('02','16') and to_char(A.vchdate,'yyyymm') =to_Char(to_Date('" + cur_Dt + "','dd/mm/yyyy'),'yyyymm') ", "Bas_Val") + home_div_iden;
                        inf4 = "";
                        try
                        {
                            inf4 = fn_seek_iname(team6.col1, "", "Select (Case when (" + inf2.Replace(home_div_iden, "") + ") >0 then (100-round((((" + inf2.Replace(home_div_iden, "") + ")-(" + inf3.Replace(home_div_iden, "") + "))/(" + inf2.Replace(home_div_iden, "") + "))*100,2)) else 0 end)||' %' as Bas_Val from dual", "Bas_Val");
                        }
                        catch
                        { }
                        break;
                    case "03":
                        dbd_caps = "Payments Y.T.D!~!~!(A)Previous Month!~!~!(B)Current Month!~!~!%(A,B) " + tapinfo;
                        inf1 = fn_seek_iname(team6.col1, "", "Select round(sum(A.dramt-A.cramt)/" + home_divider + ",2) as Bas_Val from voucher A,FAMST B where A." + branch_cd + " AND TRIM(A.ACODE)=TRIM(b.ACODE) and A.type like '2%' and substr(B.GRP,1,2) in ('02','05','06') and A.vchdate between to_DatE('" + st_Dt + "','dd/mm/yyyy') and to_DatE('" + cur_Dt + "','dd/mm/yyyy')", "Bas_Val") + home_div_iden;
                        inf2 = fn_seek_iname(team6.col1, "", "Select round(sum(A.dramt-A.cramt)/" + home_divider + ",2) as Bas_Val from voucher A,FAMST B where A." + branch_cd + " AND TRIM(A.ACODE)=TRIM(b.ACODE) and A.type like '2%' and substr(B.GRP,1,2) in ('02','05','06') and to_char(A.vchdate,'yyyymm') =to_Char(to_Date('" + lm_Dt + "','dd/mm/yyyy'),'yyyymm') ", "Bas_Val") + home_div_iden;
                        inf3 = fn_seek_iname(team6.col1, "", "Select round(sum(A.dramt-A.cramt)/" + home_divider + ",2) as Bas_Val from voucher A,FAMST B where A." + branch_cd + " AND TRIM(A.ACODE)=TRIM(b.ACODE) and A.type like '2%' and substr(B.GRP,1,2) in ('02','05','06') and to_char(A.vchdate,'yyyymm') =to_Char(to_Date('" + cur_Dt + "','dd/mm/yyyy'),'yyyymm') ", "Bas_Val") + home_div_iden;
                        inf4 = "";
                        try
                        {
                            inf4 = fn_seek_iname(team6.col1, "", "Select (Case when (" + inf2.Replace(home_div_iden, "") + ") >0 then (100-round((((" + inf2.Replace(home_div_iden, "") + ")-(" + inf3.Replace(home_div_iden, "") + "))/(" + inf2.Replace(home_div_iden, "") + "))*100,2)) else 0 end)||' %' as Bas_Val from dual", "Bas_Val");
                        }
                        catch
                        { }
                        break;
                    case "04":
                        dbd_caps = "Customer Debit Notes Y.T.D!~!~!(A)Previous Month!~!~!(B)Current Month!~!~!%(A,B) " + tapinfo;
                        inf1 = fn_seek_iname(team6.col1, "", "Select round(sum(A.dramt-A.cramt)/" + home_divider + ",2) as Bas_Val from voucher A,FAMST B where A." + branch_cd + " AND TRIM(A.ACODE)=TRIM(b.ACODE) and A.type like '59%' and substr(B.GRP,1,2) in ('02','16') and A.vchdate between to_DatE('" + st_Dt + "','dd/mm/yyyy') and to_DatE('" + cur_Dt + "','dd/mm/yyyy')", "Bas_Val") + home_div_iden;
                        inf2 = fn_seek_iname(team6.col1, "", "Select round(sum(A.dramt-A.cramt)/" + home_divider + ",2) as Bas_Val from voucher A,FAMST B where A." + branch_cd + " AND TRIM(A.ACODE)=TRIM(b.ACODE) and A.type like '59%' and substr(B.GRP,1,2) in ('02','16') and to_char(A.vchdate,'yyyymm') =to_Char(to_Date('" + lm_Dt + "','dd/mm/yyyy'),'yyyymm') ", "Bas_Val") + home_div_iden;
                        inf3 = fn_seek_iname(team6.col1, "", "Select round(sum(A.dramt-A.cramt)/" + home_divider + ",2) as Bas_Val from voucher A,FAMST B where A." + branch_cd + " AND TRIM(A.ACODE)=TRIM(b.ACODE) and A.type like '59%' and substr(B.GRP,1,2) in ('02','16') and to_char(A.vchdate,'yyyymm') =to_Char(to_Date('" + cur_Dt + "','dd/mm/yyyy'),'yyyymm') ", "Bas_Val") + home_div_iden;
                        inf4 = "";
                        try
                        {
                            inf4 = fn_seek_iname(team6.col1, "", "Select (Case when (" + inf2.Replace(home_div_iden, "") + ") >0 then (100-round((((" + inf2.Replace(home_div_iden, "") + ")-(" + inf3.Replace(home_div_iden, "") + "))/(" + inf2.Replace(home_div_iden, "") + "))*100,2)) else 0 end)||' %' as Bas_Val from dual", "Bas_Val");
                        }
                        catch
                        { }
                        break;
                    case "05":
                        dbd_caps = "Customer Credit Notes Y.T.D!~!~!(A)Previous Month!~!~!(B)Current Month!~!~!%(A,B) " + tapinfo;
                        inf1 = fn_seek_iname(team6.col1, "", "Select round(sum(A.cramt-A.dramt)/" + home_divider + ",2) as Bas_Val from voucher A,FAMST B where A." + branch_cd + " AND TRIM(A.ACODE)=TRIM(b.ACODE) and A.type like '58%' and substr(B.GRP,1,2) in ('02','16') and A.vchdate between to_DatE('" + st_Dt + "','dd/mm/yyyy') and to_DatE('" + cur_Dt + "','dd/mm/yyyy')", "Bas_Val") + home_div_iden;
                        inf2 = fn_seek_iname(team6.col1, "", "Select round(sum(A.cramt-A.dramt)/" + home_divider + ",2) as Bas_Val from voucher A,FAMST B where A." + branch_cd + " AND TRIM(A.ACODE)=TRIM(b.ACODE) and A.type like '58%' and substr(B.GRP,1,2) in ('02','16') and to_char(A.vchdate,'yyyymm') =to_Char(to_Date('" + lm_Dt + "','dd/mm/yyyy'),'yyyymm') ", "Bas_Val") + home_div_iden;
                        inf3 = fn_seek_iname(team6.col1, "", "Select round(sum(A.cramt-A.dramt)/" + home_divider + ",2) as Bas_Val from voucher A,FAMST B where A." + branch_cd + " AND TRIM(A.ACODE)=TRIM(b.ACODE) and A.type like '58%' and substr(B.GRP,1,2) in ('02','16') and to_char(A.vchdate,'yyyymm') =to_Char(to_Date('" + cur_Dt + "','dd/mm/yyyy'),'yyyymm') ", "Bas_Val") + home_div_iden;
                        inf4 = "";
                        try
                        {
                            inf4 = fn_seek_iname(team6.col1, "", "Select (Case when (" + inf2.Replace(home_div_iden, "") + ") >0 then (100-round((((" + inf2.Replace(home_div_iden, "") + ")-(" + inf3.Replace(home_div_iden, "") + "))/(" + inf2.Replace(home_div_iden, "") + "))*100,2)) else 0 end)||' %' as Bas_Val from dual", "Bas_Val");
                        }
                        catch
                        { }
                        break;
                    case "06":
                        dbd_caps = "Customer Returns Y.T.D!~!~!(A)Previous Month!~!~!(B)Current Month!~!~!%(A,B)  " + tapinfo;
                        inf1 = fn_seek_iname(team6.col1, "", "Select round(sum(amt_sale)/" + home_divider + ",2) as Bas_Val from ivchctrl where " + branch_cd + " and type like '0%' and type='04' and type<'08'  and vchdate between to_DatE('" + st_Dt + "','dd/mm/yyyy') and to_DatE('" + cur_Dt + "','dd/mm/yyyy')", "Bas_Val") + home_div_iden;
                        inf2 = fn_seek_iname(team6.col1, "", "Select round(sum(amt_sale)/" + home_divider + ",2) as Bas_Val from ivchctrl where " + branch_cd + " and type like '0%' and type='04' and type<'08'  and to_char(vchdate,'yyyymm') =to_Char(to_Date('" + lm_Dt + "','dd/mm/yyyy'),'yyyymm') ", "Bas_Val") + home_div_iden;
                        inf3 = fn_seek_iname(team6.col1, "", "Select round(sum(amt_sale)/" + home_divider + ",2) as Bas_Val from ivchctrl where " + branch_cd + " and type like '0%' and type='04' and type<'08'  and to_char(vchdate,'yyyymm') =to_Char(to_Date('" + cur_Dt + "','dd/mm/yyyy'),'yyyymm') ", "Bas_Val") + home_div_iden;
                        inf4 = "";
                        try
                        {
                            inf4 = fn_seek_iname(team6.col1, "", "Select (Case when (" + inf2.Replace(home_div_iden, "") + ") >0 then (100-round((((" + inf2.Replace(home_div_iden, "") + ")-(" + inf3.Replace(home_div_iden, "") + "))/(" + inf2.Replace(home_div_iden, "") + "))*100,2)) else 0 end)||' %' as Bas_Val from dual", "Bas_Val");
                        }
                        catch
                        { }
                        break;

                    case "07":
                        dbd_caps = "Return to Supplier Y.T.D!~!~!(A)Previous Month!~!~!(B)Current Month!~!~!%(A,B)  " + tapinfo;
                        inf1 = fn_seek_iname(team6.col1, "", "Select round(sum(amt_sale)/" + home_divider + ",2) as Bas_Val from sale where " + branch_cd + " and type like '4%' and type='47'  and vchdate between to_DatE('" + st_Dt + "','dd/mm/yyyy') and to_DatE('" + cur_Dt + "','dd/mm/yyyy')", "Bas_Val") + home_div_iden;
                        inf2 = fn_seek_iname(team6.col1, "", "Select round(sum(amt_sale)/" + home_divider + ",2) as Bas_Val from sale where " + branch_cd + " and type like '4%' and type='47'  and to_char(vchdate,'yyyymm') =to_Char(to_Date('" + lm_Dt + "','dd/mm/yyyy'),'yyyymm') ", "Bas_Val") + home_div_iden;
                        inf3 = fn_seek_iname(team6.col1, "", "Select round(sum(amt_sale)/" + home_divider + ",2) as Bas_Val from sale where " + branch_cd + " and type like '4%' and type='47'  and to_char(vchdate,'yyyymm') =to_Char(to_Date('" + cur_Dt + "','dd/mm/yyyy'),'yyyymm') ", "Bas_Val") + home_div_iden;
                        inf4 = "";
                        try
                        {

                            inf4 = fn_seek_iname(team6.col1, "", "Select (Case when (" + inf2.Replace(home_div_iden, "") + ") >0 then (100-round((((" + inf2.Replace(home_div_iden, "") + ")-(" + inf3.Replace(home_div_iden, "") + "))/(" + inf2.Replace(home_div_iden, "") + "))*100,2)) else 0 end)||' %' as Bas_Val from dual", "Bas_Val");
                        }
                        catch
                        { }
                        break;

                    case "08":
                        sta_Dt = fn_seek_iname(team6.col1, "", "Select trim(params) as params from controls where id='R01'", "params");
                        sq1 = "select round((sum(slab1)+sum(slab2)+sum(slab3)+sum(slab4)+sum(slab5))/" + home_divider + ",2) as Tot_Os,round((sum(slab5)+sum(slab4))/" + home_divider + ",2) as O_90,round(sum(slab3)/" + home_divider + ",2) as O_60_90,round(sum(slab2)/" + home_divider + ",2) as O_30_60,round(sum(slab1)/" + home_divider + ",2) as O_30 from (select balances,days,(case when days between 0 and 30 then ";
                        sq2 = "balances else 0 end) as slab1,(case when days between 31 and 60 then balances else 0 end) as slab2,(case when days between 61 and 90 then balances else 0 end) as slab3,(case when days ";
                        sq3 = "between 91 and 180 then balances else 0 end) as slab4,(case when days between 181 and 10000 then balances else 0 end) as slab5 from (select * from (select branchcd,upper(invno) as invno,invdate,";
                        sq4 = "ROUND(sysdate-invdate,0) as days,sum(dramt) as dramt,sum(cramt) as cramt,sum(dramt)-sum(cramt) as balances from (select branchcd,acode,invno,invdate,dramt,cramt from recebal where  ";
                        sq5 = "" + branch_cd + " and substr(acode,1,2)='16' union all select branchcd,acode,invno,invdate,dramt,cramt from voucher where " + branch_cd + " AND vchdate>=to_Date('" + sta_Dt + "','dd/mm/yyyy') and substr(acode,1,2)='16' ) group by branchcd,acode,upper(invno),invdate)  where balances!=0)) ";

                        sq6 = sq1 + sq2 + sq3 + sq4 + sq5;

                        DataTable dtl = new DataTable();
                        dtl = getdata(team6.col1, "-", sq6);
                        if (dtl.Rows.Count < 1)
                        {
                            inf1 = "No Outstanding";
                        }
                        else
                        {
                            inf1 = dtl.Rows[0][0].ToString() + home_div_iden;
                            inf2 = dtl.Rows[0][1].ToString() + home_div_iden;
                            inf3 = dtl.Rows[0][2].ToString() + home_div_iden;
                            inf4 = dtl.Rows[0][3].ToString() + home_div_iden;
                        }
                        dbd_caps = "Total Receivable!~!~!Over 90 Days!~!~!Over 60<90 Days!~!~!Over 30<60 Days";
                        break;
                    case "09":
                        sta_Dt = fn_seek_iname(team6.col1, "", "Select trim(params) as params from controls where id='R01'", "params");
                        sq1 = "select round((sum(slab1)+sum(slab2)+sum(slab3)+sum(slab4)+sum(slab5))/" + home_divider + ",2)*-1 as Tot_Os,round((sum(slab5)+sum(slab4))/" + home_divider + ",2)*-1 as O_90,round(sum(slab3)/" + home_divider + ",2)*-1 as O_60_90,round(sum(slab2)/" + home_divider + ",2)*-1 as O_30_60,round(sum(slab1)/" + home_divider + ",2) as O_30 from (select balances,days,(case when days between 0 and 30 then ";
                        sq2 = "balances else 0 end) as slab1,(case when days between 31 and 60 then balances else 0 end) as slab2,(case when days between 61 and 90 then balances else 0 end) as slab3,(case when days ";
                        sq3 = "between 91 and 180 then balances else 0 end) as slab4,(case when days between 181 and 10000 then balances else 0 end) as slab5 from (select * from (select branchcd,upper(invno) as invno,invdate,";
                        sq4 = "ROUND(sysdate-invdate,0) as days,sum(dramt) as dramt,sum(cramt) as cramt,sum(dramt)-sum(cramt) as balances from (select a.branchcd,a.acode,a.invno,a.invdate,a.dramt,a.cramt from recebal a,famst b where  ";
                        sq5 = "a." + branch_cd + " trim(a.acode)=trim(b.acode) and substr(b.grp,1,2) in ('05','06') union all select a.branchcd,a.acode,a.invno,a.invdate,a.dramt,a.cramt from voucher a,famst b where a." + branch_cd + " and trim(a.acode)=trim(B.acode) AND a.vchdate>=to_Date('" + sta_Dt + "','dd/mm/yyyy') and substr(b.grp,1,2) in ('05','06') ) group by a.branchcd,a.acode,upper(a.invno),a.invdate)  where balances!=0)) ";

                        sq6 = sq1 + sq2 + sq3 + sq4 + sq5;

                        DataTable dt2 = new DataTable();
                        dt2 = getdata(team6.col1, "-", sq6);
                        if (dt2.Rows.Count < 1)
                        {
                            inf1 = "No Outstanding";
                        }
                        else
                        {
                            inf1 = dt2.Rows[0][0].ToString() + home_div_iden;
                            inf2 = dt2.Rows[0][1].ToString() + home_div_iden;
                            inf3 = dt2.Rows[0][2].ToString() + home_div_iden;
                            inf4 = dt2.Rows[0][3].ToString() + home_div_iden;
                        }
                        dbd_caps = "Total Payable!~!~!Over 90 Days!~!~!Over 60<90 Days!~!~!Over 30<60 Days";
                        break;
                    case "10":
                        dbd_caps = "Purchases Y.T.D!~!~!(A)Previous Month!~!~!(B)Current Month!~!~!%(A,B) " + tapinfo;
                        inf1 = fn_seek_iname(team6.col1, "", "Select round(sum(dramt)/" + home_divider + ",2) as Bas_Val from voucher where " + branch_cd + " and type in ('50','56','51','5A','5B','57')  and vchdate between to_DatE('" + st_Dt + "','dd/mm/yyyy') and to_DatE('" + cur_Dt + "','dd/mm/yyyy')", "Bas_Val") + home_div_iden;
                        inf2 = fn_seek_iname(team6.col1, "", "Select round(sum(dramt)/" + home_divider + ",2) as Bas_Val from voucher where " + branch_cd + " and type in ('50','56','51','5A','5B','57')  and to_char(vchdate,'yyyymm') =to_Char(to_Date('" + lm_Dt + "','dd/mm/yyyy'),'yyyymm') ", "Bas_Val") + home_div_iden;
                        inf3 = fn_seek_iname(team6.col1, "", "Select round(sum(dramt)/" + home_divider + ",2) as Bas_Val from voucher where " + branch_cd + " and type in ('50','56','51','5A','5B','57')  and to_char(vchdate,'yyyymm') =to_Char(to_Date('" + cur_Dt + "','dd/mm/yyyy'),'yyyymm') ", "Bas_Val") + home_div_iden;
                        inf4 = "";
                        try
                        {
                            inf4 = fn_seek_iname(team6.col1, "", "Select (Case when (" + inf2.Replace(home_div_iden, "") + ") >0 then (100-round((((" + inf2.Replace(home_div_iden, "") + ")-(" + inf3.Replace(home_div_iden, "") + "))/(" + inf2.Replace(home_div_iden, "") + "))*100,2)) else 0 end)||' %' as Bas_Val from dual", "Bas_Val");
                        }
                        catch
                        { }

                        break;
                    default:
                        dbd_caps = "Sales Y.T.D!~!~!(A)Previous Month!~!~!(B)Current Month!~!~!%(A,B) " + tapinfo;
                        inf1 = fn_seek_iname(team6.col1, "", "Select round(sum(amt_sale)/" + home_divider + ",2) as Bas_Val from sale where " + branch_cd + " and type like '4%' and type!='47' and " + cond_02_acode + "  and vchdate between to_DatE('" + st_Dt + "','dd/mm/yyyy') and to_DatE('" + cur_Dt + "','dd/mm/yyyy')", "Bas_Val") + home_div_iden;
                        inf2 = fn_seek_iname(team6.col1, "", "Select round(sum(amt_sale)/" + home_divider + ",2) as Bas_Val from sale where " + branch_cd + " and type like '4%' and type!='47' and " + cond_02_acode + "  and to_char(vchdate,'yyyymm') =to_Char(to_Date('" + lm_Dt + "','dd/mm/yyyy'),'yyyymm') ", "Bas_Val") + home_div_iden;
                        inf3 = fn_seek_iname(team6.col1, "", "Select round(sum(amt_sale)/" + home_divider + ",2) as Bas_Val from sale where " + branch_cd + " and type like '4%' and type!='47' and " + cond_02_acode + "  and to_char(vchdate,'yyyymm') =to_Char(to_Date('" + cur_Dt + "','dd/mm/yyyy'),'yyyymm') ", "Bas_Val") + home_div_iden;
                        inf4 = "";
                        try
                        {
                            inf4 = fn_seek_iname(team6.col1, "", "Select (Case when (" + inf2.Replace(home_div_iden, "") + ") >0 then (100-round((((" + inf2.Replace(home_div_iden, "") + ")-(" + inf3.Replace(home_div_iden, "") + "))/(" + inf2.Replace(home_div_iden, "") + "))*100,2)) else 0 end)||' %' as Bas_Val from dual", "Bas_Val");
                        }
                        catch
                        { }
                        break;
                }
            }
            catch (Exception e)
            {
                msg = e.ToString();
                msg = "Welcome";
            }

            try
            {
                if (makeDouble(to_Day) > 10 || makeDouble(to_Day) > 11)
                {
                    mq = "update evas set Iph_opt=1 where upper(trim(username))='" + team6.col2.Trim().ToUpper() + "'";
                }
                else
                {
                    mq = "update evas set Iph_opt=Iph_opt+1 where upper(trim(username))='" + team6.col2.Trim().ToUpper() + "'";
                }
                mq1 = execute_cmd1(team6.col1, mq);
            }
            catch
            {
            }

            List<Team6> mylist = new List<Team6>();
            try
            {
                mylist.Add(new Team6 { col1 = msg, col2 = dbd_caps, col3 = inf1, col4 = inf2, col5 = inf3, col6 = inf4, });
            }
            catch { }

            return mylist;
        }

        //------------------------------------------------
        public List<Team6> Dbd_smapi(Team6 team6)
        {
            //-------------------------
            Fn_set_andapp_opts(team6.col1, "N");
            //------------------------

            string msg = "Success";
            OpenConn(team6.col1);
            makeCur(team6.col1.ToUpper());
            mq1 = "";


            string inf1 = "";
            string inf2 = "";
            string inf3 = "";
            string inf4 = "";
            string frm_cDt1 = "";
            string frm_cDt2 = "";
            string xprdRange = "";
            string dbd_caps = "";
            try
            {
                string mycocd = team6.col1.ToUpper().Trim();
                string mydate = DateTime.Now.ToString("dd/MM/yyyy");
                if (team6.col1.ToUpper().Trim() == "MCPL2" || team6.col1.ToUpper().Trim() == "MCPL4") mycocd = "MCPL";

                frm_cDt1 = fn_seek_iname(team6.col1, "", "Select to_Char(fmdate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%' and FMDATE<=TO_DATE('" + mydate + "','DD/MM/YYYY') AND TODATE>=TO_DATE('" + mydate + "','DD/MM/YYYY') order by fmdate desc", "fmdt");
                frm_cDt2 = fn_seek_iname(team6.col1, "", "Select to_Char(todate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%' and to_CHAR(FMDATE,'DD/MM/YYYY')='" + frm_cDt1 + "' order by fmdate desc", "fmdt");

                xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";

                branchwise(team6.col1, "", team6.col2.Trim().ToUpper());

                dbd_caps = "Leads!~!~!Expenses!~!~!Check-In!~!~!Check-Outs";

                inf1 = fn_seek_iname(team6.col1, "", "Select round(sum(EXPVAL)/1000,2) as cnt from wb_lead_log where type='LR' and upper(trim(ent_by))='" + team6.col2.Trim().ToUpper() + "' and lrcdt " + xprdRange + " ", "cnt") + " K";
                inf2 = fn_seek_iname(team6.col1, "", "Select round(sum(exp_amt)/1000,2) as cnt from wb_smv_exp where  type='EX' and upper(trim(ent_by))='" + team6.col2.Trim().ToUpper() + "' and vchdate " + xprdRange + " ", "cnt") + " K";
                inf3 = fn_seek_iname(team6.col1, "", "Select count(*) as cnt from wb_smv_rec where  type='CI' and upper(trim(ent_by))='" + team6.col2.Trim().ToUpper() + "' and vchdate " + xprdRange + " ", "cnt");
                inf4 = fn_seek_iname(team6.col1, "", "Select count(*) as cnt from wb_smv_rec where  type='CO' and upper(trim(ent_by))='" + team6.col2.Trim().ToUpper() + "' and vchdate " + xprdRange + " ", "cnt");

            }
            catch (Exception e)
            {
                msg = e.ToString();
                msg = "Welcome";
            }

            List<Team6> mylist = new List<Team6>();
            try
            {
                mylist.Add(new Team6 { col1 = msg, col2 = dbd_caps, col3 = inf1, col4 = inf2, col5 = inf3, col6 = inf4, });
            }
            catch { }

            return mylist;
        }

        public List<Team6> Dbd_Prdapi(Team6 team6)
        {
            //-------------------------
            Fn_set_andapp_opts(team6.col1, "N");
            //------------------------

            string msg = "Success";
            OpenConn(team6.col1);
            makeCur(team6.col1.ToUpper());
            mq1 = "";


            string inf1 = "";
            string inf2 = "";
            string inf3 = "";
            string inf4 = "";
            string frm_cDt1 = "";
            string frm_cDt2 = "";
            string xprdRange = "";
            string dbd_caps = "";
            try
            {
                string mycocd = team6.col1.ToUpper().Trim();
                string mydate = DateTime.Now.ToString("dd/MM/yyyy");

                if (team6.col1.ToUpper().Trim() == "MCPL2" || team6.col1.ToUpper().Trim() == "MCPL4") mycocd = "MCPL";

                frm_cDt1 = fn_seek_iname(team6.col1, "", "Select to_Char(fmdate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%' and FMDATE<=TO_DATE('" + mydate + "','DD/MM/YYYY') AND TODATE>=TO_DATE('" + mydate + "','DD/MM/YYYY') order by fmdate desc", "fmdt");
                frm_cDt2 = fn_seek_iname(team6.col1, "", "Select to_Char(todate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%' and to_CHAR(FMDATE,'DD/MM/YYYY')='" + frm_cDt1 + "' order by fmdate desc", "fmdt");


                branchwise(team6.col1, "", team6.col2.Trim().ToUpper());


                dbd_caps = "Recd(Mth)!~!~!Tfr(Mth)!~!~!Recd(Today)!~!~!Tfr(Today)";

                Squery = "Select count(*) as cnt from multivch where " + branch_cd + " and type='YR' and to_char(vchdate,'yyyymm')=to_char(to_datE('" + mydate + "','dd/mm/yyyy'),'yyyymm') ";
                inf1 = fn_seek_iname(team6.col1, "", Squery, "cnt");

                Squery = "Select count(*) as cnt from multivch where " + branch_cd + " and type='YI' and to_char(vchdate,'yyyymm')=to_char(to_datE('" + mydate + "','dd/mm/yyyy'),'yyyymm') ";
                inf2 = fn_seek_iname(team6.col1, "", Squery, "cnt");


                Squery = "Select count(*) as cnt from multivch where " + branch_cd + " and type='YR' and to_char(vchdate,'dd/mm/yyyy')=to_char(to_datE('" + mydate + "','dd/mm/yyyy'),'dd/mm/yyyy')";
                inf3 = fn_seek_iname(team6.col1, "", Squery, "cnt");

                Squery = "Select count(*) as cnt from multivch where " + branch_cd + " and type='YI' and to_char(vchdate,'dd/mm/yyyy')=to_char(to_datE('" + mydate + "','dd/mm/yyyy'),'dd/mm/yyyy')";
                inf4 = fn_seek_iname(team6.col1, "", Squery, "cnt");

            }
            catch (Exception e)
            {
                msg = e.ToString();
                msg = "Welcome";
            }

            List<Team6> mylist = new List<Team6>();
            try
            {
                mylist.Add(new Team6 { col1 = msg, col2 = dbd_caps, col3 = inf1, col4 = inf2, col5 = inf3, col6 = inf4, });
            }
            catch { }

            return mylist;
        }

        public List<Team6> Dbd_Logiapi(Team6 team6)
        {
            //-------------------------
            Fn_set_andapp_opts(team6.col1, "N");
            //------------------------

            string msg = "Success";
            OpenConn(team6.col1);
            makeCur(team6.col1.ToUpper());
            mq1 = "";


            string inf1 = "";
            string inf2 = "";
            string inf3 = "";
            string inf4 = "";
            string frm_cDt1 = "";
            string frm_cDt2 = "";
            string xprdRange = "";
            string dbd_caps = "";
            try
            {
                string mycocd = team6.col1.ToUpper().Trim();
                string mydate = DateTime.Now.ToString("dd/MM/yyyy");

                if (team6.col1.ToUpper().Trim() == "MCPL2" || team6.col1.ToUpper().Trim() == "MCPL4") mycocd = "MCPL";

                frm_cDt1 = fn_seek_iname(team6.col1, "", "Select to_Char(fmdate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%' and FMDATE<=TO_DATE('" + mydate + "','DD/MM/YYYY') AND TODATE>=TO_DATE('" + mydate + "','DD/MM/YYYY') order by fmdate desc", "fmdt");
                frm_cDt2 = fn_seek_iname(team6.col1, "", "Select to_Char(todate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%' and to_CHAR(FMDATE,'DD/MM/YYYY')='" + frm_cDt1 + "' order by fmdate desc", "fmdt");

                branchwise(team6.col1, "", team6.col2.Trim().ToUpper());

                dbd_caps = "Arrived!~!~!Loaded!~!~!Started!~!~!Waiting";

                string fldfevas = "", work_br = "", sman_id = "";
                fldfevas = fn_seek_iname(team6.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team6.col2.ToUpper().Trim() + "'", "fstr");

                work_br = "00";


                if (fldfevas.Trim() != "0")
                {
                    work_br = fldfevas.Split('^')[0];

                }

                Squery = "Select count(*) as cnt from wb_logis_rec where branchcd='" + work_br + "' and type='11' and to_char(vchdate,'yyyymm')=to_char(to_datE('" + mydate + "','dd/mm/yyyy'),'yyyymm') ";
                inf1 = fn_seek_iname(team6.col1, "", Squery, "cnt");

                Squery = "select count(*) as cnt from (Select distinct vchnum from wb_logis_rec where branchcd='" + work_br + "' and type='12' and to_char(vchdate,'yyyymm')=to_char(to_datE('" + mydate + "','dd/mm/yyyy'),'yyyymm')) ";
                inf2 = fn_seek_iname(team6.col1, "", Squery, "cnt");

                Squery = "Select count(*) as cnt from wb_logis_rec where branchcd='" + work_br + "' and type='13' and to_char(vchdate,'yyyymm')=to_char(to_datE('" + mydate + "','dd/mm/yyyy'),'yyyymm') ";
                inf3 = fn_seek_iname(team6.col1, "", Squery, "cnt");


                inf4 = fn_seek_iname(team6.col1, "", "select " + inf1 + " - " + inf3 + " as cnt  from dual", "cnt");

            }
            catch (Exception e)
            {
                msg = e.ToString();
                msg = "Welcome";
            }

            List<Team6> mylist = new List<Team6>();
            try
            {
                mylist.Add(new Team6 { col1 = msg, col2 = dbd_caps, col3 = inf1, col4 = inf2, col5 = inf3, col6 = inf4, });
            }
            catch { }

            return mylist;
        }

        //------------------------------------------------
        public List<Team6> Dbd_Gateapi(Team6 team6)
        {
            //-------------------------
            Fn_set_andapp_opts(team6.col1, "N");
            //------------------------

            string msg = "Success";
            OpenConn(team6.col1);
            makeCur(team6.col1.ToUpper());
            mq1 = "";


            string inf1 = "";
            string inf2 = "";
            string inf3 = "";
            string inf4 = "";
            string frm_cDt1 = "";
            string frm_cDt2 = "";
            string xprdRange = "";
            string dbd_caps = "";
            try
            {
                string mycocd = team6.col1.ToUpper().Trim();
                string mydate = DateTime.Now.ToString("dd/MM/yyyy");

                if (team6.col1.ToUpper().Trim() == "MCPL2" || team6.col1.ToUpper().Trim() == "MCPL4") mycocd = "MCPL";

                frm_cDt1 = fn_seek_iname(team6.col1, "", "Select to_Char(fmdate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%' and FMDATE<=TO_DATE('" + mydate + "','DD/MM/YYYY') AND TODATE>=TO_DATE('" + mydate + "','DD/MM/YYYY') order by fmdate desc", "fmdt");
                frm_cDt2 = fn_seek_iname(team6.col1, "", "Select to_Char(todate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%' and to_CHAR(FMDATE,'DD/MM/YYYY')='" + frm_cDt1 + "' order by fmdate desc", "fmdt");

                branchwise(team6.col1, "", team6.col2.Trim().ToUpper());

                dbd_caps = "Arrived!~!~!Loaded!~!~!Started!~!~!Waiting";

                string fldfevas = "", work_br = "", sman_id = "";
                fldfevas = fn_seek_iname(team6.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team6.col2.ToUpper().Trim() + "'", "fstr");

                work_br = "00";


                if (fldfevas.Trim() != "0")
                {
                    work_br = fldfevas.Split('^')[0];

                }

                Squery = "Select count(*) as cnt from wb_logis_rec where branchcd='" + work_br + "' and type='11' and to_char(vchdate,'yyyymm')=to_char(to_datE('" + mydate + "','dd/mm/yyyy'),'yyyymm') ";
                inf1 = fn_seek_iname(team6.col1, "", Squery, "cnt");

                Squery = "select count(*) as cnt from (Select distinct vchnum from wb_logis_rec where branchcd='" + work_br + "' and type='12' and to_char(vchdate,'yyyymm')=to_char(to_datE('" + mydate + "','dd/mm/yyyy'),'yyyymm')) ";
                inf2 = fn_seek_iname(team6.col1, "", Squery, "cnt");

                Squery = "Select count(*) as cnt from wb_logis_rec where branchcd='" + work_br + "' and type='13' and to_char(vchdate,'yyyymm')=to_char(to_datE('" + mydate + "','dd/mm/yyyy'),'yyyymm') ";
                inf3 = fn_seek_iname(team6.col1, "", Squery, "cnt");


                inf4 = fn_seek_iname(team6.col1, "", "select " + inf1 + " - " + inf3 + " as cnt  from dual", "cnt");

            }
            catch (Exception e)
            {
                msg = e.ToString();
                msg = "Welcome";
            }

            List<Team6> mylist = new List<Team6>();
            try
            {
                mylist.Add(new Team6 { col1 = msg, col2 = dbd_caps, col3 = inf1, col4 = inf2, col5 = inf3, col6 = inf4, });
            }
            catch { }

            return mylist;
        }
        public List<Team6> Dbd_Commapi(Team6 team6)
        {
            //-------------------------
            Fn_set_andapp_opts(team6.col1, "N");
            //------------------------

            string msg = "Success";
            OpenConn(team6.col1);
            makeCur(team6.col1.ToUpper());
            mq1 = "";


            string inf1 = "";
            string inf2 = "";
            string inf3 = "";
            string inf4 = "";
            string frm_cDt1 = "";
            string frm_cDt2 = "";
            string xprdRange = "";
            string dbd_caps = "";
            try
            {
                string mycocd = team6.col1.ToUpper().Trim();
                string mydate = DateTime.Now.ToString("dd/MM/yyyy");

                if (team6.col1.ToUpper().Trim() == "MCPL2" || team6.col1.ToUpper().Trim() == "MCPL4") mycocd = "MCPL";

                frm_cDt1 = fn_seek_iname(team6.col1, "", "Select to_Char(fmdate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%' and FMDATE<=TO_DATE('" + mydate + "','DD/MM/YYYY') AND TODATE>=TO_DATE('" + mydate + "','DD/MM/YYYY') order by fmdate desc", "fmdt");
                frm_cDt2 = fn_seek_iname(team6.col1, "", "Select to_Char(todate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%' and to_CHAR(FMDATE,'DD/MM/YYYY')='" + frm_cDt1 + "' order by fmdate desc", "fmdt");

                branchwise(team6.col1, "", team6.col2.Trim().ToUpper());

                dbd_caps = "Arrived!~!~!Loaded!~!~!Started!~!~!Waiting";

                string fldfevas = "", work_br = "", sman_id = "";
                fldfevas = fn_seek_iname(team6.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team6.col2.ToUpper().Trim() + "'", "fstr");

                work_br = "00";


                if (fldfevas.Trim() != "0")
                {
                    work_br = fldfevas.Split('^')[0];

                }

                Squery = "Select count(*) as cnt from wb_logis_rec where branchcd='" + work_br + "' and type='11' and to_char(vchdate,'yyyymm')=to_char(to_datE('" + mydate + "','dd/mm/yyyy'),'yyyymm') ";
                inf1 = fn_seek_iname(team6.col1, "", Squery, "cnt");

                Squery = "select count(*) as cnt from (Select distinct vchnum from wb_logis_rec where branchcd='" + work_br + "' and type='12' and to_char(vchdate,'yyyymm')=to_char(to_datE('" + mydate + "','dd/mm/yyyy'),'yyyymm')) ";
                inf2 = fn_seek_iname(team6.col1, "", Squery, "cnt");

                Squery = "Select count(*) as cnt from wb_logis_rec where branchcd='" + work_br + "' and type='13' and to_char(vchdate,'yyyymm')=to_char(to_datE('" + mydate + "','dd/mm/yyyy'),'yyyymm') ";
                inf3 = fn_seek_iname(team6.col1, "", Squery, "cnt");


                inf4 = fn_seek_iname(team6.col1, "", "select " + inf1 + " - " + inf3 + " as cnt  from dual", "cnt");

            }
            catch (Exception e)
            {
                msg = e.ToString();
                msg = "Welcome";
            }

            List<Team6> mylist = new List<Team6>();
            try
            {
                mylist.Add(new Team6 { col1 = msg, col2 = dbd_caps, col3 = inf1, col4 = inf2, col5 = inf3, col6 = inf4, });
            }
            catch { }

            return mylist;
        }

        public List<Team6> Dbd_Qrinvapi(Team6 team6)
        {
            //-------------------------
            Fn_set_andapp_opts(team6.col1, "N");
            //------------------------

            string msg = "Success";
            OpenConn(team6.col1);
            makeCur(team6.col1.ToUpper());
            mq1 = "";


            string inf1 = "";
            string inf2 = "";
            string inf3 = "";
            string inf4 = "";
            string frm_cDt1 = "";
            string frm_cDt2 = "";
            string xprdRange = "";
            string dbd_caps = "";
            try
            {
                string mycocd = team6.col1.ToUpper().Trim();
                string mydate = DateTime.Now.ToString("dd/MM/yyyy");

                if (team6.col1.ToUpper().Trim() == "MCPL2" || team6.col1.ToUpper().Trim() == "MCPL4") mycocd = "MCPL";

                frm_cDt1 = fn_seek_iname(team6.col1, "", "Select to_Char(fmdate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%' and FMDATE<=TO_DATE('" + mydate + "','DD/MM/YYYY') AND TODATE>=TO_DATE('" + mydate + "','DD/MM/YYYY') order by fmdate desc", "fmdt");
                frm_cDt2 = fn_seek_iname(team6.col1, "", "Select to_Char(todate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%' and to_CHAR(FMDATE,'DD/MM/YYYY')='" + frm_cDt1 + "' order by fmdate desc", "fmdt");

                branchwise(team6.col1, "", team6.col2.Trim().ToUpper());

                dbd_caps = "Arrived!~!~!Loaded!~!~!Started!~!~!Waiting";

                string fldfevas = "", work_br = "", sman_id = "";
                fldfevas = fn_seek_iname(team6.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team6.col2.ToUpper().Trim() + "'", "fstr");

                work_br = "00";


                if (fldfevas.Trim() != "0")
                {
                    work_br = fldfevas.Split('^')[0];

                }

                Squery = "Select count(*) as cnt from wb_logis_rec where branchcd='" + work_br + "' and type='11' and to_char(vchdate,'yyyymm')=to_char(to_datE('" + mydate + "','dd/mm/yyyy'),'yyyymm') ";
                inf1 = fn_seek_iname(team6.col1, "", Squery, "cnt");

                Squery = "select count(*) as cnt from (Select distinct vchnum from wb_logis_rec where branchcd='" + work_br + "' and type='12' and to_char(vchdate,'yyyymm')=to_char(to_datE('" + mydate + "','dd/mm/yyyy'),'yyyymm')) ";
                inf2 = fn_seek_iname(team6.col1, "", Squery, "cnt");

                Squery = "Select count(*) as cnt from wb_logis_rec where branchcd='" + work_br + "' and type='13' and to_char(vchdate,'yyyymm')=to_char(to_datE('" + mydate + "','dd/mm/yyyy'),'yyyymm') ";
                inf3 = fn_seek_iname(team6.col1, "", Squery, "cnt");


                inf4 = fn_seek_iname(team6.col1, "", "select " + inf1 + " - " + inf3 + " as cnt  from dual", "cnt");

            }
            catch (Exception e)
            {
                msg = e.ToString();
                msg = "Welcome";
            }

            List<Team6> mylist = new List<Team6>();
            try
            {
                mylist.Add(new Team6 { col1 = msg, col2 = dbd_caps, col3 = inf1, col4 = inf2, col5 = inf3, col6 = inf4, });
            }
            catch { }

            return mylist;
        }

        //------------------------------------------------
        public List<Team6> Dbd_hrapi(Team6 team6)
        {
            //-------------------------
            Fn_set_andapp_opts(team6.col1, "N");
            //------------------------

            string msg = "Success";
            OpenConn(team6.col1);
            makeCur(team6.col1.ToUpper());
            mq1 = "";


            string inf1 = "";
            string inf2 = "";
            string inf3 = "";
            string inf4 = "";
            string frm_cDt1 = "";
            string frm_cDt2 = "";
            string xprdRange = "";
            string dbd_caps = "";
            try
            {
                string mycocd = team6.col1.ToUpper().Trim();
                string mydate = DateTime.Now.ToString("dd/MM/yyyy");

                if (team6.col1.ToUpper().Trim() == "MCPL2" || team6.col1.ToUpper().Trim() == "MCPL4") mycocd = "MCPL";

                frm_cDt1 = fn_seek_iname(team6.col1, "", "Select to_Char(fmdate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%' and FMDATE<=TO_DATE('" + mydate + "','DD/MM/YYYY') AND TODATE>=TO_DATE('" + mydate + "','DD/MM/YYYY') order by fmdate desc", "fmdt");
                frm_cDt2 = fn_seek_iname(team6.col1, "", "Select to_Char(todate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%' and to_CHAR(FMDATE,'DD/MM/YYYY')='" + frm_cDt1 + "' order by fmdate desc", "fmdt");

                xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";

                if (team6.col1.ToUpper().Trim() == "MCPL2" || team6.col1.ToUpper().Trim() == "MCPL4") mycocd = "MCPL";

                branchwise(team6.col1, "", team6.col2.Trim().ToUpper());

                inf1 = fn_seek_iname(team6.col1, "", "Select count(*) as cnt from wb_LEVREQ where type='LR' and upper(trim(ent_by))='" + team6.col2.Trim().ToUpper() + "' and lrqdt " + xprdRange + " ", "cnt");

                inf3 = fn_seek_iname(team6.col1, "", "Select count(*) as cnt from wb_smv_rec where  type='CI' and upper(trim(ent_by))='" + team6.col2.Trim().ToUpper() + "' and vchdate " + xprdRange + " ", "cnt");
                inf4 = fn_seek_iname(team6.col1, "", "Select count(*) as cnt from wb_smv_rec where  type='CO' and upper(trim(ent_by))='" + team6.col2.Trim().ToUpper() + "' and vchdate " + xprdRange + " ", "cnt");

                if (team6.col1.ToUpper().Trim() == "MINV")
                {
                    dbd_caps = "Leave Requests!~!~!Approved Requests!~!~!OD-Check-In!~!~!OD-Check-Out";
                    inf2 = fn_seek_iname(team6.col1, "", "Select count(*) as cnt from wb_LEVREQ where type='LR' and upper(trim(ent_by))='" + team6.col2.Trim().ToUpper() + "' and lrqdt " + xprdRange + " and trim(nvl(app_by,'-'))!='-'", "cnt");
                }
                else
                {
                    inf2 = fn_seek_iname(team6.col1, "", "Select round(sum(dramt)/1000,2) as cnt from payadv where  upper(trim(ent_by))='" + team6.col2.Trim().ToUpper() + "' and vchdate " + xprdRange + " ", "cnt") + " K";
                    dbd_caps = "Leave Requests!~!~!Advance Requests!~!~!Check-In!~!~!Check-Outs";
                }


            }
            catch (Exception e)
            {
                msg = e.ToString();
                msg = "Welcome";
            }

            List<Team6> mylist = new List<Team6>();
            try
            {
                mylist.Add(new Team6 { col1 = msg, col2 = dbd_caps, col3 = inf1, col4 = inf2, col5 = inf3, col6 = inf4, });
            }
            catch { }

            return mylist;
        }

        //------------------------------------------------
        public List<Team6> Dbd_strapi(Team6 team6)
        {
            //-------------------------
            Fn_set_andapp_opts(team6.col1, "N");
            //------------------------

            string msg = "Success";
            OpenConn(team6.col1);
            makeCur(team6.col1.ToUpper());
            mq1 = "";


            string inf1 = "";
            string inf2 = "";
            string inf3 = "";
            string inf4 = "";
            string frm_cDt1 = "";
            string frm_cDt2 = "";
            string xprdRange = "";
            string dbd_caps = "";
            try
            {
                string mycocd = team6.col1.ToUpper().Trim();
                string mydate = DateTime.Now.ToString("dd/MM/yyyy");

                if (team6.col1.ToUpper().Trim() == "MCPL2" || team6.col1.ToUpper().Trim() == "MCPL4") mycocd = "MCPL";

                frm_cDt1 = fn_seek_iname(team6.col1, "", "Select to_Char(fmdate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%' and FMDATE<=TO_DATE('" + mydate + "','DD/MM/YYYY') AND TODATE>=TO_DATE('" + mydate + "','DD/MM/YYYY') order by fmdate desc", "fmdt");
                frm_cDt2 = fn_seek_iname(team6.col1, "", "Select to_Char(todate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%' and to_CHAR(FMDATE,'DD/MM/YYYY')='" + frm_cDt1 + "' order by fmdate desc", "fmdt");

                xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";

                if (team6.col1.ToUpper().Trim() == "MCPL2" || team6.col1.ToUpper().Trim() == "MCPL4") mycocd = "MCPL";

                branchwise(team6.col1, "", team6.col2.Trim().ToUpper());


                dbd_caps = "Issue Requests!~!~!Issue Done!~!~!Return Requests!~!~!Purchase Requests";

                Squery = "Select count(*) as cnt from wb_iss_Req where branchcd!='DD' and  type like '3%'  and vchdate " + xprdRange + " and upper(trim(ent_by))='" + team6.col2.Trim().ToUpper() + "'";
                inf1 = fn_seek_iname(team6.col1, "", Squery, "cnt");

                Squery = "Select count(*) as cnt from ivoucher where branchcd!='DD' and  type like '3%' and vchdate " + xprdRange + " and upper(trim(pname))='" + team6.col2.Trim().ToUpper() + "' ";
                inf1 = fn_seek_iname(team6.col1, "", Squery, "cnt");

                Squery = "Select count(*) as cnt from wb_iss_Req where branchcd!='DD' and  type='11'  and vchdate " + xprdRange + " and upper(trim(ent_by))='" + team6.col2.Trim().ToUpper() + "'";
                inf2 = fn_seek_iname(team6.col1, "", Squery, "cnt");

                Squery = "Select count(*) as cnt from pomas where branchcd!='DD' and  type='60'  and orddt " + xprdRange + " and upper(trim(ent_by))='" + team6.col2.Trim().ToUpper() + "'";
                inf4 = fn_seek_iname(team6.col1, "", Squery, "cnt");

            }
            catch (Exception e)
            {
                msg = e.ToString();
                msg = "Welcome";
            }

            List<Team6> mylist = new List<Team6>();
            try
            {
                mylist.Add(new Team6 { col1 = msg, col2 = dbd_caps, col3 = inf1, col4 = inf2, col5 = inf3, col6 = inf4, });
            }
            catch { }

            return mylist;
        }

        //------------------------------------------------
        public List<Team6> Dbd_Mtnapi(Team6 team6)
        {
            //-------------------------
            Fn_set_andapp_opts(team6.col1, "N");
            //------------------------

            string msg = "Success";
            OpenConn(team6.col1);
            makeCur(team6.col1.ToUpper());
            mq1 = "";


            string inf1 = "";
            string inf2 = "";
            string inf3 = "";
            string inf4 = "";
            string frm_cDt1 = "";
            string frm_cDt2 = "";
            string xprdRange = "";
            string dbd_caps = "";
            try
            {




                string mycocd = team6.col1.ToUpper().Trim();
                string mydate = DateTime.Now.ToString("dd/MM/yyyy");

                if (team6.col1.ToUpper().Trim() == "MCPL2" || team6.col1.ToUpper().Trim() == "MCPL4") mycocd = "MCPL";

                frm_cDt1 = fn_seek_iname(team6.col1, "", "Select to_Char(fmdate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%' and FMDATE<=TO_DATE('" + mydate + "','DD/MM/YYYY') AND TODATE>=TO_DATE('" + mydate + "','DD/MM/YYYY') order by fmdate desc", "fmdt");
                frm_cDt2 = fn_seek_iname(team6.col1, "", "Select to_Char(todate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%' and to_CHAR(FMDATE,'DD/MM/YYYY')='" + frm_cDt1 + "' order by fmdate desc", "fmdt");

                xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";

                if (team6.col1.ToUpper().Trim() == "MCPL2" || team6.col1.ToUpper().Trim() == "MCPL4") mycocd = "MCPL";

                branchwise(team6.col1, "", team6.col2.Trim().ToUpper());

                string last30_prd = "";
                last30_prd = "between to_datE('" + mydate + "','dd/mm/yyyy')-31 and to_datE('" + mydate + "','dd/mm/yyyy')";

                string fldfevas = "", work_br = "", sman_id = "";
                fldfevas = fn_seek_iname(team6.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team6.col2.ToUpper().Trim() + "'", "fstr");

                work_br = "00";


                if (fldfevas.Trim() != "0")
                {
                    work_br = fldfevas.Split('^')[0];

                }


                dbd_caps = "Maint. Rcvd!~!~!Maint Cleared!~!~!Maint. Pending!~!~!Pending_%";

                Squery = "Select count(*) as cnt from wb_maint_comp where branchcd='" + work_br + "' and  type like 'MQ%'  and vchdate " + last30_prd + " ";
                inf1 = fn_seek_iname(team6.col1, "", Squery, "cnt");

                Squery = "Select count(*) as cnt from wb_maint_comp where branchcd='" + work_br + "' and  type like 'MQ%'  and vchdate " + last30_prd + " and trim(nvl(app_by,'-'))!='-' ";
                inf2 = fn_seek_iname(team6.col1, "", Squery, "cnt");

                inf3 = fn_seek_iname(team6.col1, "", "select " + inf1 + " - " + inf2 + " as cnt  from dual", "cnt");

                inf4 = "";
                try
                {
                    inf4 = fn_seek_iname(team6.col1, "", "Select (Case when (" + inf1 + ") >0 then (100-round((((" + inf2 + ")-(" + 0 + "))/(" + inf1 + "))*100,2)) else 0 end)||' %' as Bas_Val from dual", "Bas_Val");
                }
                catch
                { }

                //inf4 = fn_seek_iname(team6.col1, "", "select (Case when is_number(inf1)>0 then round((is_number(" + inf2 + ")/is_number(" + inf1 + "))/100,2)*100 as cnt  from dual", "cnt");


            }
            catch (Exception e)
            {
                msg = e.ToString();
                msg = "Welcome";
            }

            List<Team6> mylist = new List<Team6>();
            try
            {
                mylist.Add(new Team6 { col1 = msg, col2 = dbd_caps, col3 = inf1, col4 = inf2, col5 = inf3, col6 = inf4, });
            }
            catch { }

            return mylist;
        }


        //------------------------------------------------
        // Api for for getting year syart dt by APP 08/11/2017
        //------------------------------------------------

        public List<Team> chkyr_Start_api(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            //------------------------

            string msg = "Success";
            OpenConn(team.col1);
            mq1 = "";
            string mq2;
            mq2 = "";
            try
            {
                mq2 = fn_seek_iname(team.col1, "", "Select to_char((LAST_DAY(ADD_MONTHS(to_DaTE(sysdate),-1))),'dd/mm/yyyy') AS xdt2 from dual", "xdt2");

                string mydate = DateTime.Now.ToString("dd/MM/yyyy");

                string mycocd = team.col1.ToUpper().Trim();
                if (team.col1.ToUpper().Trim() == "MCPL2" || team.col1.ToUpper().Trim() == "MCPL4") mycocd = "MCPL";
                mq1 = fn_seek_iname(team.col1, "", "Select to_Char(fmdate,'dd/mm/yyyy') as fmdt from co where code like '" + mycocd + "%'  and FMDATE<=TO_DATE('" + mydate + "','DD/MM/YYYY') AND TODATE<=TO_DATE('" + mydate + "','DD/MM/YYYY') order by fmdate desc", "fmdt");
                if (mq1 == "0" || mq1 == "-")
                { msg = "Failure"; }
                else
                { msg = "Success"; }

            }
            catch (Exception e)
            {
                msg = e.ToString();
                msg = "Failure";
            }

            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = mq1, col3 = mq2, col4 = "-", col5 = "-", });
            }
            catch { }

            return mylist;
        }

        //------------------------------------------------
        // Api for for getting email id of user by APP 08/11/2017
        //------------------------------------------------

        public List<Team> reg_mail_api(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            //------------------------

            string msg = "Success";
            OpenConn(team.col1);
            mq1 = "";
            string mq2;
            mq2 = "";
            try
            {
                mq1 = fn_seek_iname(team.col1, "", "Select trim(nvl(emailid,'-')) as emailid from evas where username='" + team.col2.ToUpper().Trim() + "'", "emailid");
                if (mq1 == "0" || mq1 == "-")
                { msg = "Failure"; }
                else
                { msg = "Success"; }

                mq2 = fn_seek_iname(team.col1, "", "Select trim(nvl(level3pw,'-')) as level3pw from evas where username='" + team.col2.ToUpper().Trim() + "'", "level3pw");

            }
            catch (Exception e)
            {
                msg = e.ToString();
                msg = "Failure";
            }

            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = mq1, col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            //----------------------------------

            string htmlTag = "";
            htmlTag = htmlTag + "<html><head></head><body> ";
            htmlTag = htmlTag + "Hi,<br>";
            htmlTag = htmlTag + "Warm Greetings from Finsys<br>";
            htmlTag = htmlTag + "The Current Password is : " + mq2 + " <br>";
            htmlTag = htmlTag + "Please take note and delete this Mail<br> ";

            //// table structure
            //htmlTag = htmlTag + "<table> ";
            //// table row
            //htmlTag = htmlTag + "<tr> ";
            //// table data
            //htmlTag = htmlTag + "<td>  ";
            //htmlTag = htmlTag + "first colm of table  ";
            //htmlTag = htmlTag + "</td> ";
            //htmlTag = htmlTag + "</tr> ";
            //htmlTag = htmlTag + "</table> ";

            htmlTag = htmlTag + "<br> ";
            htmlTag = htmlTag + "Thanks & Regards<br><br>";
            htmlTag = htmlTag + "Finsys ERP <br> ";

            sendemailNew("FINS", mq1, "", "", "Msg Generated by You", htmlTag);
            //----------------------------------
            return mylist;
        }

        //------------------------------------------------
        // Api for Rate History from approval Screen by APP 03/11/2017
        //------------------------------------------------
        //branchcd||trim(type)||trim(ordno)||to_char(orddt,'yyyymmdd')||trim(icode)||srno='" + qrlist[i].ToString().Remove(0,1) + "'
        public List<Team6> RateHist_api(Team6 team6)
        {
            //-------------------------
            Fn_set_andapp_opts(team6.col1, "N");
            //------------------------

            List<Team6> list = new List<Team6>();
            switch (team6.col2)
            {
                case "EP201":
                    mq = "select col1,col2,col3,col4,col5,col6 from (Select 'Customer,Dated,Rate,Disc,Qty' as col1,b.Aname as col2,to_char(a.orddt,'dd/mm/yyyy')  as col3,a.irate  as col4,a.cdisc as col5,a.Qtyord as col6 from somas a, famst b where trim(A.acode)=trim(B.acode) and a." + branch_cd + " and a.type like '4%' and a.app_by!='-' and trim(A.icode)='" + team6.col3.Substring(18, 8).Trim() + "'  order by to_char(a.orddt,'yyyymmdd') desc ) where rownum<10 ";
                    break;
                case "EP202":
                    mq = "select col1,col2,col3,col4,col5,col6 from (Select 'Vendor,Dated,Rate,Disc,Qty' as col1,b.Aname as col2,to_char(a.orddt,'dd/mm/yyyy')  as col3,a.prate  as col4,a.pdisc as col5,a.Qtyord as col6 from pomas a, famst b where trim(A.acode)=trim(B.acode) and a." + branch_cd + " and a.type like '5%' and a.app_by!='-' and trim(A.icode)='" + team6.col3.Substring(18, 8).Trim() + "'  order by to_char(a.orddt,'yyyymmdd') desc ) where rownum<10 ";
                    break;
                case "EP203":
                    mq = "select col1,col2,col3,col4,col5,col6 from (Select 'Deptt,Dated,Rate,Disc,Qty' as col1,a.Bank as col2,to_char(a.orddt,'dd/mm/yyyy')  as col3,a.prate  as col4,a.pdisc as col5,a.qtyord as col6 from pomas a where a." + branch_cd + " and a.type like '60%' and a.app_by!='-' and trim(A.icode)='" + team6.col3.Substring(18, 8).Trim() + "'  order by to_char(a.orddt,'yyyymmdd') desc ) where rownum<10 ";
                    break;
            }
            try
            {
                DataTable dt = new DataTable();
                dt = getdata(team6.col1, "-", mq);
                list = (from DataRow row in dt.Rows
                        select new Team6()
                        {
                            col1 = row["col1"].ToString(),
                            col2 = row["col2"].ToString(),
                            col3 = row["col3"].ToString(),
                            col4 = row["col4"].ToString(),
                            col5 = row["col5"].ToString(),
                            col6 = row["col6"].ToString(),
                        }).ToList();
            }
            catch (Exception e)
            {

                list.Add(new Team6 { col1 = e.Message.ToString(), col2 = "-", col3 = "-", col4 = "-", col5 = "-", col6 = "-", });
            }

            return list;
        }


        //------------------------------------------------
        // Api for Sending Data For ESKO/IMP by APP 09/09/2020
        //------------------------------------------------

        public List<Team6> finsys_feed(Team6 team6)
        {

            //-------------------------
            Fn_set_andapp_opts(team6.col1, "N");
            //------------------------

            List<Team6> list = new List<Team6>();


            string mq2 = "";

            makeCur(team6.col1.ToUpper());

            mq2 = fn_seek_iname(team6.col1, "", "Select to_char((LAST_DAY(ADD_MONTHS(to_DaTE(sysdate),-0))),'dd/mm/yyyy') AS xdt2 from dual", "xdt2");




            switch (team6.col2)
            {
                case "DF101":
                    //enquiry data
                    mq = "select col1,col2,col3,col4,col5,'DataFeed_api' as col6 from  (Select 'SalesMan!~!~!Enq_Dt!~!~!Enq_No!~!~!Customer!~!~!Product!~!~!Quantity!~!~!ItemCatg' as col1,trim(upper(a.act_by))||'!~!~!'||to_char(a.vchdate,'dd/mm/yyyy')||'!~!~!'||trim(a.branchcd||'-'||a.type||'-'||a.vchnum)||'!~!~!'||trim(a.Client)||'!~!~!'||trim(a.item)||'!~!~!'||to_char(a.qtyord,'9999999999')||'!~!~!'||trim(a.Itemcat) as col2,'-' as col3,'-' as col4,to_char(a.vchdate,'yyyymmdd')||a.branchcd as col5 from enq_mast a, type b where trim(A.branchcd)=trim(B.type1) and b.id='B' and a.branchcd='" + team6.col4 + "' and a.type like '20%' and a.vchdate between to_datE('" + team6.col3 + "','dd/mm/yyyy') and to_datE('" + team6.col3 + "','dd/mm/yyyy')  order by a.branchcd,to_char(a.vchdate,'yyyymmdd'),a.vchnum,a.srno ) ";
                    break;
                case "DF102":
                    mq = "select col1,col2,col3,col4,col5,'DataFeed_api' as col6 from  (Select 'SalesMan!~!~!SO_Dt!~!~!SO_No!~!~!Customer!~!~!Product!~!~!Quantity!~!~!Delivery_Dt' as col1,trim(upper(a.BUSI_EXPECT))||'!~!~!'||to_char(a.orddt,'dd/mm/yyyy')||'!~!~!'||trim(a.branchcd||'-'||a.type||'-'||a.ordno)||'!~!~!'||trim(b.aname)||'!~!~!'||trim(c.iname)||'!~!~!'||to_char(a.qtyord,'9999999999')||'!~!~!'||to_char(a.cu_chldt,'dd/mm/yyyy') as col2,'-' as col3,'-' as col4,to_char(a.orddt,'yyyymmdd')||a.branchcd as col5 from somas a, famst b,item c where trim(A.acode)=trim(B.acode) and trim(A.icode)=trim(c.Icode) and a.branchcd='" + team6.col4 + "' and a.type like '4%' and a.orddt between to_datE('" + team6.col3 + "','dd/mm/yyyy') and to_datE('" + team6.col3 + "','dd/mm/yyyy')  order by a.branchcd,to_char(a.orddt,'yyyymmdd'),a.ordno,a.srno ) ";
                    break;
            }
            try
            {
                DataTable dt = new DataTable();
                dt = getdata(team6.col1, "-", mq);
                list = (from DataRow row in dt.Rows
                        select new Team6()
                        {
                            col1 = row["col1"].ToString(),
                            col2 = row["col2"].ToString(),
                            col3 = row["col3"].ToString(),
                            col4 = row["col4"].ToString(),
                            col5 = row["col5"].ToString(),
                            col6 = row["col6"].ToString(),
                        }).ToList();
            }
            catch (Exception e)
            {

                list.Add(new Team6 { col1 = e.Message.ToString(), col2 = "-", col3 = "-", col4 = "-", col5 = "-", col6 = "-", });
            }

            return list;
        }

        //--------------------------
        //api for ADVG :: to validate phone no. of employee  26/10/2020
        //--------------------------
        public List<Team6> avg_emp_phone(Team6 team6)
        {
            //-------------------------
            Fn_set_andapp_opts(team6.col1, "N");
            //------------------------

            string err = "", results = "";
            string Data_found = "N";
            string[] qrlist;
            string[] scodelist;
            string ReturnVal = "";
            int cnt = 0;
            int dtrows = 0;
            try
            {
                mq = "-";
                scodelist = Regex.Split(team6.col2, team6.col5);
                cnt = scodelist.Length;
                for (int i = 0; i < cnt; i++)
                {
                    if (mq.Equals("-")) mq = "'" + scodelist[i].ToString().Trim() + "'";
                    else mq = mq + ",'" + scodelist[i].ToString().Trim() + "'";

                }

                branch_cd = "branchcd!='DD' ";
                dt = new DataTable();
                string mqq = "";
                mqq = "SELECT 'Success' as col1,branchcd||'-'||trim(empcode) as col2,trim(Name) as col3,replace(trim(mobile),'-','') as col4,TRIM(nvl(panno,'-')) as col5,TRIM(nvl(ADHARNO,'-')) as col6 from empmas where length(Trim(nvl(leaving_dt,'-')))<5 and  replace(trim(mobile),'-','') in (" + mq + ")";
                dt = getdata(team6.col1, "-", mqq);
                if (dt.Rows.Count > 0) ReturnVal = dt.Rows[0][0].ToString();
                List<Team6> list = new List<Team6>();

                if (1 == 2)
                {

                }
                else
                {
                    list = (from DataRow row in dt.Rows
                            select new Team6()
                            {
                                col1 = row["col1"].ToString(),
                                col2 = row["col2"].ToString(),
                                col3 = row["col3"].ToString(),
                                col4 = row["col4"].ToString(),
                                col5 = row["col5"].ToString(),
                                col6 = row["col6"].ToString(),
                            }).ToList();

                    dtrows = dt.Rows.Count;
                    if (dtrows <= 0)
                    {
                        list.Add(new Team6 { col1 = "Failure", col2 = team6.col2, col3 = "-", col4 = "-", col5 = "-", col6 = "Record not found", });
                    }

                }
                return list;
                //}
            }
            catch (Exception e)
            {
                err = e.Message.ToString();

            }
            List<Team6> mylist = new List<Team6>();
            mylist.Add(new Team6 { col1 = results, col2 = "-", col3 = "-", col4 = "-", col5 = "-", col6 = err, });
            return mylist;
        }

        //------------------------------------------------
        // old api made earlier
        //------------------------------------------------

        public List<Team6> avg_emp_attn(Team6 team6)
        {

            //-------------------------
            Fn_set_andapp_opts(team6.col1, "N");
            //------------------------

            string brachcd = "-", type = "-", vchnum = "-", vchdate = "-";
            String mq0 = "";

            mq0 = team6.col2;
            string tempcode = "-";
            string temgrade = "-";
            string temp_mob = "-";
            string time_hr = "";
            string time_min = "";
            string stime_hr = "";


            string msg = "Data Saved";
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            OpenConn(team6.col1);

            OracleTransaction transaction;
            transaction = con.BeginTransaction(IsolationLevel.ReadCommitted);
            OracleCommand command = con.CreateCommand();
            command.Transaction = transaction;
            co_cd = team6.col1;
            try
            {

                for (int i = 0; i < qrlist.Length; i++)
                {
                    temp_mob = qrlist[i].ToString().Split('#')[0].ToString();

                    tempcode = fn_seek_iname(co_cd, "", "Select empcode from empmas where replace(trim(mobile),'-','')='" + temp_mob + "'", "empcode");
                    temgrade = fn_seek_iname(co_cd, "", "Select grade from empmas where empcode='" + tempcode + "' and replace(trim(mobile),'-','')='" + temp_mob + "'", "grade");
                    brachcd = fn_seek_iname(co_cd, "", "Select branchcd from empmas where empcode='" + tempcode + "' and replace(trim(mobile),'-','')='" + temp_mob + "'", "branchcd");


                    type = "10";
                    vchnum = next_no(team6.col1, brachcd, "-", "select max(vchnum) as max from attn_tm where branchcd ='" + brachcd + "'", 6, "max");
                    vchdate = Fn_curr_dt(team6.col1, brachcd, "-");

                    stime_hr = fn_seek_iname(co_cd, "", "Select to_char(sysdate,'DD/MM/YYYY :hh24:mi:ss') as fstr from dual", "fstr");
                    time_hr = stime_hr.Substring(12, 2);
                    time_min = stime_hr.Substring(15, 2);

                    mq = "insert into attn_tm (branchcd,type,vchnum,vchdate,grade,empcode,timeinhr,timeinmin) values('" + brachcd + "','" + type + "','" + vchnum + "',to_date('" + vchdate + "','dd/MM/yyyy'),'" + temgrade + "','" + tempcode + "'," + time_hr + "," + time_min + ")";

                    command.CommandText = mq;
                    command.ExecuteNonQuery();
                }
                transaction.Commit();

            }
            catch (Exception e)
            {
                transaction.Rollback();
                msg = e.ToString();
                msg = "Data Not Saved";
            }


            List<Team6> mylist = new List<Team6>();
            try
            {

                mylist.Add(new Team6 { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", col6 = msg, });
            }
            catch { }
            return mylist;
        }



        //------------------------------------------------
        // new api_for_android 15/06/2021 onwards
        //------------------------------------------------


        public List<Team6> Mob_Opt_api(Team6 team6)
        {
            //-------------------------
            Fn_set_andapp_opts(team6.col1, "Y");
            //------------------------

            string msg = "Success";

            OpenConn(team6.col1);
            makeCur(team6.col1.ToUpper());
            mq1 = "";

            string dbd_caps = "";
            string inf1 = "";
            string inf2 = "";
            string inf3 = "";
            string inf4 = "";


            string mycocd = team6.col1.ToUpper().Trim();

            branchwise(team6.col1, "", team6.col2.Trim().ToUpper());

            // 

            inf1 = "";
            inf2 = "";
            inf3 = "";
            inf4 = "";

            string zcode = team6.col1.ToUpper().Trim();


            if (zcode == "MCPL2") zcode = "MCPL";
            if (zcode == "MCPL4") zcode = "MCPL";


            string opts_allow = fn_seek_iname(team6.col1, "-", "Select trim(and_app_allow) as app_all FROM CO WHERE CODE LIKE '" + zcode + "%' ORDER BY code", "app_all");

            dbd_caps = "Finsys!~!~!Finsys!~!~!Finsys!~!~!Finsys!~!~!Finsys!~!~!Finsys!~!~!Finsys!~!~!Finsys!~!~!Finsys";


            string mq = "";
            DataTable dt = new DataTable();
            mq = "select op_text,trim(substr(op_act,3,100)) as op_act,trim(API_4_DBD) as API_4_DBD  from WB_map_module where trim(nvl(op_act,'-'))!='-' order by op_id ";



            DataTable dt2 = new DataTable();
            dt2 = getdata(team6.col1, "-", mq);


            if (dt2.Rows.Count < 1)
            {
                inf1 = "No Options";
            }
            else
            {
                for (int i = 0; i < dt2.Rows.Count; i++)
                {
                    inf1 = inf1 + dt2.Rows[i]["op_text"].ToString() + "!~!~!";
                    inf2 = inf2 + dt2.Rows[i]["op_act"].ToString() + "!~!~!";
                    inf3 = inf3 + dt2.Rows[i]["API_4_DBD"].ToString() + "!~!~!";
                }

            }
            inf4 = opts_allow;

            string tile_allow = fn_seek_iname(team6.col1.Trim(), "", "select distinct trim(app_allow) as app_allow from evas_app_Rt where username='" + team6.col2.Trim().ToUpper() + "'", "app_allow");

            if (tile_allow.Length > 2)
            {
                string[] ap_allow = Regex.Split(opts_allow, "!~!~!");
                for (int i = 0; i <= ap_allow.Length - 1; i++)
                {
                    string x = ap_allow[i].ToString();
                    if (x == "T")
                    {
                        if (tile_allow.Contains(i.ToString().Trim()))
                        { }
                        else
                        {
                            ap_allow[i] = "F";
                        }
                    }
                }
                string user_opts_allow;
                user_opts_allow = "";
                for (int i = 0; i <= ap_allow.Length - 1; i++)
                {
                    if (i != ap_allow.Length - 1)
                    {
                        user_opts_allow = user_opts_allow + ap_allow[i] + "!~!~!";
                    }
                }
                inf4 = user_opts_allow;
            }






            List<Team6> mylist = new List<Team6>();
            try
            {
                mylist.Add(new Team6 { col1 = msg, col2 = dbd_caps, col3 = inf1, col4 = inf2, col5 = inf3, col6 = inf4, });
            }
            catch { }

            return mylist;
        }



        // hrm options (MPI)
        public List<Team> Menu_hrapi(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            //------------------------
            string mq = "";
            DataTable dt = new DataTable();
            mq = Fn_set_user_right(team.col1, team.col2, "HRMS_APP");
            mq = final_Qry;
            //------------------------

            dt = getdata(team.col1, "-", mq);
            List<Team> list = new List<Team>();
            list = (from DataRow row in dt.Rows
                    select new Team()
                    {
                        col1 = row["col1"].ToString(),
                        col2 = row["col2"].ToString(),
                        col3 = row["col3"].ToString(),
                        col4 = row["col4"].ToString(),
                        col5 = row["col5"].ToString(),
                    }).ToList();

            return list;
        }
        //=================================================================
        // sales person options( Sgrp ) 
        // check in check out , lead booking , expense booking
        public List<Team> Menu_smapi(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            //------------------------
            string mq = "";
            DataTable dt = new DataTable();
            mq = Fn_set_user_right(team.col1, team.col2, "SMAN_APP");
            mq = final_Qry;
            //------------------------

            dt = getdata(team.col1, "-", mq);
            List<Team> list = new List<Team>();
            list = (from DataRow row in dt.Rows
                    select new Team()
                    {
                        col1 = row["col1"].ToString(),
                        col2 = row["col2"].ToString(),
                        col3 = row["col3"].ToString(),
                        col4 = row["col4"].ToString(),
                        col5 = row["col5"].ToString(),
                    }).ToList();

            return list;
        }
        //=================================================================
        // Stores request options ( royal) 
        // check in check out , lead booking , expense booking
        public List<Team> Menu_strapi(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            //------------------------
            string mq = "";
            DataTable dt = new DataTable();
            mq = Fn_set_user_right(team.col1, team.col2, "STOR_APP");
            mq = final_Qry;

            //------------------------

            dt = getdata(team.col1, "-", mq);
            List<Team> list = new List<Team>();
            list = (from DataRow row in dt.Rows
                    select new Team()
                    {
                        col1 = row["col1"].ToString(),
                        col2 = row["col2"].ToString(),
                        col3 = row["col3"].ToString(),
                        col4 = row["col4"].ToString(),
                        col5 = row["col5"].ToString(),
                    }).ToList();

            return list;
        }
        //=================================================================
        // Maint request options ( royal) 
        // Maintenance / electricity
        public List<Team> Menu_Mtnapi(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            //------------------------
            string mq = "";
            DataTable dt = new DataTable();
            mq = Fn_set_user_right(team.col1, team.col2, "MAINT_APP");
            mq = final_Qry;
            //------------------------

            dt = getdata(team.col1, "-", mq);
            List<Team> list = new List<Team>();
            list = (from DataRow row in dt.Rows
                    select new Team()
                    {
                        col1 = row["col1"].ToString(),
                        col2 = row["col2"].ToString(),
                        col3 = row["col3"].ToString(),
                        col4 = row["col4"].ToString(),
                        col5 = row["col5"].ToString(),
                    }).ToList();

            return list;
        }
        //=================================================================
        // prodn options ( royal) 
        // Prodn API
        public List<Team> Menu_Prdapi(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            //------------------------
            string mq = "";
            DataTable dt = new DataTable();
            mq = Fn_set_user_right(team.col1, team.col2, "PRODN_APP");
            mq = final_Qry;
            //------------------------



            dt = getdata(team.col1, "-", mq);

            List<Team> list = new List<Team>();
            list = (from DataRow row in dt.Rows
                    select new Team()
                    {
                        col1 = row["col1"].ToString(),
                        col2 = row["col2"].ToString(),
                        col3 = row["col3"].ToString(),
                        col4 = row["col4"].ToString(),
                        col5 = row["col5"].ToString(),
                    }).ToList();

            return list;
        }
        //=================================================================
        // logistic options ( royal) 
        // logistic API
        public List<Team> Menu_Logiapi(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            //------------------------
            string mq = "";
            DataTable dt = new DataTable();
            mq = Fn_set_user_right(team.col1, team.col2, "LOGIS_APP");
            mq = final_Qry;
            //------------------------


            dt = getdata(team.col1, "-", mq);

            List<Team> list = new List<Team>();
            list = (from DataRow row in dt.Rows
                    select new Team()
                    {
                        col1 = row["col1"].ToString(),
                        col2 = row["col2"].ToString(),
                        col3 = row["col3"].ToString(),
                        col4 = row["col4"].ToString(),
                        col5 = row["col5"].ToString(),
                    }).ToList();

            return list;
        }
        //=================================================================

        public List<Team> Menu_Gateapi(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            //------------------------
            string mq = "";
            DataTable dt = new DataTable();
            mq = Fn_set_user_right(team.col1, team.col2, "GATE_APP");
            mq = final_Qry;
            //------------------------

            dt = getdata(team.col1, "-", mq);

            List<Team> list = new List<Team>();
            list = (from DataRow row in dt.Rows
                    select new Team()
                    {
                        col1 = row["col1"].ToString(),
                        col2 = row["col2"].ToString(),
                        col3 = row["col3"].ToString(),
                        col4 = row["col4"].ToString(),
                        col5 = row["col5"].ToString(),
                    }).ToList();

            return list;
        }

        public List<Team> Menu_Commapi(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            //------------------------
            string mq = "";
            DataTable dt = new DataTable();
            mq = Fn_set_user_right(team.col1, team.col2, "COMM_APP");
            mq = final_Qry;
            //------------------------


            dt = getdata(team.col1, "-", mq);

            List<Team> list = new List<Team>();
            list = (from DataRow row in dt.Rows
                    select new Team()
                    {
                        col1 = row["col1"].ToString(),
                        col2 = row["col2"].ToString(),
                        col3 = row["col3"].ToString(),
                        col4 = row["col4"].ToString(),
                        col5 = row["col5"].ToString(),
                    }).ToList();

            return list;
        }

        public List<Team> Menu_Qrinvapi(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            //------------------------
            string mq = "";
            DataTable dt = new DataTable();
            mq = Fn_set_user_right(team.col1, team.col2, "QRINV_APP");
            mq = final_Qry;
            //------------------------

            dt = getdata(team.col1, "-", mq);

            List<Team> list = new List<Team>();
            list = (from DataRow row in dt.Rows
                    select new Team()
                    {
                        col1 = row["col1"].ToString(),
                        col2 = row["col2"].ToString(),
                        col3 = row["col3"].ToString(),
                        col4 = row["col4"].ToString(),
                        col5 = row["col5"].ToString(),
                    }).ToList();

            return list;
        }

        //=================================================================
        // middle menu options

        //=================================================================

        public List<Team> aPurReq_ins(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";
            //------------------------

            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";


            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 

            string fldfevas = "", work_br = "";
            fldfevas = fn_seek_iname(team.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "fstr");
            work_br = "00";
            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
            }
            string saved_doc_no = "";
            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            string tabname = "POMAS";
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();


                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }

                oDS = new DataSet();
                oporow = null;
                oDS = fill_schema(cocd, tabname);

                int no_of_ent = 0;
                for (int i = 0; i < qrlist.Length; i++)
                {

                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");

                    if (colsVal.Length <= 1)
                    {

                    }
                    else
                    {


                        string xmv_acode = "-", xmv_icode = "", xmv_qtyord = "-", xmv_lastdt = "-", xmv_remarks = "-";

                        #region Fields Getting



                        branchcd = colsVal[0].ToString().Trim();
                        branchcd = work_br;

                        type = colsVal[1].ToString().Trim();
                        type = "60";

                        xmv_acode = colsVal[2].ToString().Trim();
                        xmv_icode = colsVal[3].ToString().Trim();
                        xmv_qtyord = colsVal[4].ToString().Trim();
                        xmv_lastdt = colsVal[5].ToString().Trim();
                        xmv_remarks = colsVal[6].ToString().Trim();




                        #endregion


                        #region Vnum Generation
                        if (no_of_ent == 0)
                        {
                            int p = 0;
                            string error = "Y";
                            do
                            {
                                vchdate = DateTime.Now.ToString("dd/MM/yyyy");
                                vchnum = next_no(team.col1, branchcd, "-", "select max(ordno)+" + p + " as max from " + tabname + " where branchcd='" + branchcd + "' and type ='" + type + "' and orddt " + xprdRange + " ", 6, "max");
                                error = fn_chk_pk(tabname + branchcd + type + vchnum + vchdate, team.col1, branchcd, type, vchnum, vchdate, acode, "WEBAPI").Trim();
                                if (p > 10)
                                { error = "N"; throw new Exception("Test Exception"); }
                                p++;
                            }
                            while (error.Equals("Y"));
                        }
                        no_of_ent = no_of_ent + 1;
                        #endregion

                        #region Saving to Oracle in 4 series
                        oporow = oDS.Tables[0].NewRow();

                        vchdate = fn_seek_iname(team.col1, branchcd, "select to_Date(to_char(sysdate,'dd/mm/yyyy'),'dd/mm/yyyy') as ldt from dual", "ldt");


                        oporow["BRANCHCD"] = branchcd;
                        oporow["ORIGNALBR"] = branchcd;
                        oporow["TYPE"] = type;
                        oporow["ordno"] = vchnum;
                        oporow["orddt"] = vchdate;

                        saved_doc_no = branchcd + type + vchnum + DateTime.Now.ToString("dd/MM/yyyy");

                        msg = "Purchase Request Saved : " + saved_doc_no;

                        xmv_acode = colsVal[2].ToString().Trim();
                        xmv_icode = colsVal[3].ToString().Trim();
                        xmv_qtyord = colsVal[4].ToString().Trim();
                        xmv_lastdt = colsVal[5].ToString().Trim();
                        xmv_remarks = colsVal[6].ToString().Trim();

                        //xmv_lastdt = fn_seek_iname(team.col1, branchcd, "select to_Date('" + xmv_lastdt + "','dd/mm/yyyy') as ldt from dual", "ldt");

                        oporow["SRNO"] = i;

                        //imp fields
                        oporow["TAX"] = "-";
                        oporow["kindattn"] = "-";

                        oporow["acode"] = xmv_acode;
                        oporow["icode"] = xmv_icode.Trim();
                        oporow["qtyord"] = makeDouble(xmv_qtyord);
                        oporow["o_qty"] = makeDouble(xmv_qtyord);

                        oporow["desc_"] = xmv_remarks;
                        oporow["splrmk"] = "-";
                        oporow["DOC_THR"] = "-";

                        oporow["prate"] = makeDouble(fn_seek_iname(team.col1, branchcd, "select (Case when nvl(iqd,0)=0 then irate else iqd end) as irate from item where trim(upper(icode))=Trim('" + xmv_icode + "')", "irate"));


                        oporow["delv_item"] = xmv_lastdt;
                        oporow["delv_term"] = xmv_lastdt;
                        oporow["del_Date"] = vchdate;
                        //oporow["del_Date"] = fn_seek_iname(team.col1, branchcd, "select to_char(to_Date('" + xmv_lastdt + "','dd/mm/yyyy'),'dd/mm/yyyy') as ldt from dual", "ldt");

                        oporow["psize"] = "-";

                        oporow["unit"] = "-";


                        oporow["porddt"] = vchdate;
                        oporow["bank"] = "-";
                        oporow["mode_tpt"] = "-";
                        oporow["tr_insur"] = "-";
                        oporow["freight"] = "-";
                        oporow["remark"] = "-";
                        oporow["prefsource"] = "-";

                        oporow["qtysupp"] = 0; // stock in hand to bring 
                        oporow["qtybal"] = makeDouble(xmv_qtyord);
                        oporow["pflag"] = 1;
                        oporow["pdisc"] = 0;
                        oporow["ptax"] = 0;
                        oporow["pexc"] = 0;
                        oporow["pamt"] = 0;
                        oporow["issue_no"] = 0;
                        oporow["invno"] = "-";
                        oporow["invdate"] = vchdate;
                        oporow["Delivery"] = 0;
                        oporow["DEL_MTH"] = 0;
                        oporow["DEL_wk"] = 0;



                        oporow["inst"] = "-";
                        oporow["term"] = "-";
                        oporow["refdate"] = vchdate;
                        oporow["STORE_NO"] = "SA";

                        string lastin = "";
                        string lastpp = "";

                        lastin = fn_seek_iname(team.col1, branchcd, "select fstr from (select 'Last Ind No.'||ordno||' Dt.'||to_char(orddt,'dd/mm/yyyy')||' By '||trim(Bank)||' Qty='||qtyord||' '||Unit as fstr from pomas where branchcd='" + branchcd + "' and type='60' and trim(icode)='" + xmv_icode.Trim() + "' order by orddt desc) where rownum<2", "fstr");
                        lastpp = fn_seek_iname(team.col1, branchcd, "select fstr from (select 'Last Inw No.'||a.vchnum||' Dt.'||to_char(a.vchdate,'dd/mm/yyyy')||' From '||trim(b.aname)||' @'||irate as fstr from ivoucher a, famst b WHERE a.branchcd='" + branchcd + "' and substr(type,1,1)='0' and a.type not in ('08','09','0J') and trim(a.icode)='" + xmv_icode.Trim() + "' and TRIM(A.ACODE)=TRIM(B.ACODE) order by a.vchdate desc) where rownum<2", "fstr");

                        oporow["desp_to"] = lastin + " | " + lastpp;

                        oporow["packing"] = 0;
                        oporow["payment"] = fn_seek_iname(team.col1, branchcd, "select iname from item where length(Trim(icode))=4 and trim(icode)='" + xmv_icode.Trim() + "'", "iname");
                        oporow["stax"] = "-";
                        oporow["exc"] = "-";
                        oporow["iopr"] = "-";
                        oporow["pr_no"] = "-";
                        oporow["pr_Dt"] = vchdate;
                        oporow["amd_no"] = "-";
                        oporow["del_Sch"] = "-";
                        oporow["st31no"] = "-";
                        oporow["vend_wt"] = 1;
                        oporow["wk1"] = 0;
                        oporow["wk2"] = 0;
                        oporow["wk3"] = 0;
                        oporow["wk4"] = 0;
                        oporow["pbasis"] = "-";

                        oporow["ent_by"] = team.col3;
                        oporow["ent_dt"] = DateTime.Now.ToString();

                        oporow["pordno"] = team.col3;
                        oporow["ent_dt"] = DateTime.Now.ToString();

                        oporow["edt_by"] = "-";
                        oporow["edt_dt"] = DateTime.Now.ToString();

                        oporow["chk_by"] = "-";
                        oporow["chk_dt"] = DateTime.Now.ToString();

                        oporow["app_by"] = "-";
                        oporow["APP_dt"] = DateTime.Now.ToString();


                        oporow["rate_cd"] = 0;
                        oporow["amdtno"] = 0;

                        oporow["ciname"] = "-";
                        oporow["cscode1"] = "-";
                        oporow["ed_serv"] = "-";
                        oporow["atch1"] = "-";
                        oporow["pdiscamt2"] = 0;
                        oporow["txb_frt"] = 0;
                        oporow["atch2"] = "-";
                        oporow["atch3"] = "-";
                        oporow["po_tolr"] = 0;
                        oporow["PR_SRN"] = (i + 1).ToString().PadLeft(3, '0');

                        oDS.Tables[0].Rows.Add(oporow);
                        #endregion



                    }

                }
                save_data(cocd, oDS, tabname);

            }
            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }

        public List<Team> aSomas_ins(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";
            //------------------------

            //new api_based_So
            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";

            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 

            string fldfevas = "", work_br = "";
            fldfevas = fn_seek_iname(team.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "fstr");

            work_br = "00";
            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
            }

            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            string my_curr_Dt;
            my_curr_Dt = Fn_curr_dt_time(team.col1, branchcd, "");
            string tabname = "SOMAS";
            string saved_doc_no = "";
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();

                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }

                oDS = new DataSet();
                oporow = null;
                oDS = fill_schema(cocd, tabname);

                string it_name = "", sn1 = "", sn2 = "", sn3 = "";
                string mhome_Curr = "";
                int no_of_ent = 0;
                string mv_branch = "";
                string mv_type = "";
                string xmv_acode = "-", xmv_icode = "", xmv_qtyord = "-", xmv_rate = "-", xmv_dlvdt = "-", xmv_remarks = "-", xmv_pono = "-";

                for (int i = 0; i < qrlist.Length; i++)
                {

                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");

                    if (colsVal.Length <= 1)
                    {

                    }
                    else
                    {


                        #region Fields Getting



                        branchcd = colsVal[0].ToString().Trim();
                        branchcd = work_br;

                        type = colsVal[1].ToString().Trim().Substring(0, 2);
                        xmv_acode = colsVal[2].ToString().Trim();
                        xmv_icode = colsVal[3].ToString().Trim();
                        xmv_qtyord = colsVal[4].ToString().Trim();
                        xmv_rate = colsVal[5].ToString().Trim();
                        xmv_dlvdt = colsVal[6].ToString().Trim();
                        xmv_pono = colsVal[7].ToString().Trim();

                        #endregion


                        #region Vnum Generation
                        if (no_of_ent == 0)
                        {
                            int p = 0;
                            string error = "Y";
                            do
                            {
                                vchdate = DateTime.Now.ToString("dd/MM/yyyy");
                                vchnum = next_no(team.col1, branchcd, "-", "select max(ordno)+" + p + " as max from " + tabname + " where branchcd='" + branchcd + "' and type ='" + type + "' and orddt " + xprdRange + " ", 6, "max");
                                error = fn_chk_pk(tabname + branchcd + type + vchnum + vchdate, team.col1, branchcd, type, vchnum, vchdate, acode, "WEBAPI").Trim();
                                if (p > 10)
                                { error = "N"; throw new Exception("Test Exception"); }
                                p++;
                            }
                            while (error.Equals("Y"));
                        }
                        no_of_ent = no_of_ent + 1;
                        #endregion

                        #region Saving to Oracle in 4 series
                        oporow = oDS.Tables[0].NewRow();

                        vchdate = fn_seek_iname(team.col1, branchcd, "select to_Date(to_char(sysdate,'dd/mm/yyyy'),'dd/mm/yyyy') as ldt from dual", "ldt");


                        oporow["BRANCHCD"] = branchcd;
                        oporow["ORIGNALBR"] = branchcd;
                        oporow["TYPE"] = type;
                        oporow["ordno"] = vchnum;
                        oporow["orddt"] = vchdate;

                        saved_doc_no = branchcd + type + vchnum + DateTime.Now.ToString("dd/MM/yyyy"); ;
                        msg = "Sales order Saved : " + saved_doc_no;

                        oporow["cdrgno"] = vchnum + "." + i;
                        oporow["SRNO"] = i;

                        oporow["acode"] = xmv_acode;
                        oporow["icode"] = xmv_icode.Trim();
                        oporow["qtyord"] = makeDouble(xmv_qtyord);
                        oporow["irate"] = makeDouble(xmv_rate);
                        oporow["cdisc"] = 0;

                        oporow["PORDNO"] = xmv_pono;
                        oporow["PORDDT"] = vchdate;

                        oporow["PROMDT"] = vchdate;

                        //oporow["CU_CHLDT"] = vchdate;
                        //vchdate = DateTime.Now.ToString("dd/MM/yyyy").Substring(0,10);-----------surendar-------------//
                        oporow["CU_CHLDT"] = fn_seek_iname(team.col1, branchcd, "select to_Date('" + xmv_dlvdt + "','dd/mm/yyyy') as ldt from dual", "ldt");

                        //make_def_Date(xmv_dlvdt,vchdate);
                        if (mhome_Curr.Length <= 1)
                        {
                            mhome_Curr = fn_seek_iname(cocd, branchcd, "SELECT br_Curren FROM type WHERE id='B' and TRIM(type1)='" + branchcd + "'", "br_Curren");
                        }

                        oporow["Currency"] = mhome_Curr;
                        oporow["CURR_RATE"] = 1;

                        it_name = fn_seek_iname(cocd, branchcd, "SELECT SUBSTR(INAME,1,150)||'^'||cpartno||'^'||ciname AS fstr FROM ITEM WHERE TRIM(ICODE)='" + xmv_icode + "'", "fstr");
                        sn1 = "";
                        sn2 = "";
                        if (it_name.Trim() != "0")
                        {
                            sn1 = it_name.Split('^')[0];
                            sn2 = it_name.Split('^')[1];
                            sn3 = it_name.Split('^')[2];
                        }
                        oporow["ciname"] = sn1;
                        oporow["cpartno"] = sn2;
                        oporow["desc9"] = sn3;

                        oporow["CSCODE"] = "-";
                        oporow["billcode"] = "-";
                        oporow["st_type"] = "-";


                        oporow["iexc_Addl"] = 0;
                        oporow["qtysupp"] = 0;
                        oporow["icat"] = "N";

                        oporow["ENT_BY"] = team.col3;
                        oporow["ent_dt"] = DateTime.Now.ToString();

                        oporow["EDT_BY"] = "-";
                        oporow["eDt_dt"] = DateTime.Now.ToString();

                        oporow["check_BY"] = "-";
                        oporow["check_DT"] = DateTime.Now.ToString();

                        oporow["app_BY"] = "-";
                        oporow["APP_dt"] = DateTime.Now.ToString();


                        oporow["Delivery"] = 0;
                        oporow["Month"] = "-";
                        oporow["QD"] = 0;
                        oporow["sd"] = 0;
                        oporow["Class"] = "-";
                        oporow["zone"] = "-";
                        oporow["ms_cont"] = "-";

                        oporow["AMDT1"] = "-";
                        oporow["amdt2"] = "-";
                        oporow["amdt3"] = "-";
                        oporow["remark"] = "-";
                        oporow["desp_to"] = "-";
                        oporow["PVT_MARK"] = "-";
                        oporow["Weight"] = "-";
                        oporow["thru"] = "-";

                        oporow["qtybal"] = 0;
                        oporow["INVNO"] = "-";
                        oporow["invdate"] = DateTime.Now.ToString();
                        oporow["refdate"] = DateTime.Now.ToString();
                        oporow["org_invno"] = "-";
                        oporow["org_invdt"] = DateTime.Now.ToString();
                        oporow["CU_CHLNO"] = "-";

                        oporow["FOC"] = "-";

                        oporow["frght"] = 0;
                        oporow["iexc_Addl"] = 0;
                        oporow["del_date"] = DateTime.Now.ToString();
                        oporow["DELR_DATE"] = DateTime.Now.ToString();
                        oporow["DEL_WK"] = 0;
                        oporow["DEL_MTH"] = 0;
                        oporow["packing"] = 0;

                        oporow["desc_"] = "-";
                        oporow["work_ordno"] = "-";
                        oporow["prefix"] = "-";
                        oporow["revis_no"] = "-";


                        oporow["ipack"] = 0;
                        oporow["gmt_shade"] = "-";
                        oporow["gmt_size"] = "-";
                        oporow["pexc"] = 0;
                        oporow["ptax"] = 0;
                        oporow["orderby"] = "-";
                        oporow["BUSI_potent"] = "-";
                        oporow["BUSI_EXPECT"] = "-";
                        oporow["Amdtno"] = 0;

                        oporow["rlprc"] = 0;
                        oporow["INSPCHG"] = 0;
                        oporow["td"] = 0;
                        oporow["cd"] = 0;

                        oporow["othac1"] = "-";
                        oporow["othac2"] = "-";
                        oporow["othac3"] = "-";
                        oporow["othamt1"] = 0;
                        oporow["othamt2"] = 0;
                        oporow["othamt3"] = 0;
                        oporow["shecess"] = 0;
                        oporow["desc0"] = "-";
                        oporow["desc1"] = "-";
                        oporow["desc2"] = "-";
                        oporow["desc3"] = "-";
                        oporow["desc4"] = "-";
                        oporow["desc5"] = "-";
                        oporow["desc6"] = "-";
                        oporow["desc7"] = "-";
                        oporow["desc8"] = "-";

                        oporow["BASIC"] = 0;
                        oporow["Excise"] = 0;
                        oporow["cess"] = 0;
                        oporow["taxes"] = 0;
                        oporow["TOTAL"] = 0;
                        oporow["inst1"] = 0;
                        oporow["inst2"] = 0;
                        oporow["inst3"] = 0;
                        oporow["bcd"] = 0;
                        oporow["bcdr"] = 0;
                        oporow["CCESS"] = 0;
                        oporow["CCESSR"] = 0;
                        oporow["ACVD"] = 0;
                        oporow["ACVDR"] = 0;
                        oporow["shipfrom"] = "-";
                        oporow["shipto"] = "-";
                        oporow["destcount"] = "-";
                        oporow["inspby"] = "-";
                        oporow["explic"] = "-";
                        oporow["tptdtl"] = "-";
                        oporow["predisp"] = "-";
                        oporow["packinst"] = "-";
                        oporow["shipmark"] = "-";

                        oporow["attach1"] = "-";
                        oporow["EMAIL_STATUS"] = "-";
                        oporow["othac4"] = "-";
                        oporow["othamt4"] = 0;
                        oporow["ins_per"] = 0;
                        oporow["ins_Amt"] = 0;
                        oporow["advamt"] = 0;
                        oporow["sta_amt"] = 0;
                        oporow["sta_rate"] = 0;
                        oporow["ppcdate"] = "-";
                        oporow["packamt"] = 0;
                        oporow["STD_PKING"] = 0;
                        oporow["btchno"] = "-";
                        oporow["RETN_PER"] = 0;
                        oporow["adv_rcv"] = 0;
                        oporow["adv_due"] = 0;

                        oporow["lirate"] = 0;
                        oporow["EXR_IMP"] = "-";
                        oporow["othac5"] = "-";
                        oporow["othamt5"] = 0;
                        oporow["bank_cd"] = "-";
                        oporow["INST4"] = 0;

                        oporow["oinspby"] = "-";
                        oporow["MRCAL"] = "-";
                        oporow["NOTIFY"] = "-";
                        oporow["finaldst"] = "-";
                        oporow["HSCODES"] = "-";
                        oporow["SUPPBY"] = "-";
                        oporow["hs_code"] = "-";
                        oporow["oa_disc"] = 0;
                        oporow["CO_ORIG"] = "-";
                        oporow["ORD_ALERT"] = "-";
                        oporow["SO_ADD_QTY"] = 0;

                        oDS.Tables[0].Rows.Add(oporow);
                        #endregion



                    }

                }
                save_data(cocd, oDS, tabname);
            }
            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }

        public List<Team> aSomasQ_ins(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";
            //------------------------

            //new api_based_So
            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";

            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 
            string fldfevas = "", work_br = "";
            fldfevas = fn_seek_iname(team.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "fstr");

            work_br = "00";
            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
            }

            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            string my_curr_Dt;
            my_curr_Dt = Fn_curr_dt_time(team.col1, branchcd, "");
            string tabname = "SOMASQ";
            string saved_doc_no = "";
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();

                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }

                oDS = new DataSet();
                oporow = null;
                oDS = fill_schema(cocd, tabname);

                string it_name = "", sn1 = "", sn2 = "", sn3 = "";
                string mhome_Curr = "";
                int no_of_ent = 0;
                string mv_branch = "";
                string mv_type = "";
                string xmv_acode = "-", xmv_icode = "", xmv_qtyord = "-", xmv_rate = "-", xmv_dlvdt = "-", xmv_remarks = "-", xmv_pono = "-";

                for (int i = 0; i < qrlist.Length; i++)
                {

                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");

                    if (colsVal.Length <= 1)
                    {

                    }
                    else
                    {


                        #region Fields Getting



                        branchcd = colsVal[0].ToString().Trim();
                        branchcd = work_br;

                        type = colsVal[1].ToString().Trim().Substring(0, 2);
                        xmv_acode = colsVal[2].ToString().Trim();
                        xmv_icode = colsVal[3].ToString().Trim();
                        xmv_qtyord = colsVal[4].ToString().Trim();
                        xmv_rate = colsVal[5].ToString().Trim();
                        xmv_dlvdt = colsVal[6].ToString().Trim();
                        xmv_pono = colsVal[7].ToString().Trim();

                        #endregion


                        #region Vnum Generation
                        if (no_of_ent == 0)
                        {
                            int p = 0;
                            string error = "Y";
                            do
                            {
                                vchdate = DateTime.Now.ToString("dd/MM/yyyy");
                                vchnum = next_no(team.col1, branchcd, "-", "select max(ordno)+" + p + " as max from " + tabname + " where branchcd='" + branchcd + "' and type ='" + type + "' and orddt " + xprdRange + " ", 6, "max");
                                error = fn_chk_pk(tabname + branchcd + type + vchnum + vchdate, team.col1, branchcd, type, vchnum, vchdate, acode, "WEBAPI").Trim();
                                if (p > 10)
                                { error = "N"; throw new Exception("Test Exception"); }
                                p++;
                            }
                            while (error.Equals("Y"));
                        }
                        no_of_ent = no_of_ent + 1;
                        #endregion

                        #region Saving to Oracle in 4 series
                        oporow = oDS.Tables[0].NewRow();

                        vchdate = fn_seek_iname(team.col1, branchcd, "select to_Date(to_char(sysdate,'dd/mm/yyyy'),'dd/mm/yyyy') as ldt from dual", "ldt");


                        oporow["BRANCHCD"] = branchcd;
                        oporow["ORIGNALBR"] = branchcd;
                        oporow["TYPE"] = type;
                        oporow["ordno"] = vchnum;
                        oporow["orddt"] = Convert.ToDateTime(vchdate).ToString("dd/MM/yyyy");

                        saved_doc_no = branchcd + type + vchnum + DateTime.Now.ToString("dd/MM/yyyy"); ;
                        msg = "Quotation Saved : " + saved_doc_no;

                        oporow["cdrgno"] = vchnum + "." + i;
                        oporow["SRNO"] = i;

                        oporow["acode"] = xmv_acode;
                        oporow["icode"] = xmv_icode.Trim();
                        oporow["qtyord"] = makeDouble(xmv_qtyord);
                        oporow["irate"] = makeDouble(xmv_rate);
                        oporow["cdisc"] = 0;

                        oporow["PORDNO"] = xmv_pono;
                        oporow["PORDDT"] = Convert.ToDateTime(vchdate).ToString("dd/MM/yyyy");

                        oporow["PROMDT"] = Convert.ToDateTime(vchdate).ToString("dd/MM/yyyy");
                        oporow["CU_CHLDT"] = Convert.ToDateTime(vchdate).ToString("dd/MM/yyyy");
                        //make_def_Date(xmv_dlvdt,vchdate);
                        if (mhome_Curr.Length <= 1)
                        {
                            mhome_Curr = fn_seek_iname(cocd, branchcd, "SELECT br_Curren FROM type WHERE id='B' and TRIM(type1)='" + branchcd + "'", "br_Curren");
                        }

                        oporow["Currency"] = mhome_Curr;
                        oporow["CURR_RATE"] = 1;

                        it_name = fn_seek_iname(cocd, branchcd, "SELECT SUBSTR(INAME,1,150)||'^'||cpartno||'^'||ciname AS fstr FROM ITEM WHERE TRIM(ICODE)='" + xmv_icode + "'", "fstr");
                        sn1 = "";
                        sn2 = "";
                        if (it_name.Trim() != "0")
                        {
                            sn1 = it_name.Split('^')[0];
                            sn2 = it_name.Split('^')[1];
                            sn3 = it_name.Split('^')[2];
                        }
                        oporow["ciname"] = sn1;
                        oporow["cpartno"] = sn2;
                        oporow["desc9"] = sn3;

                        oporow["CSCODE"] = "-";
                        oporow["billcode"] = "-";
                        oporow["st_type"] = "-";


                        oporow["iexc_Addl"] = 0;
                        oporow["qtysupp"] = 0;
                        oporow["icat"] = "N";

                        oporow["ENT_BY"] = team.col3;
                        oporow["ent_dt"] = DateTime.Now.ToString();

                        oporow["EDT_BY"] = "-";
                        oporow["edt_dt"] = DateTime.Now.ToString();

                        oporow["check_BY"] = "-";
                        oporow["check_DT"] = DateTime.Now.ToString();

                        oporow["app_BY"] = "-";
                        oporow["APP_dt"] = DateTime.Now.ToString();


                        oporow["Delivery"] = 0;
                        oporow["Month"] = "-";
                        oporow["QD"] = 0;
                        oporow["sd"] = 0;
                        oporow["Class"] = "-";
                        oporow["zone"] = "-";
                        oporow["ms_cont"] = "-";

                        oporow["AMDT1"] = "-";
                        oporow["amdt2"] = "-";
                        oporow["amdt3"] = "-";
                        oporow["remark"] = "-";
                        oporow["desp_to"] = "-";
                        oporow["PVT_MARK"] = "-";
                        oporow["Weight"] = "-";
                        oporow["thru"] = "-";

                        oporow["qtybal"] = 0;
                        oporow["INVNO"] = "-";
                        oporow["invdate"] = DateTime.Now.ToString();
                        oporow["refdate"] = DateTime.Now.ToString();
                        oporow["org_invno"] = "-";
                        oporow["org_invdt"] = DateTime.Now.ToString();
                        oporow["CU_CHLNO"] = "-";

                        oporow["FOC"] = "-";

                        oporow["frght"] = 0;
                        oporow["iexc_Addl"] = 0;
                        oporow["del_date"] = DateTime.Now.ToString();
                        oporow["DELR_DATE"] = DateTime.Now.ToString();
                        oporow["DEL_WK"] = 0;
                        oporow["DEL_MTH"] = 0;
                        oporow["packing"] = 0;

                        oporow["desc_"] = "-";
                        oporow["work_ordno"] = "-";
                        oporow["prefix"] = "-";
                        oporow["revis_no"] = "-";


                        oporow["ipack"] = 0;
                        oporow["gmt_shade"] = "-";
                        oporow["gmt_size"] = "-";
                        oporow["pexc"] = 0;
                        oporow["ptax"] = 0;
                        oporow["orderby"] = "-";
                        oporow["BUSI_potent"] = "-";
                        oporow["BUSI_EXPECT"] = "-";
                        oporow["Amdtno"] = 0;

                        oporow["rlprc"] = 0;
                        oporow["INSPCHG"] = 0;
                        oporow["td"] = 0;
                        oporow["cd"] = 0;

                        oporow["othac1"] = "-";
                        oporow["othac2"] = "-";
                        oporow["othac3"] = "-";
                        oporow["othamt1"] = 0;
                        oporow["othamt2"] = 0;
                        oporow["othamt3"] = 0;
                        oporow["shecess"] = 0;
                        oporow["desc0"] = "-";
                        oporow["desc1"] = "-";
                        oporow["desc2"] = "-";
                        oporow["desc3"] = "-";
                        oporow["desc4"] = "-";
                        oporow["desc5"] = "-";
                        oporow["desc6"] = "-";
                        oporow["desc7"] = "-";
                        oporow["desc8"] = "-";

                        oporow["BASIC"] = 0;
                        oporow["Excise"] = 0;
                        oporow["cess"] = 0;
                        oporow["taxes"] = 0;
                        oporow["TOTAL"] = 0;
                        oporow["inst1"] = 0;
                        oporow["inst2"] = 0;
                        oporow["inst3"] = 0;
                        oporow["bcd"] = 0;
                        oporow["bcdr"] = 0;
                        oporow["CCESS"] = 0;
                        oporow["CCESSR"] = 0;
                        oporow["ACVD"] = 0;
                        oporow["ACVDR"] = 0;
                        oporow["shipfrom"] = "-";
                        oporow["shipto"] = "-";
                        oporow["destcount"] = "-";
                        oporow["inspby"] = "-";
                        oporow["explic"] = "-";
                        oporow["tptdtl"] = "-";
                        oporow["predisp"] = "-";
                        oporow["packinst"] = "-";
                        oporow["shipmark"] = "-";

                        oporow["attach1"] = "-";
                        oporow["EMAIL_STATUS"] = "-";
                        oporow["othac4"] = "-";
                        oporow["othamt4"] = 0;
                        oporow["ins_per"] = 0;
                        oporow["ins_Amt"] = 0;
                        oporow["advamt"] = 0;
                        oporow["sta_amt"] = 0;
                        oporow["sta_rate"] = 0;
                        oporow["ppcdate"] = "-";
                        oporow["packamt"] = 0;
                        oporow["STD_PKING"] = 0;
                        oporow["btchno"] = "-";
                        oporow["RETN_PER"] = 0;
                        oporow["adv_rcv"] = 0;
                        oporow["adv_due"] = 0;

                        oporow["lirate"] = 0;
                        oporow["EXR_IMP"] = "-";
                        oporow["othac5"] = "-";
                        oporow["othamt5"] = 0;
                        oporow["bank_cd"] = "-";
                        oporow["INST4"] = 0;

                        oporow["oinspby"] = "-";
                        oporow["MRCAL"] = "-";
                        oporow["NOTIFY"] = "-";
                        oporow["finaldst"] = "-";
                        oporow["HSCODES"] = "-";
                        oporow["SUPPBY"] = "-";
                        oporow["hs_code"] = "-";
                        oporow["oa_disc"] = 0;
                        oporow["CO_ORIG"] = "-";
                        oporow["ORD_ALERT"] = "-";
                        oporow["SO_ADD_QTY"] = 0;

                        oDS.Tables[0].Rows.Add(oporow);
                        #endregion



                    }

                }
                save_data(cocd, oDS, tabname);
            }
            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }

        // old working function
        public List<Team> aDnote_ins(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";
            //------------------------

            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";

            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 

            string fldfevas = "", work_br = "";
            fldfevas = fn_seek_iname(team.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "fstr");

            work_br = "00";
            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
            }

            string msg = "Data Saved";
            string saved_doc_no = "";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            string my_curr_Dt;
            my_curr_Dt = Fn_curr_dt_time(team.col1, branchcd, "");
            string it_name = "", sn1 = "", sn2 = "", sn3 = "", sn4 = "", sn5 = "", sn6 = "", sn7 = "";


            string tabname = "DESPATCH";
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();

                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }

                oDS = new DataSet();
                oporow = null;
                oDS = fill_schema(cocd, tabname);

                mq = "delete from wsr_Ctrl where branchcd||type||vchnum||to_char(Vchdate,'dd/mm/yyyy') not in (select branchcd||type||vchnum||to_char(Vchdate,'dd/mm/yyyy') from " + tabname + " where to_char(vchdate,'dd/mm/yyyy')=to_char(sysdate,'dd/mm/yyyy'))";
                mq1 = execute_cmd1(team.col1, mq);

                int no_of_ent = 0;
                for (int i = 0; i < qrlist.Length; i++)
                {

                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");

                    if (colsVal.Length <= 1)
                    {

                    }
                    else
                    {

                        string mv_branch = "";
                        string mv_type = "";
                        string xmv_acode = "-", xmv_icode = "", xmv_qtyord = "-", xmv_batch = "-", xmv_ordno = "-", xmv_orddt = "-",ss_icode="",ordqty_ss="",ciname_ss="";                       



                            #region Fields Getting



                        branchcd = colsVal[0].ToString().Trim();
                        branchcd = work_br;

                        type = colsVal[1].ToString().Trim();

                        xmv_acode = colsVal[2].ToString().Trim();
                        xmv_qtyord = colsVal[4].ToString().Trim();

                        xmv_batch = colsVal[5].ToString().Trim();

                        xmv_ordno = colsVal[6].ToString().Trim();
                        xmv_orddt = colsVal[7].ToString().Trim();
                        if (team.col1 == "GDOT")
                        {
                            ss_icode = colsVal[3].ToString().Trim();
                            //    xmv_icode = fn_seek_iname(team.col1, "", "SELECT 'Success' trim(icode) as fstr from IVOUCHER a,item b where trim(a.icode)=trim(B.icode) and a.BRANCHCD='" + work_br + "' and a.iqtyin>0  AND TRIM(A.invno)= '" + ss_icode + "' and type in ('17','19')", "fstr");
                            xmv_icode = fn_seek_iname(team.col1, "", "SELECT TRIM(A.ICODE) as fstr from IVOUCHER a, item b where trim(a.icode)= trim(b.icode) and a.BRANCHCD='" + work_br + "' and trim(a.btchno) = '" + ss_icode + "' AND TYPE IN ('17', '19') AND trim(a.iqtyin)>0", "fstr");
                            ordqty_ss = fn_seek_iname(team.col1, "", "SELECT TRIM(qtyord) as fstr from SOMAS where BRANCHCD='" + work_br + "' and trim(ORDNO) = '" + xmv_ordno.Substring(0, 6) + "' AND trim(acode)='" + xmv_acode + "' and trim(icode)='" + xmv_icode + "'  and to_char(orddt,'dd/mm/yyyy')='" + xmv_orddt + "'", "fstr");
                            ciname_ss = fn_seek_iname(team.col1, "", "SELECT TRIM(ciname) as fstr from SOMAS where BRANCHCD='" + work_br + "' and trim(ORDNO) = '" + xmv_ordno.Substring(0, 6) + "' AND trim(acode)='" + xmv_acode + "' and trim(icode)='" + xmv_icode + "'  and to_char(orddt,'dd/mm/yyyy')='" + xmv_orddt + "'", "fstr");

                        }
                        else {
                            xmv_icode = colsVal[3].ToString().Trim();
                        }                        
                       


                        #endregion


                        #region Vnum Generation
                        if (no_of_ent == 0)
                        {
                            int p = 0;
                            string error = "Y";
                            do
                            {
                                vchdate = DateTime.Now.ToString("dd/MM/yyyy");
                                vchnum = next_no(team.col1, branchcd, "-", "select max(packno)+" + p + " as max from " + tabname + " where branchcd='" + branchcd + "' and type ='" + type + "' and packdate " + xprdRange + " ", 6, "max");
                                error = fn_chk_pk(tabname + branchcd + type + vchnum + vchdate, team.col1, branchcd, type, vchnum, vchdate, acode, "WEBAPI").Trim();
                                if (p > 10)
                                { error = "N"; throw new Exception("Test Exception"); }
                                p++;
                            }
                            while (error.Equals("Y"));
                        }
                        no_of_ent = no_of_ent + 1;
                        #endregion

                        #region Saving to Oracle in 4 series
                        oporow = oDS.Tables[0].NewRow();

                        vchdate = fn_seek_iname(team.col1, branchcd, "select to_Date(to_char(sysdate,'dd/mm/yyyy'),'dd/mm/yyyy') as ldt from dual", "ldt");

                        oporow["BRANCHCD"] = branchcd;
                        oporow["TYPE"] = type;
                        oporow["packno"] = vchnum;
                        oporow["packdate"] = vchdate;
                        oporow["INVNO"] = vchnum;
                        oporow["INVDATE"] = vchdate;

                        oporow["ordno"] = xmv_ordno.Substring(0, 6);
                        if (team.col1 == "GDOT")
                        {
                            oporow["orddt"] = xmv_orddt;
                        }
                        else
                        {
                            oporow["orddt"] = fn_seek_iname(team.col1, branchcd, "select to_Date('" + xmv_orddt + "','dd/mm/yyyy') as ldt from dual", "ldt");
                        }
                        oporow["acode"] = xmv_acode;
                        oporow["icode"] = xmv_icode.Trim();
                        oporow["qtysupp"] = makeDouble(xmv_qtyord);

                        saved_doc_no = branchcd + type + vchnum + DateTime.Now.ToString("dd/MM/yyyy");

                        msg = "Dispatch Advice/Note Saved : " + saved_doc_no;


                        oporow["BILLCODE"] = "-";
                        oporow["ST_TYPE"] = "-";


                        if (cocd == "SGRP")
                        {
                            Squery = "SELECT pordno||'^'||to_char(porddt,'dd/mm/yyyy')||'^'||trim(ciname)||'^'||cpartno||'^'||irate||'^'||cscode AS fstr FROM somas WHERE mfginbr='" + branchcd + "' and type like '" + type + "%'  and TRIM(ACODE)='" + xmv_acode + "' and TRIM(ICODE)='" + xmv_icode + "' and TRIM(ordno)='" + xmv_ordno.Substring(0, 6) + "' and to_Char(orddt,'dd/mm/yyyy')='" + xmv_orddt + "' and trim(nvl(icat,'-'))<>'Y'";
                            it_name = fn_seek_iname(cocd, branchcd, Squery, "fstr");
                        }
                        else
                        {
                            it_name = fn_seek_iname(cocd, branchcd, "SELECT pordno||'^'||to_char(porddt,'dd/mm/yyyy')||'^'||trim(ciname)||'^'||cpartno||'^'||irate||'^'||cscode AS fstr FROM somas WHERE branchcd='" + branchcd + "' and type like '" + type + "%'  and TRIM(ACODE)='" + xmv_acode + "' and TRIM(ICODE)='" + xmv_icode + "' and TRIM(ordno)='" + xmv_ordno.Substring(0, 6) + "' and to_Char(orddt,'dd/mm/yyyy')='" + xmv_orddt + "' and trim(nvl(icat,'-'))<>'Y'", "fstr");
                        }

                        sn1 = "";
                        sn2 = "";
                        oporow["PORDNO"] = "-";
                        oporow["PORDDT"] = vchdate;
                        if (cocd == "GDOT")
                        {
                            oporow["CINAME"] = ciname_ss;
                        }
                        else {
                            oporow["CINAME"] = "-";
                        }
                            
                        oporow["CPARTNO"] = "-";
                        oporow["IRATE"] = 0;
                        oporow["CSCODE"] = "-";
                        if (it_name.Trim() != "0")
                        {
                            sn1 = it_name.Split('^')[0];
                            sn2 = it_name.Split('^')[1];
                            sn3 = it_name.Split('^')[2];
                            sn4 = it_name.Split('^')[3];
                            sn5 = it_name.Split('^')[4];
                            sn6 = it_name.Split('^')[5].Trim();

                            oporow["PORDNO"] = sn1.Trim();
                            oporow["PORDDT"] = fn_seek_iname(team.col1, branchcd, "select to_Date('" + sn2 + "','dd/mm/yyyy') as ldt from dual", "ldt");
                            oporow["CINAME"] = sn3.Trim();
                            oporow["CPARTNO"] = sn4.Trim();
                            oporow["IRATE"] = makeDouble(sn5);
                            oporow["CSCODE"] = sn6.Trim();

                        }
                        if (team.col1 == "GDOT")
                        {
                            oporow["NO_BDLS"] = xmv_batch.Trim();
                            oporow["QTYORD"] = ordqty_ss;
                        }
                        else
                        {
                            oporow["NO_BDLS"] = xmv_batch.Substring(4, 8);
                            oporow["QTYORD"] = 0;
                        }

                        if (cocd == "SGRP")
                        {
                            it_name = "0";
                        }
                        if (team.col1 == "GDOT")
                        {
                            sn1 = "-";
                        }
                        else
                        {
                            sn1 = "SELECT job_no||'^'||un_melt AS fstr FROM prod_stkr WHERE branchcd='" + branchcd + "' and type like '15%'  and TRIM(ICODE)='" + xmv_icode + "' and TRIM(vchnum)='" + xmv_batch.Substring(4, 8) + "' and to_char(vchdate,'yyyymmdd')='" + xmv_batch.Substring(12, 8) + "' and TRIM(acode)='" + xmv_batch.Substring(28, 2) + "'";
                            it_name = fn_seek_iname(cocd, branchcd, sn1, "fstr");
                        }

                        sn1 = "-";
                        sn2 = "-";
                        if (it_name.Trim() != "0")
                        {
                            sn1 = it_name.Split('^')[0];
                            sn2 = it_name.Split('^')[1];
                        }

                        oporow["WEIGHT"] = sn1;
                        oporow["PVT_MARK"] = sn2;

                        oporow["ICAT"] = "-";
                        

                        oporow["QTYBAL"] = 0;
                        oporow["DELIVERY"] = 0;
                        oporow["QD"] = 0;
                        oporow["SD"] = 0;
                        oporow["FOC"] = "-";
                        oporow["CLASS"] = "-";
                        oporow["ZONE"] = "-";
                        oporow["QDAVAILED"] = 0;
                        oporow["SDAVAILED"] = 0;
                        oporow["SDBQTY"] = 0;
                        oporow["MS_CONT"] = "-";
                        oporow["AMDT1"] = "-";
                        oporow["AMDT2"] = "-";
                        oporow["AMDT3"] = "-";
                        oporow["REMARK"] = "-";
                        oporow["GRNO"] = "-";
                        oporow["GRDATE"] = vchdate;
                        oporow["FDUE"] = "-";
                        oporow["INVTIME"] = "-";
                        oporow["REMVDATE"] = vchdate;
                        oporow["REMVTIME"] = "-";
                        oporow["MODE_TPT"] = "-";
                        oporow["MO_VEHI"] = "-";
                        oporow["THRU"] = "-";
                        oporow["DESP_TO"] = "-";



                        oporow["FREIGHT"] = "-";
                        oporow["ORG_INVNO"] = "-";
                        oporow["ORG_INVDT"] = vchdate;
                        oporow["CU_CHLNO"] = "-";
                        oporow["CU_CHLDT"] = vchdate;
                        oporow["REFDATE"] = vchdate;
                        oporow["POST"] = "-";

                        oporow["PACK"] = 0;
                        oporow["AMT_SALE"] = 0;
                        oporow["AMT_FRT"] = 0;
                        oporow["AMT_SD"] = 0;
                        oporow["AMT_EXC"] = 0;
                        oporow["CDISC"] = 0;
                        oporow["FRGHT"] = 0;
                        oporow["EXC_57F4"] = "-";

                        oporow["SRNO"] = i;
                        oporow["app_BY"] = "-";
                        oporow["app_DT"] = DateTime.Now.ToString();
                        oporow["ENT_BY"] = team.col3;
                        oporow["IPACK"] = 0;
                        oporow["NARATION"] = "-";
                        oporow["AVGPCWT"] = 0;
                        oporow["CURRENCY"] = "-";
                        oporow["RLPRC"] = 0;
                        oporow["CLO_BY"] = "-";
                        oporow["CLO_DT"] = DateTime.Now.ToString();
                        oporow["SHF_NAME"] = "-";
                        oporow["OPR_NAME"] = "-";
                        oporow["GTAX1"] = 0;
                        oporow["GTAX2"] = 0;
                        oporow["ORDLINE"] = "-";
                        oporow["ENT_DT"] = DateTime.Now.ToString();
                        oporow["EDT_BY"] = "-";
                        oporow["EDT_DT"] = DateTime.Now.ToString();
                        oporow["ITM_SPEC1"] = "-";
                        oporow["ITM_SPEC2"] = "-";
                        oporow["ITM_SPEC3"] = "-";

                        oDS.Tables[0].Rows.Add(oporow);
                        #endregion



                    }

                }
                save_data(cocd, oDS, tabname);
            }
            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }


        public List<Team> aSalsch_ins(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";
            //------------------------

            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";

            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 

            string fldfevas = "", work_br = "";
            fldfevas = fn_seek_iname(team.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "fstr");

            work_br = "00";
            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
            }

            string msg = "Data Saved";
            string saved_doc_no = "";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            string my_curr_Dt;
            my_curr_Dt = Fn_curr_dt_time(team.col1, branchcd, "");
            string it_name = "", sn1 = "", sn2 = "", sn3 = "", sn4 = "", sn5 = "", sn6 = "", sn7 = "";

            string tabname = "BUDGMST";
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();

                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }

                oDS = new DataSet();
                oporow = null;
                oDS = fill_schema(cocd, tabname);

                int no_of_ent = 0;
                for (int i = 0; i < qrlist.Length; i++)
                {

                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");

                    if (colsVal.Length <= 1)
                    {

                    }
                    else
                    {

                        string mv_branch = "";
                        string mv_type = "";
                        string xmv_acode = "-", xmv_icode = "", xmv_qtyord = "-", xmv_lastdt = "-";

                        #region Fields Getting



                        branchcd = colsVal[0].ToString().Trim();
                        branchcd = work_br;

                        type = colsVal[1].ToString().Trim();

                        xmv_acode = colsVal[2].ToString().Trim();
                        xmv_icode = colsVal[3].ToString().Trim();
                        xmv_qtyord = colsVal[4].ToString().Trim();
                        xmv_lastdt = colsVal[5].ToString().Trim();

                        #endregion


                        #region Vnum Generation
                        if (no_of_ent == 0)
                        {
                            int p = 0;
                            string error = "Y";
                            do
                            {
                                vchdate = DateTime.Now.ToString("dd/MM/yyyy");
                                vchnum = next_no(team.col1, branchcd, "-", "select max(vchnum)+" + p + " as max from " + tabname + " where branchcd='" + branchcd + "' and type ='" + type + "' and vchdate " + xprdRange + " ", 6, "max");
                                error = fn_chk_pk(tabname + branchcd + type + vchnum + vchdate, team.col1, branchcd, type, vchnum, vchdate, acode, "WEBAPI").Trim();
                                if (p > 10)
                                { error = "N"; throw new Exception("Test Exception"); }
                                p++;
                            }
                            while (error.Equals("Y"));
                        }
                        no_of_ent = no_of_ent + 1;
                        #endregion

                        #region Saving to Oracle in 4 series
                        oporow = oDS.Tables[0].NewRow();

                        vchdate = fn_seek_iname(team.col1, branchcd, "select to_Date(to_char(sysdate,'dd/mm/yyyy'),'dd/mm/yyyy') as ldt from dual", "ldt");


                        oporow["BRANCHCD"] = branchcd;
                        oporow["TYPE"] = "46";
                        oporow["vchnum"] = vchnum;
                        oporow["vchdate"] = vchdate;

                        saved_doc_no = branchcd + type + vchnum + DateTime.Now.ToString("dd/MM/yyyy");

                        msg = "Sales Schedule : " + saved_doc_no;

                        oporow["SRNO"] = i;

                        oporow["desc_"] = xmv_lastdt;
                        oporow["dlv_Date"] = vchdate;
                        ///make_def_Date(xmv_lastdt, vchdate);

                        oporow["acode"] = xmv_acode;
                        oporow["icode"] = xmv_icode.Trim();

                        oporow["budgetcost"] = makeDouble(xmv_qtyord);
                        oporow["actualcost"] = makeDouble(xmv_qtyord);

                        it_name = fn_seek_iname(cocd, branchcd, "SELECT type||'^'||ordno||'^'||to_char(orddt,'dd/mm/yyyy')||'^'||pordno||'^'||cpartno||'^'||irate||'^'||cscode AS fstr FROM somas WHERE branchcd='" + branchcd + "' and type like '4%'  and TRIM(ACODE)='" + xmv_acode + "' and TRIM(ICODE)='" + xmv_icode + "' and trim(nvl(icat,'-'))<>'Y' order by orddt desc", "fstr");
                        sn1 = "";
                        sn2 = "";
                        if (it_name.Trim() != "0")
                        {
                            sn1 = it_name.Split('^')[0];
                            sn2 = it_name.Split('^')[1];
                            sn3 = it_name.Split('^')[2];
                            sn4 = it_name.Split('^')[3];
                            sn5 = it_name.Split('^')[4];
                            sn6 = it_name.Split('^')[5];
                            sn7 = it_name.Split('^')[5];
                        }
                        oporow["solink"] = branchcd + sn1 + sn2 + sn3;

                        oporow["ppordno"] = sn4;

                        oporow["ccpartno"] = sn5;
                        oporow["srate"] = makeDouble(sn6);
                        oporow["cons_dtl"] = sn7;

                        oporow["tolerance"] = 0;
                        oporow["sodesc1"] = "-";


                        oporow["soremarks"] = "-";
                        oporow["socat"] = "-";


                        oporow["JOBCARDNO"] = "-";
                        oporow["JOBCARDQTY"] = 0;

                        //oporow["app_by"] = "-";
                        //oporow["app_dt"]=vchdate;

                        oporow["FROMSO"] = "N";
                        oporow["jobcardrqd"] = "Y";

                        oporow["req_Closedby"] = "-";



                        //oporow["ENT_BY"] = team.col3;
                        oporow["ent_dt"] = DateTime.Now.ToString();

                        //oporow["EDT_BY"] = "-";
                        //oporow["EDT_DT"] = Fn_curr_dt_time(team.col1, branchcd, "");

                        oDS.Tables[0].Rows.Add(oporow);
                        #endregion



                    }

                }
                save_data(cocd, oDS, tabname);
            }
            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }

        public List<Team> aMaintcomp_ins(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";

            //------------------------

            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";

            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 

            string fldfevas = "", work_br = "";
            fldfevas = fn_seek_iname(team.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "fstr");

            work_br = "00";
            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
            }

            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            string tabname = "WB_MAINT_COMP";
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();


                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }

                oDS = new DataSet();
                oporow = null;
                oDS = fill_schema(cocd, tabname);

                int no_of_ent = 0;
                for (int i = 0; i < qrlist.Length; i++)
                {

                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");

                    if (colsVal.Length <= 1)
                    {

                    }
                    else
                    {
                        string xmv_comploc = "-", xmv_shft = "-", xmv_deptt = "", xmv_mach = "-", xmv_comphr = "-", xmv_compmin = "-", xmv_comptype = "-", xmv_remarks = "-";

                        #region Fields Getting



                        branchcd = colsVal[0].ToString().Trim();
                        branchcd = work_br;

                        type = colsVal[1].ToString().Trim();
                        type = "MQ";

                        mq = "delete from wsr_Ctrl where finpkfld like '" + "WB_MAINT_COMP" + "%' and branchcd='" + branchcd + "' and type ='" + type + "' and branchcd||type||vchnum||to_char(Vchdate,'dd/mm/yyyy') not in (select distinct branchcd||type||vchnum||to_char(Vchdate,'dd/mm/yyyy') from " + tabname + ")";
                        mq1 = execute_cmd1(team.col1, mq);

                        xmv_comploc = colsVal[2].ToString().Trim();
                        xmv_shft = colsVal[3].ToString().Trim();
                        xmv_deptt = colsVal[4].ToString().Trim();
                        xmv_mach = colsVal[5].ToString().Trim();
                        xmv_comphr = colsVal[6].ToString().Trim();
                        xmv_compmin = colsVal[7].ToString().Trim();
                        xmv_comptype = colsVal[8].ToString().Trim();
                        xmv_remarks = colsVal[9].ToString().Trim();

                        #endregion


                        #region Vnum Generation
                        if (no_of_ent == 0)
                        {
                            int p = 0;
                            string error = "Y";
                            do
                            {
                                vchdate = DateTime.Now.ToString("dd/MM/yyyy");
                                vchnum = next_no(team.col1, branchcd, "-", "select max(vchnum)+" + p + " as max from " + tabname + " where branchcd='" + branchcd + "' and type ='" + type + "' and vchdate " + xprdRange + " ", 6, "max");
                                error = fn_chk_pk(tabname + branchcd + type + vchnum + vchdate, team.col1, branchcd, type, vchnum, vchdate, acode, "WEBAPI").Trim();
                                if (p > 10)
                                { error = "N"; throw new Exception("Test Exception"); }
                                p++;
                            }
                            while (error.Equals("Y"));
                        }
                        no_of_ent = no_of_ent + 1;
                        #endregion

                        #region Saving to Oracle in 4 series
                        oporow = oDS.Tables[0].NewRow();

                        vchdate = fn_seek_iname(team.col1, branchcd, "select to_Date(to_char(sysdate,'dd/mm/yyyy'),'dd/mm/yyyy') as ldt from dual", "ldt");


                        oporow["BRANCHCD"] = branchcd;
                        oporow["TYPE"] = type;
                        oporow["vchnum"] = vchnum;
                        oporow["vchdate"] = vchdate;

                        oporow["COMP_LOCN"] = xmv_comploc;
                        oporow["SHFT_NAME"] = xmv_shft;
                        oporow["DEPTT_NAME"] = xmv_deptt;
                        oporow["MACH_NAME"] = xmv_mach;
                        oporow["COMP_HRS"] = makeDouble(xmv_comphr);
                        oporow["COMP_MIN"] = makeDouble(xmv_compmin);
                        oporow["COMP_TYPE"] = xmv_comptype;
                        oporow["REMARKS"] = xmv_remarks;

                        oporow["ent_by"] = team.col3;
                        oporow["ent_dt"] = DateTime.Now.ToString();

                        oDS.Tables[0].Rows.Add(oporow);
                        #endregion
                    }

                }
                save_data(cocd, oDS, tabname);
            }
            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = vchnum, col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }

        //-------------------------------------------------------------------------
        public List<Team> aMaintsolv_ins(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";

            //------------------------

            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";

            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 

            string fldfevas = "", work_br = "";
            fldfevas = fn_seek_iname(team.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "fstr");

            work_br = "00";
            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
            }
            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            string tabname = "WB_MAINT_ACT";
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();


                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }

                oDS = new DataSet();
                oporow = null;
                oDS = fill_schema(cocd, tabname);

                int no_of_ent = 0;
                for (int i = 0; i < qrlist.Length; i++)
                {

                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");

                    if (colsVal.Length <= 1)
                    {

                    }
                    else
                    {
                        string xmv_comploc = "-", xmv_shft = "-", xmv_deptt = "", xmv_mach = "-", xmv_donehr = "-", xmv_donemin = "-";
                        string xmv_issobsv = "-", xmv_corract = "-", xmv_prevact = "-", xmv_sparecons = "-", xmv_sparecost = "-", xmv_remarks = "-";
                        string xmv_comp_ref = "-";

                        #region Fields Getting



                        branchcd = colsVal[0].ToString().Trim();
                        branchcd = work_br;

                        type = colsVal[1].ToString().Trim();
                        type = "MS";
                        xmv_comploc = colsVal[2].ToString().Trim();
                        xmv_shft = colsVal[3].ToString().Trim();
                        xmv_deptt = colsVal[4].ToString().Trim();
                        xmv_mach = colsVal[5].ToString().Trim();
                        xmv_donehr = colsVal[6].ToString().Trim();
                        xmv_donemin = colsVal[7].ToString().Trim();

                        xmv_issobsv = colsVal[8].ToString().Trim();
                        xmv_corract = colsVal[9].ToString().Trim();
                        xmv_prevact = colsVal[10].ToString().Trim();
                        xmv_sparecons = colsVal[11].ToString().Trim();
                        xmv_sparecost = colsVal[12].ToString().Trim();
                        xmv_remarks = colsVal[13].ToString().Trim();
                        xmv_comp_ref = colsVal[14].ToString().Trim();

                        #endregion


                        #region Vnum Generation
                        if (no_of_ent == 0)
                        {
                            int p = 0;
                            string error = "Y";
                            do
                            {
                                vchdate = DateTime.Now.ToString("dd/MM/yyyy");
                                vchnum = next_no(team.col1, branchcd, "-", "select max(vchnum)+" + p + " as max from " + tabname + " where branchcd='" + branchcd + "' and type ='" + type + "' and vchdate " + xprdRange + " ", 6, "max");
                                error = fn_chk_pk(tabname + branchcd + type + vchnum + vchdate, team.col1, branchcd, type, vchnum, vchdate, acode, "WEBAPI").Trim();
                                if (p > 10)
                                { error = "N"; throw new Exception("Test Exception"); }
                                p++;
                            }
                            while (error.Equals("Y"));
                        }
                        no_of_ent = no_of_ent + 1;
                        #endregion

                        #region Saving to Oracle in 4 series
                        oporow = oDS.Tables[0].NewRow();

                        vchdate = fn_seek_iname(team.col1, branchcd, "select to_Date(to_char(sysdate,'dd/mm/yyyy'),'dd/mm/yyyy') as ldt from dual", "ldt");


                        oporow["BRANCHCD"] = branchcd;
                        oporow["TYPE"] = type;
                        oporow["vchnum"] = vchnum;
                        oporow["vchdate"] = vchdate;

                        oporow["COMP_LOCN"] = xmv_comploc;
                        oporow["SHFT_NAME"] = xmv_shft;
                        oporow["DEPTT_NAME"] = xmv_deptt;
                        oporow["MACH_NAME"] = xmv_mach;

                        oporow["Done_hrs"] = makeDouble(xmv_donehr);
                        oporow["Done_min"] = makeDouble(xmv_donemin);

                        oporow["ISSUE_OBSV"] = xmv_issobsv;
                        oporow["CORR_ACT"] = xmv_corract;
                        oporow["PREV_ACT"] = xmv_prevact;
                        oporow["SPARE_CONS"] = xmv_sparecons;

                        oporow["SPARE_COST"] = makeDouble(xmv_sparecost);

                        oporow["REMARKS"] = xmv_remarks;
                        oporow["comp_ref"] = xmv_comp_ref;
                        oporow["COMPDT"] = DateTime.Now.ToString();

                        oporow["ent_by"] = team.col3;
                        oporow["ent_dt"] = DateTime.Now.ToString();

                        oDS.Tables[0].Rows.Add(oporow);
                        #endregion



                    }

                }
                save_data(cocd, oDS, tabname);
            }
            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }
        //---------------------------------------------------------
        public List<Team> amaintspare_ins(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";

            //------------------------

            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";

            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 

            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            string tabname = "IVOUCHERW";
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();


                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }

                oDS = new DataSet();
                oporow = null;
                oDS = fill_schema(cocd, tabname);

                int no_of_ent = 0;
                for (int i = 0; i < qrlist.Length; i++)
                {

                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");

                    if (colsVal.Length <= 1)
                    {

                    }
                    else
                    {

                        string req_Dt = "";
                        string mv_branch = "";
                        string mv_type = "";


                        #region Fields Getting

                        branchcd = "00";
                        type = "MS";


                        string xmv_icode = "", xmv_iqtyout = "", xmv_maint_Ref = "";

                        xmv_icode = colsVal[0].ToString().Trim();
                        xmv_iqtyout = colsVal[1].ToString().Trim();
                        xmv_maint_Ref = colsVal[2].ToString().Trim();

                        #endregion


                        #region Vnum Generation
                        if (no_of_ent == 0)
                        {
                            int p = 0;
                            string error = "Y";
                            do
                            {
                                vchdate = DateTime.Now.ToString("dd/MM/yyyy");
                                vchnum = next_no(team.col1, branchcd, "-", "select max(vchnum)+" + p + " as max from " + tabname + " where branchcd='" + branchcd + "' and type ='" + type + "' and vchdate " + xprdRange + " ", 6, "max");
                                error = fn_chk_pk(tabname + branchcd + type + vchnum + vchdate, team.col1, branchcd, type, vchnum, vchdate, acode, "WEBAPI").Trim();
                                if (p > 10)
                                { error = "N"; throw new Exception("Test Exception"); }
                                p++;
                            }
                            while (error.Equals("Y"));
                        }
                        no_of_ent = no_of_ent + 1;
                        #endregion

                        #region Saving to Oracle in 4 series
                        oporow = oDS.Tables[0].NewRow();

                        vchdate = fn_seek_iname(team.col1, branchcd, "select to_Date(to_char(sysdate,'dd/mm/yyyy'),'dd/mm/yyyy') as ldt from dual", "ldt");


                        oporow["BRANCHCD"] = branchcd;
                        oporow["TYPE"] = type;
                        oporow["VCHNUM"] = vchnum;
                        oporow["VCHDATE"] = vchdate;


                        oporow["srno"] = i;

                        oporow["icode"] = xmv_icode.Substring(0, 8);
                        oporow["iqtyout"] = makeDouble(xmv_iqtyout);

                        oporow["exc_57f4"] = xmv_maint_Ref;
                        oporow["irate"] = makeDouble(fn_seek_iname(team.col1, branchcd, "select (Case when nvl(iqd,0)=0 then irate else iqd end) as irate from item where trim(upper(icode))=Trim('" + xmv_icode.Substring(0, 8) + "')", "irate"));
                        oporow["iqty_chl"] = 0;
                        oporow["iqtyin"] = 0;


                        oporow["ent_by"] = team.col3;
                        oporow["ent_dt"] = DateTime.Now.ToString();

                        oporow["edt_by"] = "-";
                        oporow["edt_dt"] = DateTime.Now.ToString();


                        oDS.Tables[0].Rows.Add(oporow);
                        #endregion


                    }

                }
                save_data(cocd, oDS, tabname);
            }
            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }

        public List<Team> aIssReq_ins(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";

            //------------------------

            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";

            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 
            string fldfevas = "", work_br = "";
            fldfevas = fn_seek_iname(team.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "fstr");
            work_br = "00";
            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
            }
            string saved_doc_no = "";
            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            string tabname = "WB_ISS_REQ";
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();


                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }

                oDS = new DataSet();
                oporow = null;
                oDS = fill_schema(cocd, tabname);

                int no_of_ent = 0;
                for (int i = 0; i < qrlist.Length; i++)
                {

                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");

                    if (colsVal.Length <= 1)
                    {

                    }
                    else
                    {

                        string mv_branch = "";
                        string mv_type = "";
                        string xmv_dep_acd = "-", xmv_dep_stg = "", xmv_dep_icd = "-", xmv_dep_req = "-";

                        #region Fields Getting



                        branchcd = colsVal[0].ToString().Trim();
                        branchcd = work_br;

                        type = colsVal[1].ToString().Trim();

                        xmv_dep_acd = colsVal[2].ToString().Trim();
                        xmv_dep_stg = colsVal[3].ToString().Trim();
                        xmv_dep_icd = colsVal[4].ToString().Trim();
                        xmv_dep_req = colsVal[5].ToString().Trim();

                        #endregion


                        #region Vnum Generation
                        if (no_of_ent == 0)
                        {
                            int p = 0;
                            string error = "Y";
                            do
                            {
                                vchdate = DateTime.Now.ToString("dd/MM/yyyy");
                                vchnum = next_no(team.col1, branchcd, "-", "select max(vchnum)+" + p + " as max from " + tabname + " where branchcd='" + branchcd + "' and type ='" + type + "' and vchdate " + xprdRange + " ", 6, "max");
                                error = fn_chk_pk(tabname + branchcd + type + vchnum + vchdate, team.col1, branchcd, type, vchnum, vchdate, acode, "WEBAPI").Trim();
                                if (p > 10)
                                { error = "N"; throw new Exception("Test Exception"); }
                                p++;
                            }
                            while (error.Equals("Y"));
                        }
                        no_of_ent = no_of_ent + 1;
                        #endregion

                        #region Saving to Oracle in 4 series
                        oporow = oDS.Tables[0].NewRow();

                        //vchdate = fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE('" + vchdate + "','dd/mm/yyyy') as vchdate from dual", "vchdate");

                        vchdate = fn_seek_iname(team.col1, branchcd, "select to_Date(to_char(sysdate,'dd/mm/yyyy'),'dd/mm/yyyy') as ldt from dual", "ldt");


                        oporow["BRANCHCD"] = branchcd;
                        oporow["ORIGNALBR"] = branchcd;
                        oporow["TYPE"] = type;
                        oporow["VCHNUM"] = vchnum;
                        oporow["VCHDATE"] = vchdate;

                        saved_doc_no = branchcd + type + vchnum + DateTime.Now.ToString("dd/MM/yyyy");

                        if (type.Substring(0, 1) == "1")
                        {
                            msg = "Return Request Saved : " + saved_doc_no;
                        }
                        else
                        {
                            msg = "Issue Request Saved : " + saved_doc_no;
                        }


                        oporow["ACODE"] = xmv_dep_acd;
                        oporow["STAGE"] = xmv_dep_stg;
                        oporow["ICODE"] = xmv_dep_icd.Trim();
                        oporow["REQ_QTY"] = makeDouble(xmv_dep_req);

                        oporow["REQ_WT"] = 0;
                        oporow["NO_BDLS"] = "-";
                        oporow["DESC_"] = "-";
                        oporow["NARATION"] = "-";

                        oporow["JOBNO"] = "-";
                        oporow["JOBDT"] = vchdate;
                        oporow["MORDER"] = i;

                        oporow["CLOSED"] = "N";
                        oporow["RCODE"] = "-";
                        oporow["RC_QTY"] = 0;


                        oporow["ent_by"] = team.col3;
                        oporow["ent_dt"] = DateTime.Now.ToString();

                        oporow["app_by"] = "-";
                        oporow["APP_dt"] = DateTime.Now.ToString();


                        oDS.Tables[0].Rows.Add(oporow);
                        #endregion



                    }

                }
                save_data(cocd, oDS, tabname);
            }
            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }
        //=================================================================
        public List<Team> aIssEntry_ins(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";

            //------------------------

            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";

            string fldfevas = "", work_br = "";
            fldfevas = fn_seek_iname(team.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "fstr");
            work_br = "00";
            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
            }
            string it_name = "";
            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 
            string saved_doc_no = "";
            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            int no_of_ent = 0;
            string xprd1 = "";
            string mydate = "";
            string mq1 = "", mq2 = "", mq3 = "";
            string yr_fld = "";
            string avail_Stk = "";
            int err_itm_cnt = 0;
            string err_itm_dtl = "";
            string sn1 = "", sn2 = "", sn3 = "", sn4 = "", sn5 = "";
            string stk_item = "", stk_avail = "", chk_Stk = "";
            string req_Dt = "";
            string mv_branch = "";
            string mv_type = "";
            string xmv_dep_acd = "-", xmv_dep_stg = "", xmv_dep_icd = "-", xmv_dep_req = "-";
            string xmv_dep_reqno = "-", xmv_dep_reqdt = "-", xmv_btch_no = "-";
            List<Team> mylist = new List<Team>();
            string tabname = "IVOUCHER";

            //---------------------------------------------
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();


                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }

                mydate = DateTime.Now.ToString("dd/MM/yyyy");
                xprd1 = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + mydate + "','dd/mm/yyyy')";
                yr_fld = fn_seek_iname(team.col1, "", "Select to_char(to_date('" + frm_cDt1 + "','dd/mm/yyyy'),'yyyy') as fmdt from dual", "fmdt");

                for (int i = 0; i < qrlist.Length; i++)
                {

                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");

                    if (colsVal.Length <= 1)
                    {

                    }
                    else
                    {
                        branchcd = colsVal[0].ToString().Trim();
                        branchcd = work_br;
                        type = colsVal[1].ToString().Trim();
                        xmv_dep_stg = colsVal[3].ToString().Trim();

                        xmv_dep_icd = colsVal[4].ToString().Trim();
                        xmv_dep_req = colsVal[5].ToString().Trim();

                        mq1 = "select b.iname||'^'||(sum(a.opening)+sum(a.cdr)-sum(a.ccr)) as closing from (Select icode, yr_" + yr_fld + " as opening,0 as cdr,0 as ccr,0 as clos from itembal where BRANCHCD='" + branchcd + "' and icode='" + xmv_dep_icd + "' union all  ";
                        mq2 = "select icode,0 as op,nvl(iqtyin,0) as cdr,nvl(iqtyout,0) as ccr,0 as clos from ivoucher where BRANCHCD='" + branchcd + "' and type like '%' and vchdate " + xprd1 + " and store='Y' and icode='" + xmv_dep_icd + "' ) a,ITEM B WHERE TRIM(A.ICODE)=TRIM(b.ICODE) group by b.iname ";
                        chk_Stk = fn_seek_iname(team.col1, "", mq1 + mq2, "closing");

                        if (chk_Stk.Trim() != "0")
                        {
                            stk_item = chk_Stk.Split('^')[0];
                            stk_avail = chk_Stk.Split('^')[1];
                        }

                        if (makeDouble(stk_avail) < makeDouble(xmv_dep_req) && type.Substring(0, 1) == "3")
                        {
                            msg = "No Stock";
                            err_itm_cnt = err_itm_cnt + 1;
                            err_itm_dtl = err_itm_dtl + "|" + stk_item.Trim() + "|" + stk_avail + "|";
                        }

                    }

                }


            }

            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Please Check Stock";
            }
            if (err_itm_cnt > 0)
            {

                try
                {
                    mylist.Add(new Team { col1 = msg, col2 = err_itm_dtl, col3 = "-", col4 = "-", col5 = "-", });
                }
                catch { }
                return mylist;
            }

            //--------------------------------------------
            msg = "Data Saved";
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();


                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }

                oDS = new DataSet();
                oporow = null;
                oDS = fill_schema(cocd, tabname);


                for (int i = 0; i < qrlist.Length; i++)
                {

                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");

                    if (colsVal.Length <= 1)
                    {

                    }
                    else
                    {
                        #region Fields Getting



                        branchcd = colsVal[0].ToString().Trim();
                        branchcd = work_br;

                        type = colsVal[1].ToString().Trim();

                        xmv_dep_acd = colsVal[2].ToString().Trim();
                        xmv_dep_stg = colsVal[3].ToString().Trim();

                        xmv_dep_icd = colsVal[4].ToString().Trim();
                        xmv_dep_req = colsVal[5].ToString().Trim();

                        xmv_dep_reqno = colsVal[6].ToString().Trim();
                        xmv_dep_reqdt = colsVal[7].ToString().Trim();
                        xmv_btch_no = colsVal[8].ToString().Trim();


                        #endregion


                        #region Vnum Generation
                        if (no_of_ent == 0)
                        {
                            int p = 0;
                            string error = "Y";
                            do
                            {
                                vchdate = DateTime.Now.ToString("dd/MM/yyyy");
                                vchnum = next_no(team.col1, branchcd, "-", "select max(vchnum)+" + p + " as max from " + tabname + " where branchcd='" + branchcd + "' and type ='" + type + "' and vchdate " + xprdRange + " ", 6, "max");
                                error = fn_chk_pk(tabname + branchcd + type + vchnum + vchdate, team.col1, branchcd, type, vchnum, vchdate, acode, "WEBAPI").Trim();
                                if (p > 10)
                                { error = "N"; throw new Exception("Test Exception"); }
                                p++;
                            }
                            while (error.Equals("Y"));
                        }
                        no_of_ent = no_of_ent + 1;
                        #endregion

                        #region Saving to Oracle in 4 series
                        oporow = oDS.Tables[0].NewRow();

                        //vchdate = fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE('" + vchdate + "','dd/mm/yyyy') as vchdate from dual", "vchdate");

                        vchdate = fn_seek_iname(team.col1, branchcd, "select to_Date(to_char(sysdate,'dd/mm/yyyy'),'dd/mm/yyyy') as ldt from dual", "ldt");

                        req_Dt = fn_seek_iname(team.col1, branchcd, "select to_Date('" + xmv_dep_reqdt + "','dd/mm/yyyy') as ldt from dual", "ldt");

                        oporow["BRANCHCD"] = branchcd;
                        oporow["store_no"] = branchcd;
                        oporow["TYPE"] = type;
                        oporow["VCHNUM"] = vchnum;
                        oporow["VCHDATE"] = vchdate;

                        saved_doc_no = branchcd + type + vchnum + DateTime.Now.ToString("dd/MM/yyyy");



                        oporow["ACODE"] = xmv_dep_acd;
                        oporow["STAGE"] = xmv_dep_stg;
                        oporow["mode_Tpt"] = fn_seek_iname(cocd, branchcd, "SELECT name AS fstr FROM typegrp where branchcd='" + branchcd + "' and id='WI' and acref='" + xmv_dep_stg + "'", "fstr"); ;
                        oporow["ICODE"] = xmv_dep_icd.Trim();

                        if (type.Substring(0, 1) == "1")
                        {
                            msg = "Return Saved : " + saved_doc_no;
                            oporow["iqtyin"] = makeDouble(xmv_dep_req); ;
                            oporow["iqty_chl"] = makeDouble(xmv_dep_req);
                            oporow["iqtyout"] = 0;
                            oporow["rec_iss"] = "D";
                            oporow["store"] = "Y";

                        }
                        else
                        {
                            msg = "Issue Data Saved : " + saved_doc_no;
                            oporow["iqtyin"] = 0;
                            oporow["iqty_chl"] = makeDouble(xmv_dep_req);
                            oporow["iqtyout"] = makeDouble(xmv_dep_req);
                            oporow["rec_iss"] = "C";
                            oporow["store"] = "Y";
                        }

                        oporow["O_DEPTT"] = "PRODUCTION";
                        oporow["T_DEPTT"] = "STORES";

                        oporow["NARATION"] = "-";

                        oporow["refnum"] = xmv_dep_reqno;
                        oporow["refdate"] = req_Dt;


                        oporow["invno"] = xmv_dep_reqno;
                        oporow["invdate"] = req_Dt;


                        oporow["freight"] = xmv_dep_reqno;


                        oporow["RCODE"] = "-";

                        oporow["MORDER"] = i;
                        oporow["DESC_"] = xmv_btch_no;


                        if (team.col1 == "VIGP" || team.col1 == "BRPL" || team.col1 == "JRAJ" || team.col1 == "GDOT")
                        {

                            oporow["mattype"] = xmv_btch_no;
                            oporow["store_no"] = xmv_dep_stg;

                            it_name = fn_seek_iname(cocd, branchcd, "SELECT a.type||'^'||a.vchnum||'^'||to_char(a.vchdate,'dd/mm/yyyy')||'^'||a.acode||'^'||to_char(a.invdate,'dd/mm/yyyy') AS fstr FROM ivoucher a,(select trim(type)||trim(vchnum)||trim(icode)||(btchno) as fstr from (Select type,vchnum,icode,btchno,iqtyin from ivoucher where branchcd='" + branchcd + "' and type like '0%'  and TRIM(ICODE)='" + xmv_dep_icd.Trim() + "' and TRIM(btchno)='" + xmv_btch_no.Trim() + "' and store='Y' union all Select buyer,genum,icode,mattype,-1*iqtyout from ivoucher where branchcd='" + branchcd + "' and type like '3%'  and TRIM(ICODE)='" + xmv_dep_icd.Trim() + "' and TRIM(mattype)='" + xmv_btch_no.Trim() + "' and store='Y') group by trim(type)||trim(vchnum)||trim(icode)||(btchno) having sum(iqtyin)>0)b WHERE trim(a.type)||trim(a.vchnum)||trim(a.icode)||(a.btchno)=b.fstr and a.branchcd='" + branchcd + "' and a.type like '0%'  and TRIM(a.ICODE)='" + xmv_dep_icd.Trim() + "' and TRIM(a.btchno)='" + xmv_btch_no.Trim() + "' and a.store='Y' order by a.vchdate ", "fstr");

                        }
                        else
                        {
                            oporow["mattype"] = type;
                            it_name = fn_seek_iname(cocd, branchcd, "SELECT type||'^'||vchnum||'^'||to_char(vchdate,'dd/mm/yyyy')||'^'||acode||'^'||to_char(invdate,'dd/mm/yyyy') AS fstr FROM ivoucher WHERE branchcd='" + branchcd + "' and type like '0%'  and TRIM(ICODE)='" + xmv_dep_icd.Trim() + "' and TRIM(btchno)='" + xmv_btch_no.Trim() + "' and store='Y' order by vchdate desc", "fstr");
                        }




                        sn1 = "";
                        sn2 = "";
                        oporow["inspected"] = "Y";

                        oporow["genum"] = "-";
                        oporow["gedate"] = vchdate;
                        oporow["vcode"] = "-";
                        oporow["buyer"] = "-";

                        if (it_name.Trim() != "0")
                        {
                            sn1 = it_name.Split('^')[0];
                            sn2 = it_name.Split('^')[1];
                            sn3 = it_name.Split('^')[2];
                            sn4 = it_name.Split('^')[3];
                            sn5 = it_name.Split('^')[4];

                            oporow["buyer"] = sn1;
                            oporow["genum"] = sn2;
                            oporow["btchno"] = sn2;
                            oporow["gedate"] = fn_seek_iname(cocd, branchcd, "SELECT to_date('" + sn3 + "','dd/mm/yyyy') AS fstr FROM dual", "fstr");
                            oporow["vcode"] = sn4;
                            oporow["DESC_"] = xmv_btch_no + " / " + sn5;
                        }


                        oporow["ent_by"] = team.col3;
                        oporow["ent_dt"] = DateTime.Now.ToString();

                        oporow["edt_by"] = "-";
                        oporow["edt_dt"] = DateTime.Now.ToString();

                        oDS.Tables[0].Rows.Add(oporow);
                        #endregion
                    }
                }
                save_data(cocd, oDS, tabname);
            }
            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }

            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }
        //=================================================================
        public List<Team> aInterStg_ins(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";

            //------------------------

            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";

            string fldfevas = "", work_br = "";
            fldfevas = fn_seek_iname(team.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "fstr");
            work_br = "00";
            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
            }


            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 
            string saved_doc_no = "";
            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            int no_of_ent = 0;
            string xprd1 = "";
            string mydate = "";
            string mq1 = "", mq2 = "", mq3 = "";
            string yr_fld = "";
            string avail_Stk = "";
            int err_itm_cnt = 0;
            string err_itm_dtl = "";

            string stk_item = "", stk_avail = "", chk_Stk = "";
            string req_Dt = "";
            string mv_branch = "";
            string mv_type = "";


            string xmv_tfr_code = "-";
            string xmv_tfr_from = "-";
            string xmv_tfr_to = "-";
            string xmv_tfr_batch = "-";
            string xmv_job_no = "";
            string xmv_job_dt = "";
            string xmv_tfr_qty = "-";
            string xmv_tfr_rmk = "-";

            List<Team> mylist = new List<Team>();
            string tabname = "IVOUCHER";

            //---------------------------------------------
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();

                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }

                mydate = DateTime.Now.ToString("dd/MM/yyyy");
                xprd1 = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + mydate + "','dd/mm/yyyy')";
                yr_fld = fn_seek_iname(team.col1, "", "Select to_char(to_date('" + frm_cDt1 + "','dd/mm/yyyy'),'yyyy') as fmdt from dual", "fmdt");

                for (int i = 0; i < qrlist.Length; i++)
                {

                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");

                    if (colsVal.Length <= 1)
                    {

                    }
                    else
                    {

                        //branchcd = colsVal[0].ToString().Trim();
                        //xmv_dep_icd = colsVal[4].ToString().Trim();
                        //xmv_dep_req = colsVal[5].ToString().Trim();

                        //mq1 = "select b.iname||'^'||(sum(a.opening)+sum(a.cdr)-sum(a.ccr)) as closing from (Select icode, yr_" + yr_fld + " as opening,0 as cdr,0 as ccr,0 as clos from itembal where BRANCHCD='" + branchcd + "' and icode='" + xmv_dep_icd + "' union all  ";
                        //mq2 = "select icode,0 as op,nvl(iqtyin,0) as cdr,nvl(iqtyout,0) as ccr,0 as clos from ivoucher where BRANCHCD='" + branchcd + "' and type like '%' and vchdate " + xprd1 + " and store='Y' and icode='" + xmv_dep_icd + "' ) a,ITEM B WHERE TRIM(A.ICODE)=TRIM(b.ICODE) group by b.iname ";
                        //chk_Stk = fn_seek_iname(team.col1, "", mq1 + mq2, "closing");

                        //if (chk_Stk.Trim() != "0")
                        //{
                        //    stk_item = chk_Stk.Split('^')[0];
                        //    stk_avail = chk_Stk.Split('^')[1];
                        //}

                        //if (makeDouble(stk_avail) < makeDouble(xmv_dep_req))
                        //{
                        //    msg = "NO STOCK";
                        //    err_itm_cnt = err_itm_cnt + 1;
                        //    err_itm_dtl = err_itm_dtl + "|" + stk_item.Trim() + "|" + stk_avail + "|";
                        //}

                    }

                }


            }

            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Please Check Stock";
            }
            //if (err_itm_cnt > 0)
            if (1 == 2)
            {

                try
                {
                    mylist.Add(new Team { col1 = msg, col2 = err_itm_dtl, col3 = "-", col4 = "-", col5 = "-", });
                }
                catch { }
                return mylist;
            }

            //--------------------------------------------
            msg = "Data Saved";
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();


                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }

                oDS = new DataSet();
                oporow = null;
                oDS = fill_schema(cocd, tabname);


                for (int i = 0; i < qrlist.Length; i++)
                {

                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");

                    if (colsVal.Length <= 1)
                    {

                    }
                    else
                    {
                        #region Fields Getting



                        branchcd = colsVal[0].ToString().Trim();
                        branchcd = work_br;

                        type = "3A";

                        xmv_tfr_code = colsVal[2].ToString().Trim();
                        xmv_job_no = colsVal[3].ToString().Trim();
                        xmv_job_dt = colsVal[4].ToString().Trim();
                        xmv_tfr_to = colsVal[5].ToString().Trim();
                        xmv_tfr_from = colsVal[6].ToString().Trim();
                        xmv_tfr_batch = colsVal[7].ToString().Trim();

                        xmv_tfr_qty = colsVal[8].ToString().Trim();
                        xmv_tfr_rmk = colsVal[9].ToString().Trim();

                        #endregion


                        #region Vnum Generation
                        if (no_of_ent == 0)
                        {
                            int p = 0;
                            string error = "Y";
                            do
                            {
                                vchdate = DateTime.Now.ToString("dd/MM/yyyy");
                                vchnum = next_no(team.col1, branchcd, "-", "select max(vchnum)+" + p + " as max from " + tabname + " where branchcd='" + branchcd + "' and type ='" + type + "' and vchdate " + xprdRange + " ", 6, "max");
                                error = fn_chk_pk(tabname + branchcd + type + vchnum + vchdate, team.col1, branchcd, type, vchnum, vchdate, acode, "WEBAPI").Trim();
                                if (p > 10)
                                { error = "N"; throw new Exception("Test Exception"); }
                                p++;
                            }
                            while (error.Equals("Y"));
                        }
                        no_of_ent = no_of_ent + 1;
                        #endregion

                        #region Saving to Oracle in 4 series




                        vchdate = fn_seek_iname(team.col1, branchcd, "select to_Date(to_char(sysdate,'dd/mm/yyyy'),'dd/mm/yyyy') as ldt from dual", "ldt");


                        //---------------------------------------------
                        //-------------- Saving into next stage
                        //---------------------------------------------
                        oporow = oDS.Tables[0].NewRow();

                        oporow["BRANCHCD"] = branchcd;
                        oporow["TYPE"] = type;
                        oporow["VCHNUM"] = vchnum;
                        oporow["VCHDATE"] = vchdate;

                        saved_doc_no = branchcd + type + vchnum + DateTime.Now.ToString("dd/MM/yyyy");

                        msg = "Data Saved : " + saved_doc_no;


                        oporow["ICODE"] = xmv_tfr_code.Trim();
                        oporow["IOPR"] = "-";
                        oporow["ACODE"] = xmv_tfr_to;
                        oporow["STAGE"] = xmv_tfr_to;
                        oporow["INVNO"] = xmv_tfr_batch;
                        oporow["iqtyin"] = makeDouble(xmv_tfr_qty);
                        oporow["iqty_chl"] = makeDouble(xmv_tfr_qty);
                        oporow["BTCHNO"] = xmv_tfr_batch;  // shivam updated this 
                        oporow["iqtyout"] = 0;
                        oporow["rec_iss"] = "D";
                        oporow["store"] = "W";

                        oporow["DESC_"] = xmv_tfr_rmk;
                        oporow["NARATION"] = "-";

                        if (team.col1 != "CHPL")
                        {
                            oporow["refnum"] = xmv_job_no;
                            oporow["refdate"] = DateTime.ParseExact(xmv_job_dt, "dd/MM/yyyy", null).ToString();
                        }
                        oporow["MORDER"] = i;


                        oporow["RCODE"] = "-";

                        oporow["ent_by"] = team.col3;
                        oporow["ent_dt"] = DateTime.Now.ToString();

                        oporow["edt_by"] = "-";
                        oporow["edt_dt"] = DateTime.Now.ToString();

                        oDS.Tables[0].Rows.Add(oporow);

                        //---------------------------------------------
                        //-------------- Consuming from stage
                        //---------------------------------------------
                        oporow = oDS.Tables[0].NewRow();

                        oporow["BRANCHCD"] = branchcd;
                        oporow["TYPE"] = type;
                        oporow["VCHNUM"] = vchnum;
                        oporow["VCHDATE"] = vchdate;

                        saved_doc_no = branchcd + type + vchnum + DateTime.Now.ToString("dd/MM/yyyy");

                        msg = "Data Saved : " + saved_doc_no;


                        oporow["ICODE"] = xmv_tfr_code.Trim();
                        oporow["IOPR"] = xmv_tfr_to;
                        oporow["ACODE"] = xmv_tfr_from;
                        oporow["STAGE"] = xmv_tfr_from;
                        oporow["INVNO"] = xmv_tfr_batch;
                        oporow["BTCHNO"] = xmv_tfr_batch;  // shivam updated this 
                        oporow["BINNO"] = xmv_tfr_code + xmv_tfr_batch; // shivam updated this

                        oporow["iqtyOUT"] = makeDouble(xmv_tfr_qty);
                        oporow["iqty_chl"] = makeDouble(xmv_tfr_qty);
                        oporow["iqtyIN"] = 0;
                        oporow["rec_iss"] = "C";
                        oporow["store"] = "W";

                        oporow["DESC_"] = xmv_tfr_rmk;
                        oporow["NARATION"] = "-";

                        if (team.col1 != "CHPL")
                        {
                            oporow["refnum"] = xmv_job_no;
                            oporow["refdate"] = DateTime.ParseExact(xmv_job_dt, "dd/MM/yyyy", null).ToString();

                        }
                        oporow["MORDER"] = i;


                        oporow["RCODE"] = "-";

                        oporow["ent_by"] = team.col3;
                        oporow["ent_dt"] = DateTime.Now.ToString();

                        oporow["edt_by"] = "-";
                        oporow["edt_dt"] = DateTime.Now.ToString();

                        oDS.Tables[0].Rows.Add(oporow);


                        #endregion



                    }

                }
                save_data(cocd, oDS, tabname);
            }
            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }



            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }

        //=================================================================
        public List<Team> aBasprod_ins(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";

            //------------------------

            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";

            string fldfevas = "", work_br = "";
            fldfevas = fn_seek_iname(team.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "fstr");
            work_br = "00";
            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
            }

            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 
            string saved_doc_no = "";
            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            int no_of_ent = 0;
            string xprd1 = "";
            string mydate = "";
            string mq1 = "", mq2 = "", mq3 = "";
            string yr_fld = "";
            string avail_Stk = "";
            int err_itm_cnt = 0;
            string err_itm_dtl = "";

            string stk_item = "", stk_avail = "", chk_Stk = "";
            string req_Dt = "";
            string mv_branch = "";
            string mv_type = "";


            string xmv_tfr_code = "-";
            string xmv_tfr_from = "-";
            string xmv_tfr_to = "-";
            string xmv_tfr_batch = "-";

            string xmv_tfr_qty = "-";
            string xmv_tfr_rmk = "-";

            List<Team> mylist = new List<Team>();
            string tabname = "IVOUCHER";

            //---------------------------------------------
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();


                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }

                mydate = DateTime.Now.ToString("dd/MM/yyyy");
                xprd1 = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + mydate + "','dd/mm/yyyy')";
                yr_fld = fn_seek_iname(team.col1, "", "Select to_char(to_date('" + frm_cDt1 + "','dd/mm/yyyy'),'yyyy') as fmdt from dual", "fmdt");

                for (int i = 0; i < qrlist.Length; i++)
                {

                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");

                    if (colsVal.Length <= 1)
                    {

                    }
                    else
                    {

                        //branchcd = colsVal[0].ToString().Trim();
                        //xmv_dep_icd = colsVal[4].ToString().Trim();
                        //xmv_dep_req = colsVal[5].ToString().Trim();

                        //mq1 = "select b.iname||'^'||(sum(a.opening)+sum(a.cdr)-sum(a.ccr)) as closing from (Select icode, yr_" + yr_fld + " as opening,0 as cdr,0 as ccr,0 as clos from itembal where BRANCHCD='" + branchcd + "' and icode='" + xmv_dep_icd + "' union all  ";
                        //mq2 = "select icode,0 as op,nvl(iqtyin,0) as cdr,nvl(iqtyout,0) as ccr,0 as clos from ivoucher where BRANCHCD='" + branchcd + "' and type like '%' and vchdate " + xprd1 + " and store='Y' and icode='" + xmv_dep_icd + "' ) a,ITEM B WHERE TRIM(A.ICODE)=TRIM(b.ICODE) group by b.iname ";
                        //chk_Stk = fn_seek_iname(team.col1, "", mq1 + mq2, "closing");

                        //if (chk_Stk.Trim() != "0")
                        //{
                        //    stk_item = chk_Stk.Split('^')[0];
                        //    stk_avail = chk_Stk.Split('^')[1];
                        //}

                        //if (makeDouble(stk_avail) < makeDouble(xmv_dep_req))
                        //{
                        //    msg = "NO STOCK";
                        //    err_itm_cnt = err_itm_cnt + 1;
                        //    err_itm_dtl = err_itm_dtl + "|" + stk_item.Trim() + "|" + stk_avail + "|";
                        //}

                    }

                }


            }

            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Please Check Stock";
            }
            //if (err_itm_cnt > 0)
            if (1 == 2)
            {

                try
                {
                    mylist.Add(new Team { col1 = msg, col2 = err_itm_dtl, col3 = "-", col4 = "-", col5 = "-", });
                }
                catch { }
                return mylist;
            }

            //--------------------------------------------
            msg = "Data Saved";
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();



                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }

                oDS = new DataSet();
                oporow = null;
                oDS = fill_schema(cocd, tabname);


                for (int i = 0; i < qrlist.Length; i++)
                {

                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");

                    if (colsVal.Length <= 1)
                    {

                    }
                    else
                    {
                        #region Fields Getting



                        branchcd = colsVal[0].ToString().Trim();
                        branchcd = work_br;

                        type = "15";

                        xmv_tfr_from = colsVal[2].ToString().Trim();
                        xmv_tfr_code = colsVal[3].ToString().Trim();
                        xmv_tfr_qty = colsVal[4].ToString().Trim();
                        xmv_tfr_batch = colsVal[5].ToString().Trim();

                        //xmv_tfr_to = colsVal[6].ToString().Trim();
                        //xmv_tfr_rmk = colsVal[7].ToString().Trim();

                        #endregion


                        #region Vnum Generation
                        if (no_of_ent == 0)
                        {
                            int p = 0;
                            string error = "Y";
                            do
                            {
                                vchdate = DateTime.Now.ToString("dd/MM/yyyy");
                                vchnum = next_no(team.col1, branchcd, "-", "select max(vchnum)+" + p + " as max from " + tabname + " where branchcd='" + branchcd + "' and type ='" + type + "' and vchdate " + xprdRange + " ", 6, "max");
                                error = fn_chk_pk(tabname + branchcd + type + vchnum + vchdate, team.col1, branchcd, type, vchnum, vchdate, acode, "WEBAPI").Trim();
                                if (p > 10)
                                { error = "N"; throw new Exception("Test Exception"); }
                                p++;
                            }
                            while (error.Equals("Y"));
                        }
                        no_of_ent = no_of_ent + 1;
                        #endregion

                        #region Saving to Oracle in 4 series




                        vchdate = fn_seek_iname(team.col1, branchcd, "select to_Date(to_char(sysdate,'dd/mm/yyyy'),'dd/mm/yyyy') as ldt from dual", "ldt");


                        //---------------------------------------------
                        //-------------- Saving into next stage
                        //---------------------------------------------
                        oporow = oDS.Tables[0].NewRow();

                        oporow["BRANCHCD"] = branchcd;
                        oporow["TYPE"] = type;
                        oporow["VCHNUM"] = vchnum;
                        oporow["VCHDATE"] = vchdate;

                        saved_doc_no = branchcd + type + vchnum + DateTime.Now.ToString("dd/MM/yyyy");

                        msg = "Data Saved : " + saved_doc_no;

                        oporow["IOPR"] = xmv_tfr_from;
                        oporow["ACODE"] = xmv_tfr_from;
                        oporow["STAGE"] = "-";

                        oporow["ICODE"] = xmv_tfr_code.Trim();
                        oporow["iqtyin"] = makeDouble(xmv_tfr_qty);
                        oporow["iqty_chl"] = makeDouble(xmv_tfr_qty);

                        oporow["INVNO"] = xmv_tfr_batch;

                        oporow["iqtyout"] = 0;
                        oporow["rec_iss"] = "D";
                        oporow["store"] = "Y";

                        oporow["DESC_"] = "Prodn Entry";
                        oporow["NARATION"] = "-";

                        oporow["refnum"] = "-";
                        oporow["refdate"] = vchdate;

                        oporow["MORDER"] = i;
                        oporow["srno"] = i;

                        oporow["RCODE"] = "-";

                        oporow["ent_by"] = team.col3;
                        oporow["ent_dt"] = DateTime.Now.ToString();

                        oporow["edt_by"] = "-";
                        oporow["edt_dt"] = DateTime.Now.ToString();

                        oDS.Tables[0].Rows.Add(oporow);




                        #endregion



                    }

                }
                save_data(cocd, oDS, tabname);
            }
            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }



            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }

        public List<Team> aSlead_ins(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";

            //------------------------

            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";
            string my_doc_no = "";
            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 


            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            string tabname = "WB_LEAD_LOG";



            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();


                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }

                oDS = new DataSet();
                oporow = null;
                oDS = fill_schema(cocd, tabname);


                //for (int i = 0; i < qrlist.Length; i++)
                {
                    int i = 0;
                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");
                    //for (int j = 0; j < colsVal.Length; j++)
                    //{


                    string xmv_lead_source = "";
                    string xmv_lead_probability = "";
                    string xmv_fg_sub_group = "";
                    string xmv_specific_interest = "";
                    string saved_doc_no = "";
                    string xmv_party_name = "";
                    string xmv_contact_level = "";
                    string xmv_contact_name = "";
                    string xmv_contact_no = "";

                    string xmv_email = "";
                    string xmv_fg_product = "";
                    string xmv_qty = "";
                    string xmv_approx_value = "";
                    string xmv_appointment_dt = "";

                    string xmv_industry = "";

                    string xmv_sales_man = "";
                    string xmv_estimator = "";

                    string xmv_country_name = "";

                    string xmv_state_name = "";
                    string xmv_city_name = "";
                    string xmv_client_remarks = "";
                    string xmv_our_remarks = "";

                    string xmv_acode = "";
                    string xmv_icode = "";

                    #region Fields Getting



                    //"LR"
                    branchcd = colsVal[0].ToString().Trim();
                    branchcd = "00";
                    //since lead is centralized , hard code done to save lead in 00 plant 

                    type = colsVal[1].ToString().Trim();

                    xmv_lead_source = colsVal[2].ToString().Trim();
                    xmv_lead_probability = colsVal[3].ToString().Trim();
                    xmv_fg_sub_group = colsVal[4].ToString().Trim();
                    xmv_specific_interest = colsVal[5].ToString().Trim();

                    xmv_party_name = colsVal[6].ToString().Trim();
                    xmv_contact_level = colsVal[7].ToString().Trim();
                    xmv_contact_name = colsVal[8].ToString().Trim();
                    xmv_contact_no = colsVal[9].ToString().Trim();

                    xmv_email = colsVal[10].ToString().Trim();
                    xmv_fg_product = colsVal[11].ToString().Trim();
                    xmv_qty = colsVal[12].ToString().Trim();
                    xmv_approx_value = colsVal[13].ToString().Trim();

                    xmv_appointment_dt = colsVal[14].ToString().Trim();

                    xmv_industry = colsVal[15].ToString().Trim();
                    xmv_sales_man = colsVal[16].ToString().Trim();
                    xmv_estimator = colsVal[17].ToString().Trim();

                    xmv_country_name = colsVal[18].ToString().Trim();
                    xmv_state_name = colsVal[19].ToString().Trim();
                    xmv_city_name = colsVal[20].ToString().Trim();
                    xmv_client_remarks = colsVal[21].ToString().Trim();
                    xmv_our_remarks = colsVal[22].ToString().Trim();

                    xmv_acode = colsVal[23].ToString().Trim();
                    xmv_icode = colsVal[24].ToString().Trim();


                    #endregion


                    #region Vnum Generation
                    if (i == 0)
                    {
                        int p = 0;
                        string error = "Y";
                        do
                        {
                            vchdate = DateTime.Now.ToString("dd/MM/yyyy");
                            vchnum = next_no(team.col1, branchcd, "-", "select max(lrcno)+" + p + " as max from " + tabname + " where branchcd='" + branchcd + "' and type ='" + type + "' and lrcdt " + xprdRange + " ", 6, "max");
                            error = fn_chk_pk(tabname + branchcd + type + vchnum + vchdate, team.col1, branchcd, type, vchnum, vchdate, acode, "WEBAPI").Trim();
                            if (p > 10)
                            { error = "N"; throw new Exception("Test Exception"); }
                            p++;
                        }
                        while (error.Equals("Y"));
                    }
                    #endregion

                    #region Saving to Oracle in 4 series
                    oporow = oDS.Tables[0].NewRow();

                    vchdate = fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE('" + vchdate + "','dd/mm/yyyy') as vchdate from dual", "vchdate");



                    oporow["BRANCHCD"] = branchcd;
                    oporow["TYPE"] = type;
                    oporow["lrcno"] = vchnum;
                    oporow["lrcdt"] = vchdate;

                    saved_doc_no = branchcd + type + vchnum + DateTime.Now.ToString("dd/MM/yyyy");

                    msg = "Data Saved : " + saved_doc_no;

                    oporow["LEAD_DSG"] = xmv_contact_level;

                    oporow["LVERTICAL"] = xmv_industry;


                    oporow["LDESCR"] = xmv_party_name;
                    oporow["PMGRP"] = xmv_acode; /// to change to party code
                    /// 

                    oporow["LGRADE"] = xmv_lead_probability;
                    oporow["LSUBJECT"] = xmv_specific_interest;
                    oporow["CONT_NAME"] = xmv_contact_name;
                    oporow["CONT_NO"] = xmv_contact_no;
                    oporow["CONT_EMAIL"] = xmv_email;
                    oporow["LREMARKS"] = xmv_client_remarks;
                    oporow["OREMARKS"] = xmv_our_remarks;

                    oporow["LEAD_MTG"] = "Y";
                    oporow["SRNO"] = 1;
                    oporow["ORIGNALBR"] = branchcd;
                    oporow["FILEPATH"] = "-";
                    oporow["FILENAME"] = "-";

                    oporow["LAST_ACTION"] = "-";
                    oporow["LAST_ACTDT"] = "-";

                    oporow["ENT_BY"] = team.col3;
                    oporow["ent_dt"] = DateTime.Now.ToString();

                    if (xmv_sales_man.Length <= 1)
                    {
                        oporow["REFFBY"] = team.col3;
                    }
                    else
                    {
                        oporow["REFFBY"] = xmv_sales_man;
                    }


                    oporow["EDT_BY"] = "-";
                    oporow["edt_dt"] = DateTime.Now.ToString();
                    oporow["APP_BY"] = "-";
                    oporow["APP_dt"] = DateTime.Now.ToString();


                    oporow["LEAD_CLOSE"] = "-";
                    oporow["LSRC"] = "-";
                    oporow["LDESC"] = "-";



                    oporow["ASSG"] = "-";
                    oporow["PENQNO"] = "-";
                    oporow["STAGE"] = "-";
                    oporow["EXPVAL"] = makeDouble(xmv_approx_value);
                    oporow["SDESC"] = "-";
                    oporow["PRIORITY"] = "-";

                    oporow["EXPCDT"] = "-";
                    oporow["LPROB"] = "-";

                    oporow["SDT"] = "-";
                    oporow["NDT"] = "-";
                    oporow["FCOST"] = 0;

                    oporow["FCURR"] = "-";
                    oporow["EXPCURR"] = "-";
                    oporow["REMINDER"] = "-";
                    oporow["AFOLLOW"] = xmv_appointment_dt;
                    oporow["PLEAD"] = "-";


                    oporow["PSGRP"] = "-";

                    oporow["QTY"] = makeDouble(xmv_qty);

                    oporow["QRATE"] = 0;
                    oporow["QCURR"] = "-";
                    oporow["UNIT"] = "-";

                    oporow["DESC_"] = "-";
                    oporow["PMODE"] = "-";
                    oporow["PTERM"] = "-";
                    oporow["REMARK"] = "-";

                    oporow["OVAL"] = 0;
                    oporow["OCURR"] = "-";
                    oporow["CRATE"] = 0;
                    oporow["CORATE"] = 0;
                    oporow["CAMT"] = 0;
                    oporow["COAMT"] = 0;
                    oporow["QVAL"] = 0;
                    oporow["LEAD_SRNO"] = "-";

                    oporow["CURR_STAT"] = "-";

                    oporow["LEAD_TYPE"] = "new/repeat";

                    oporow["LEAD_STATE"] = xmv_state_name;
                    oporow["LEAD_CNTRY"] = xmv_country_name;
                    oporow["LEAD_SOURCE"] = xmv_lead_source;

                    oporow["LEAD_PRIORIY"] = "-";
                    oporow["LEAD_CITY"] = xmv_city_name;

                    oporow["LMAIN_GRPCODE"] = "-";
                    oporow["LMAIN_GRPNAME"] = xmv_fg_sub_group;
                    oporow["LSUB_GRPCODE"] = xmv_icode;
                    oporow["LSUB_GRPNAME"] = xmv_fg_product;

                    oporow["ESTIMATOR"] = xmv_estimator;


                    oDS.Tables[0].Rows.Add(oporow);


                    vchdate = DateTime.Now.ToString("dd/MM/yyyy");
                    my_doc_no = branchcd + type + vchnum + vchdate;

                    #endregion



                }
                save_data(cocd, oDS, tabname);

            }
            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = my_doc_no, col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }
        //=================================================================
        public List<Team> afinudf_ins(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";

            //------------------------

            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";

            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 

            string key_fld = "";
            string udf_fld = "";
            string udf_data = "";

            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            string tabname = "udf_data";
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();


                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }

                oDS = new DataSet();
                oporow = null;
                oDS = fill_schema(cocd, tabname);


                for (int i = 0; i < qrlist.Length; i++)
                {

                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");

                    if (colsVal.Length <= 1)
                    {

                    }
                    else
                    {

                        key_fld = colsVal[0].ToString().Trim();
                        udf_fld = colsVal[1].ToString().Trim();
                        udf_data = colsVal[2].ToString().Trim();

                        oporow = oDS.Tables[0].NewRow();

                        oporow["BRANCHCD"] = key_fld.Substring(0, 2);
                        oporow["par_tbl"] = "WB_LEAD_LOG";

                        oporow["par_fld"] = key_fld;
                        oporow["udf_name"] = udf_fld;
                        oporow["udf_value"] = udf_data;

                        oporow["srno"] = i;


                        oDS.Tables[0].Rows.Add(oporow);


                    }

                }
                save_data(cocd, oDS, tabname);
            }
            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }
        //======================================================
        public List<Team> aSmexp_ins(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";

            //------------------------

            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";

            string fldfevas = "", work_br = "";
            fldfevas = fn_seek_iname(team.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "fstr");
            work_br = "00";
            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
            }

            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 
            string saved_doc_no = "";
            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            string tabname = "WB_SMV_EXP";
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();


                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }

                oDS = new DataSet();
                oporow = null;
                oDS = fill_schema(cocd, tabname);

                int no_of_ent = 0;
                for (int i = 0; i < qrlist.Length; i++)
                {

                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");

                    if (colsVal.Length <= 1)
                    {

                    }
                    else
                    {

                        string mv_branch = "";
                        string mv_type = "";
                        string xmv_sm_code = "-", xmv_exp_name = "", xmv_exp_amt = "-", xmv_exp_remark = "-";

                        #region Fields Getting



                        branchcd = colsVal[0].ToString().Trim();
                        branchcd = work_br;

                        type = colsVal[1].ToString().Trim();

                        //xmv_sm_code = colsVal[2].ToString().Trim();
                        xmv_exp_name = colsVal[2].ToString().Trim();
                        xmv_exp_amt = colsVal[3].ToString().Trim();
                        xmv_exp_remark = colsVal[4].ToString().Trim();




                        #endregion


                        #region Vnum Generation
                        if (no_of_ent == 0)
                        {
                            int p = 0;
                            string error = "Y";
                            do
                            {
                                vchdate = DateTime.Now.ToString("dd/MM/yyyy");
                                vchnum = next_no(team.col1, branchcd, "-", "select max(vchnum)+" + p + " as max from " + tabname + " where branchcd='" + branchcd + "' and type ='" + type + "' and vchdate " + xprdRange + " ", 6, "max");
                                error = fn_chk_pk(tabname + branchcd + type + vchnum + vchdate, team.col1, branchcd, type, vchnum, vchdate, acode, "WEBAPI").Trim();
                                if (p > 10)
                                { error = "N"; throw new Exception("Test Exception"); }
                                p++;
                            }
                            while (error.Equals("Y"));
                        }
                        no_of_ent = no_of_ent + 1;
                        #endregion

                        #region Saving to Oracle in 4 series
                        oporow = oDS.Tables[0].NewRow();

                        //vchdate = fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE('" + vchdate + "','dd/mm/yyyy') as vchdate from dual", "vchdate");

                        vchdate = fn_seek_iname(team.col1, branchcd, "select to_Date(to_char(sysdate,'dd/mm/yyyy'),'dd/mm/yyyy') as ldt from dual", "ldt");


                        oporow["BRANCHCD"] = branchcd;
                        oporow["TYPE"] = type;
                        oporow["VCHNUM"] = vchnum;
                        oporow["VCHDATE"] = vchdate;
                        saved_doc_no = branchcd + type + vchnum + DateTime.Now.ToString("dd/MM/yyyy");
                        msg = "Data Saved : " + saved_doc_no;

                        oporow["SM_CODE"] = team.col3;
                        oporow["EXP_Name"] = xmv_exp_name;
                        oporow["Exp_amt"] = xmv_exp_amt;
                        oporow["Exp_rmk"] = xmv_exp_remark;
                        //oporow["srno"] = i;

                        oporow["ent_by"] = team.col3;
                        oporow["ent_dt"] = DateTime.Now.ToString();

                        oporow["app_by"] = "-";
                        oporow["APP_dt"] = DateTime.Now.ToString();




                        oDS.Tables[0].Rows.Add(oporow);
                        #endregion



                    }

                }
                save_data(cocd, oDS, tabname);
            }
            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }
        //=================================================================
        public List<Team> aSmvisit_ins(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";

            //------------------------

            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";
            string fldfevas = "", work_br = "";
            fldfevas = fn_seek_iname(team.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "fstr");
            work_br = "00";
            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
            }

            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 
            string saved_doc_no = "";
            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            string tabname = "WB_SMV_REC";
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();


                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }

                oDS = new DataSet();
                oporow = null;
                oDS = fill_schema(cocd, tabname);


                //for (int i = 0; i < qrlist.Length; i++)
                {
                    int i = 0;
                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");
                    //for (int j = 0; j < colsVal.Length; j++)
                    //{

                    string mv_branch = "";
                    string mv_type = "";
                    string xmv_sm_code = "-", xmv_vis_lead = "", xmv_vis_person = "-", xmv_vis_remarks = "-", xmv_vis_stage = "-",
                    xmv_vis_locn = "";
                    string xmvchk_in_dtl = "";

                    #region Fields Getting



                    branchcd = colsVal[0].ToString().Trim();
                    branchcd = work_br;

                    type = colsVal[1].ToString().Trim();

                    xmv_sm_code = colsVal[2].ToString().Trim();
                    xmv_vis_lead = colsVal[3].ToString().Trim();
                    xmv_vis_person = colsVal[4].ToString().Trim();
                    xmv_vis_remarks = colsVal[5].ToString().Trim();
                    xmv_vis_stage = colsVal[6].ToString().Trim();
                    xmv_vis_locn = colsVal[7].ToString().Trim();
                    xmvchk_in_dtl = "-";
                    if (type == "CO")
                    {
                        xmvchk_in_dtl = colsVal[8].ToString().Trim();
                    }

                    #endregion


                    #region Vnum Generation
                    if (i == 0)
                    {
                        int p = 0;
                        string error = "Y";
                        do
                        {
                            vchdate = DateTime.Now.ToString("dd/MM/yyyy");
                            vchnum = next_no(team.col1, branchcd, "-", "select max(vchnum)+" + p + " as max from " + tabname + " where branchcd='" + branchcd + "' and type ='" + type + "' and vchdate " + xprdRange + " ", 6, "max");
                            error = fn_chk_pk(tabname + branchcd + type + vchnum + vchdate, team.col1, branchcd, type, vchnum, vchdate, acode, "WEBAPI").Trim();
                            if (p > 20)
                            { error = "N"; throw new Exception("Test Exception"); }
                            p++;
                        }
                        while (error.Equals("Y"));
                    }
                    #endregion

                    #region Saving to Oracle in 4 series
                    oporow = oDS.Tables[0].NewRow();

                    vchdate = fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE('" + vchdate + "','dd/mm/yyyy') as vchdate from dual", "vchdate");

                    oporow["BRANCHCD"] = branchcd;
                    oporow["TYPE"] = type;
                    oporow["VCHNUM"] = vchnum;
                    oporow["VCHDATE"] = vchdate;

                    saved_doc_no = branchcd + type + vchnum + DateTime.Now.ToString("dd/MM/yyyy");
                    msg = "Data Saved : " + saved_doc_no;

                    oporow["SM_CODE"] = team.col3;
                    oporow["VIS_LEAD"] = xmv_vis_lead;
                    oporow["VIS_PERSON"] = xmv_vis_person;
                    oporow["VIS_REMARKS"] = xmv_vis_remarks;
                    oporow["VIS_STAGE"] = xmv_vis_stage;
                    oporow["VIS_LOCN"] = xmv_vis_locn;
                    oporow["chk_in_dtl"] = xmvchk_in_dtl;

                    oporow["ent_by"] = team.col3;
                    oporow["ent_dt"] = DateTime.Now.ToString();

                    oporow["app_by"] = "-";
                    oporow["APP_dt"] = DateTime.Now.ToString();




                    oDS.Tables[0].Rows.Add(oporow);
                    #endregion



                }
                save_data(cocd, oDS, tabname);

            }
            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }
        //-----------------------------------------------------------------
        public List<Team> aEmpattn_ins(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";

            //------------------------

            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";

            string fldfevas = "", work_br = "";
            fldfevas = fn_seek_iname(team.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "fstr");

            work_br = "00";
            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
            }

            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 

            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;


            string tabname = "wb_EATTN_rec";
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();


                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }


                oDS = new DataSet();
                oporow = null;
                oDS = fill_schema(cocd, tabname);

                string saved_doc_no = "";
                //for (int i = 0; i < qrlist.Length; i++)
                {
                    int i = 0;
                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");
                    //for (int j = 0; j < colsVal.Length; j++)
                    //{

                    string mv_branch = "";
                    string mv_type = "";
                    string xmv_sm_code = "-", xmv_vis_lead = "", xmv_vis_person = "-", xmv_vis_remarks = "-", xmv_vis_stage = "-", xmv_vis_locn = "";
                    string xmvchk_in_dtl = "";
                    string mv_grade = "", mv_EMPCODE = "";

                    #region Fields Getting



                    branchcd = colsVal[0].ToString().Trim();
                    branchcd = work_br;

                    type = colsVal[1].ToString().Trim();

                    xmv_sm_code = colsVal[2].ToString().Trim();
                    xmv_vis_lead = colsVal[3].ToString().Trim();
                    xmv_vis_person = colsVal[4].ToString().Trim();
                    xmv_vis_remarks = colsVal[5].ToString().Trim();
                    xmv_vis_stage = colsVal[6].ToString().Trim();
                    xmv_vis_locn = colsVal[7].ToString().Trim();
                    xmvchk_in_dtl = "-";
                    if (type == "CO")
                    {
                        xmvchk_in_dtl = colsVal[8].ToString().Trim();
                    }

                    //mq = "Select grade||'^'||empcode as fstr from empmas where length(Trim(nvl(leaving_dt,'-')))<5 and replace(trim(mobile),'-','')='" + xmv_vis_person + "'";
                    //string emp_Str = fn_seek_iname(cocd, "", mq, "fstr");
                    //if (emp_Str.Trim() != "0")
                    //{
                    //    mv_grade = emp_Str.Split('^')[0];
                    //    mv_EMPCODE = emp_Str.Split('^')[1];
                    //}

                    #endregion


                    #region Vnum Generation
                    if (i == 0)
                    {
                        int p = 0;
                        string error = "Y";
                        do
                        {
                            vchdate = DateTime.Now.ToString("dd/MM/yyyy");
                            vchnum = next_no(team.col1, branchcd, "-", "select max(vchnum)+" + p + " as max from " + tabname + " where branchcd='" + branchcd + "' and type ='" + type + "' and vchdate " + xprdRange + " ", 6, "max");
                            error = fn_chk_pk(tabname + branchcd + type + vchnum + vchdate, team.col1, branchcd, type, vchnum, vchdate, acode, "WEBAPI").Trim();
                            if (p > 20)
                            { error = "N"; throw new Exception("Test Exception"); }
                            p++;
                        }
                        while (error.Equals("Y"));
                    }
                    #endregion

                    #region Saving to Oracle in 4 series
                    oporow = oDS.Tables[0].NewRow();

                    vchdate = fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE('" + vchdate + "','dd/mm/yyyy') as vchdate from dual", "vchdate");

                    oporow["BRANCHCD"] = branchcd;
                    oporow["TYPE"] = type;
                    oporow["VCHNUM"] = vchnum;
                    oporow["VCHDATE"] = vchdate;

                    saved_doc_no = branchcd + type + vchnum + DateTime.Now.ToString("dd/MM/yyyy");
                    if (type == "CI")
                    {
                        msg = "Incoming Attendance Saved : " + saved_doc_no;
                    }
                    else
                    {
                        msg = "Outgoing Attendance Saved : " + saved_doc_no;
                    }


                    oporow["EMP_ENT_PH"] = xmv_vis_person;

                    mq = "Select branchcd||grade||trim(empcode) as fstr from empmas where substr(trim(nvl(tfr_stat,'-')),1,8)<>'TRANSFER' and length(Trim(nvl(leaving_dt,'-')))<5 and replace(trim(mobile),'-','')='" + xmv_vis_person + "'";
                    string emp_Str = fn_seek_iname(team.col1, "", mq, "fstr");

                    oporow["EMP_CODE"] = emp_Str;

                    //oporow["EMP_CODE"] = mv_grade + mv_EMPCODE;

                    oporow["Emp_area"] = "-";
                    if (type == "CI")
                    {
                        oporow["Emp_area"] = xmv_vis_lead;
                    }

                    oporow["EMP_RMK"] = xmv_vis_remarks;

                    oporow["EMP_LOCN"] = xmv_vis_locn;
                    oporow["Emp_in_dtl"] = xmvchk_in_dtl;

                    oporow["ent_by"] = team.col3;
                    oporow["ent_dt"] = DateTime.Now.ToString();



                    oDS.Tables[0].Rows.Add(oporow);
                    #endregion



                }
                save_data(cocd, oDS, tabname);

            }
            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }


        //=================================================================
        public List<Team> aphystk_ins(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";

            //------------------------

            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";



            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 
            string Saved_Doc_No = "";
            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            execute_cmd1(cocd, "ALTER TABLE WB_PHY_REC ADD BOOKS_QTY number(10,2) DEFAULT 0");
            execute_cmd1(cocd, "ALTER TABLE WB_PHY_REC modify phy_locn varchar2(60) DEFAULT '-'");
            execute_cmd1(cocd, "ALTER TABLE WB_PHY_REC modify BATCH_NO varchar2(60) DEFAULT '-'");
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            string tabname = "WB_PHY_REC";
            string ICODE = "";

            string fldfevas = "", work_br = "";
            fldfevas = fn_seek_iname(team.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "fstr");
            work_br = "00";
            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
            }

            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();

                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }

                execute_cmd1(mycocd, "ALTER SESSION SET NLS_DATE_FORMAT = 'DD/MM/YYYY'");

                oDS = new DataSet();
                oporow = null;
                oDS = fill_schema(cocd, tabname);
                int no_of_ent = 0;
                for (int i = 0; i < qrlist.Length; i++)
                {

                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");

                    if (colsVal.Length <= 1)
                    {

                    }
                    else
                    {
                        string mv_branch = "";
                        string mv_type = "";
                        string PHY_LOCN = "";
                        ICODE = "";
                        string BATCH_NO = "";
                        string BATCH_QTY = "";
                        string BOOK_QTY = "";


                        #region Fields Getting



                        branchcd = colsVal[0].ToString().Trim();
                        branchcd = work_br;

                        type = colsVal[1].ToString().Trim();

                        PHY_LOCN = colsVal[2].ToString().Trim();
                        ICODE = colsVal[3].ToString().Trim();
                        BATCH_NO = colsVal[4].ToString().Trim();

                        BATCH_QTY = colsVal[5].ToString().Trim();
                        BOOK_QTY = colsVal[6].ToString().Trim();


                        #endregion


                        #region Vnum Generation
                        if (no_of_ent == 0)
                        {
                            int p = 0;
                            string error = "Y";
                            do
                            {
                                vchdate = DateTime.Now.ToString("dd/MM/yyyy");
                                vchnum = next_no(team.col1, branchcd, "-", "select max(vchnum)+" + p + " as max from " + tabname + " where branchcd='" + branchcd + "' and type ='" + type + "' and vchdate " + xprdRange + " ", 6, "max");
                                error = fn_chk_pk(tabname + branchcd + type + vchnum + vchdate, team.col1, branchcd, type, vchnum, vchdate, acode, "WEBAPI").Trim();
                                if (p > 10)
                                { error = "N"; throw new Exception("Test Exception"); }
                                p++;
                            }
                            while (error.Equals("Y"));
                        }
                        no_of_ent = no_of_ent + 1;
                        #endregion

                        #region Saving to Oracle in 4 series
                        oporow = oDS.Tables[0].NewRow();


                        vchdate = fn_seek_iname(team.col1, branchcd, "select to_Date(to_char(sysdate,'dd/mm/yyyy'),'dd/mm/yyyy') as ldt from dual", "ldt");


                        oporow["BRANCHCD"] = branchcd;
                        oporow["TYPE"] = type;
                        oporow["VCHNUM"] = vchnum;
                        oporow["VCHDATE"] = vchdate;

                        Saved_Doc_No = branchcd + type + vchnum + vchdate.ToString().Substring(0, 10);

                        oporow["PHY_LOCN"] = PHY_LOCN;
                        oporow["ICODE"] = ICODE.Trim();
                        oporow["BATCH_NO"] = BATCH_NO;

                        oporow["BOOKS_QTY"] = makeDouble(BOOK_QTY);
                        oporow["BATCH_QTY"] = makeDouble(BATCH_QTY);


                        oporow["ent_by"] = team.col3;

                        oporow["ent_dt"] = DateTime.Now.ToString();

                        oDS.Tables[0].Rows.Add(oporow);
                        #endregion

                    }

                }
                save_data(cocd, oDS, tabname);
                //                execute_cmd1(team.col1, "update WB_PHY_REC set ent_Dt=sysdate where branchcd||type||vchnum||to_char(Vchdate,'dd/mm/yyyy')='"+ Saved_Doc_No +"'");


            }
            catch (Exception e)
            {
                msg = e.Message.ToString() + "  :   " + ICODE.Trim() + " --> " + "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg + " " + Saved_Doc_No, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;


        }

        //=================================================================
        public List<Team> asset_ver_ins(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";

            //------------------------

            string fldfevas = "", work_br = "";
            fldfevas = fn_seek_iname(team.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "fstr");
            work_br = "00";
            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
            }

            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";

            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 

            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            string tabname = "WB_ASSET_VER";
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();


                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }

                oDS = new DataSet();
                oporow = null;
                oDS = fill_schema(cocd, tabname);

                int no_of_ent = 0;
                for (int i = 0; i < qrlist.Length; i++)
                {

                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");

                    if (colsVal.Length <= 1)
                    {

                    }
                    else
                    {

                        string mv_branch = "";
                        string mv_type = "";

                        string ast_locn = "";
                        string ast_code = "";
                        string ast_qty = "";
                        string ast_cond = "";
                        string ast_rmk = "";

                        #region Fields Getting



                        branchcd = colsVal[0].ToString().Trim();
                        branchcd = work_br;

                        type = colsVal[1].ToString().Trim();

                        ast_locn = colsVal[2].ToString().Trim();
                        ast_code = colsVal[3].ToString().Trim();
                        ast_qty = colsVal[4].ToString().Trim();
                        ast_cond = colsVal[5].ToString().Trim();
                        ast_rmk = colsVal[6].ToString().Trim();



                        #endregion


                        #region Vnum Generation
                        if (no_of_ent == 0)
                        {
                            int p = 0;
                            string error = "Y";
                            do
                            {
                                vchdate = DateTime.Now.ToString("dd/MM/yyyy");
                                vchnum = next_no(team.col1, branchcd, "-", "select max(vchnum)+" + p + " as max from " + tabname + " where branchcd='" + branchcd + "' and type ='" + type + "' and vchdate " + xprdRange + " ", 6, "max");
                                error = fn_chk_pk(tabname + branchcd + type + vchnum + vchdate, team.col1, branchcd, type, vchnum, vchdate, acode, "WEBAPI").Trim();
                                if (p > 10)
                                { error = "N"; throw new Exception("Test Exception"); }
                                p++;
                            }
                            while (error.Equals("Y"));
                        }
                        no_of_ent = no_of_ent + 1;
                        #endregion

                        #region Saving to Oracle in 4 series
                        oporow = oDS.Tables[0].NewRow();


                        vchdate = fn_seek_iname(team.col1, branchcd, "select to_Date(to_char(sysdate,'dd/mm/yyyy'),'dd/mm/yyyy') as ldt from dual", "ldt");


                        oporow["BRANCHCD"] = branchcd;
                        oporow["TYPE"] = type;
                        oporow["VCHNUM"] = vchnum;
                        oporow["VCHDATE"] = vchdate;



                        oporow["Asset_locn"] = ast_locn;
                        oporow["Asset_Code"] = ast_code;
                        oporow["Asset_Qty"] = makeDouble(ast_qty);
                        oporow["Asset_cond"] = ast_cond;
                        oporow["Remarks"] = ast_rmk;

                        oporow["ent_by"] = team.col3;
                        oporow["ent_dt"] = DateTime.Now.ToString();



                        oDS.Tables[0].Rows.Add(oporow);
                        #endregion



                    }

                }
                save_data(cocd, oDS, tabname);
            }
            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;


        }

        //====================================================================================================================================

        public List<Team> aAdvance_ins(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";

            //------------------------

            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";



            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 

            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;

            string fldfevas = "", work_br = "", sman_id = "";
            fldfevas = fn_seek_iname(cocd, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "fstr");
            work_br = "00";
            sman_id = "--";
            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
            }
            string saved_doc_no = "";
            string mhd = "";
            mhd = check_filed_name(cocd, "PAYADV", "REQ_AMT");
            if (mhd == "0") execute_cmd1(cocd, "ALTER TABLE PAYADV ADD REQ_AMT number(10,2) DEFAULT 0");


            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            string tabname = "PAYADV";
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();


                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }


                oDS = new DataSet();
                oporow = null;
                oDS = fill_schema(cocd, tabname);


                //for (int i = 0; i < qrlist.Length; i++)
                {
                    int i = 0;
                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");
                    //for (int j = 0; j < colsVal.Length; j++)
                    //{

                    string mv_branch = "";
                    string mv_type = "";
                    string mv_EMPCODE = "";
                    string mv_deptt = "";
                    string mv_grade = "";
                    string mv_dr_amt = "";
                    string mv_cr_amt = "";
                    string mv_inst_amt = "";
                    string mv_LRemarks = "";
                    string mv_cur_salary = "";

                    #region Fields Getting



                    branchcd = colsVal[0].ToString().Trim();
                    branchcd = work_br;

                    type = colsVal[1].ToString().Trim();
                    type = "01";

                    mv_EMPCODE = colsVal[2].ToString().Trim();
                    mv_deptt = colsVal[3].ToString().Trim();
                    mv_grade = colsVal[4].ToString().Trim();
                    mv_dr_amt = colsVal[5].ToString().Trim();
                    mv_cr_amt = colsVal[6].ToString().Trim();
                    mv_inst_amt = colsVal[7].ToString().Trim();
                    mv_LRemarks = colsVal[8].ToString().Trim();

                    mq = "Select empcode||'^'||deptt_text||'^'||grade||'^'||to_chaR(nvl(er1,0)+nvl(er2,0)+nvl(er3,0)+nvl(er4,0)+nvl(er5,0)+nvl(er6,0)+nvl(er7,0)+nvl(er8,0)+nvl(er9,0)+nvl(er10,0),'99999999.99') as fstr from empmas where length(Trim(nvl(leaving_dt,'-')))<5 and replace(trim(mobile),'-','')='" + mv_EMPCODE + "'";
                    string emp_Str = fn_seek_iname(cocd, "", mq, "fstr");
                    if (emp_Str.Trim() != "0")
                    {
                        mv_EMPCODE = emp_Str.Split('^')[0];
                        mv_deptt = emp_Str.Split('^')[1];
                        mv_grade = emp_Str.Split('^')[2];
                        mv_cur_salary = emp_Str.Split('^')[3];
                    }

                    #endregion


                    #region Vnum Generation
                    if (i == 0)
                    {
                        int p = 0;
                        string error = "Y";
                        do
                        {
                            vchdate = DateTime.Now.ToString("dd/MM/yyyy");
                            vchnum = next_no(team.col1, branchcd, "-", "select max(vchnum)+" + p + " as max from " + tabname + " where branchcd='" + branchcd + "' and type ='" + "01" + "'  ", 6, "max");
                            error = fn_chk_pk(tabname + branchcd + type + vchnum + vchdate, team.col1, branchcd, type, vchnum, vchdate, acode, "WEBAPI").Trim();
                            if (p > 10)
                            { error = "N"; throw new Exception("Test Exception"); }
                            p++;
                        }
                        while (error.Equals("Y"));
                    }
                    #endregion

                    #region Saving to Oracle in 4 series
                    oporow = oDS.Tables[0].NewRow();

                    vchdate = fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE('" + vchdate + "','dd/mm/yyyy') as vchdate from dual", "vchdate");


                    oporow["BRANCHCD"] = branchcd;
                    oporow["TYPE"] = type;
                    oporow["VCHNUM"] = vchnum;
                    oporow["VCHDATE"] = vchdate;
                    oporow["EMPCODE"] = mv_EMPCODE;

                    saved_doc_no = branchcd + type + vchnum + DateTime.Now.ToString("dd/MM/yyyy"); ;
                    msg = "Advance Request Saved : " + saved_doc_no;

                    oporow["DEPTT"] = mv_deptt.Trim();
                    oporow["GRADE"] = mv_grade.Trim();

                    oporow["DRAMT"] = 0;
                    oporow["REQ_AMT"] = makeDouble(mv_dr_amt);
                    oporow["CURRSAL"] = makeDouble(mv_cur_salary);
                    oporow["INSTAMT"] = makeDouble(mv_inst_amt);
                    oporow["REMARK"] = mv_LRemarks;


                    oporow["app_by"] = "-";
                    oporow["APP_dt"] = DateTime.Now.ToString();


                    oporow["CRAMT"] = 0;
                    oporow["ent_by"] = team.col3;
                    oporow["ent_dt"] = DateTime.Now.ToString();

                    oporow["edt_by"] = "-";
                    oporow["edt_dt"] = DateTime.Now.ToString();


                    oDS.Tables[0].Rows.Add(oporow);
                    #endregion



                }
                save_data(cocd, oDS, tabname);

            }
            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }
        //==================================================================
        public List<Team> aLoan_ins(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";

            //------------------------

            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";

            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 
            string saved_doc_no = "";
            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;

            string fldfevas = "", work_br = "";
            fldfevas = fn_seek_iname(cocd, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "fstr");
            work_br = "00";
            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
            }

            string mhd = "";
            mhd = check_filed_name(cocd, "PAYLOAN", "REQ_AMT");
            if (mhd == "0") execute_cmd1(cocd, "ALTER TABLE PAYLOAN ADD REQ_AMT number(10,2) DEFAULT 0");

            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            string tabname = "PAYLOAN";
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();


                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }

                oDS = new DataSet();
                oporow = null;
                oDS = fill_schema(cocd, tabname);


                //for (int i = 0; i < qrlist.Length; i++)
                {
                    int i = 0;
                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");
                    //for (int j = 0; j < colsVal.Length; j++)
                    //{

                    string mv_branch = "";
                    string mv_type = "";
                    string mv_EMPCODE = "";
                    string mv_deptt = "";
                    string mv_grade = "";
                    string mv_dr_amt = "";
                    string mv_cr_amt = "";
                    string mv_inst_amt = "";
                    string mv_inst_st_dt = "";
                    string mv_cur_loan = "";
                    string mv_os_amt = "";
                    string mv_LRemarks = "";
                    string mv_cur_salary = "";

                    #region Fields Getting



                    branchcd = colsVal[0].ToString().Trim();
                    branchcd = work_br;

                    type = colsVal[1].ToString().Trim();
                    type = "01";

                    mv_EMPCODE = colsVal[2].ToString().Trim();
                    mv_deptt = colsVal[3].ToString().Trim();
                    mv_grade = colsVal[4].ToString().Trim();
                    mv_dr_amt = colsVal[5].ToString().Trim();
                    mv_cr_amt = colsVal[6].ToString().Trim();
                    mv_inst_amt = colsVal[7].ToString().Trim();
                    mv_inst_st_dt = colsVal[8].ToString().Trim();
                    mv_cur_loan = colsVal[9].ToString().Trim();
                    mv_os_amt = colsVal[10].ToString().Trim();
                    mv_LRemarks = colsVal[11].ToString().Trim();
                    mv_cur_salary = colsVal[12].ToString().Trim();

                    mq = "Select empcode||'^'||deptt_text||'^'||grade||'^'||to_chaR(nvl(er1,0)+nvl(er2,0)+nvl(er3,0)+nvl(er4,0)+nvl(er5,0)+nvl(er6,0)+nvl(er7,0)+nvl(er8,0)+nvl(er9,0)+nvl(er10,0),'99999999.99') as fstr from empmas where length(Trim(nvl(leaving_dt,'-')))<5 and replace(trim(mobile),'-','')='" + mv_EMPCODE + "'";
                    string emp_Str = fn_seek_iname(cocd, "", mq, "fstr");
                    if (emp_Str.Trim() != "0")
                    {
                        mv_EMPCODE = emp_Str.Split('^')[0];
                        mv_deptt = emp_Str.Split('^')[1];
                        mv_grade = emp_Str.Split('^')[2];
                        mv_cur_salary = emp_Str.Split('^')[3];
                    }

                    #endregion


                    #region Vnum Generation
                    if (i == 0)
                    {
                        int p = 0;
                        string error = "Y";
                        do
                        {
                            vchdate = DateTime.Now.ToString("dd/MM/yyyy");
                            vchnum = next_no(team.col1, branchcd, "-", "select max(vchnum)+" + p + " as max from " + tabname + " where branchcd='" + branchcd + "' and type ='" + type + "' and vchdate " + xprdRange + " ", 6, "max");
                            error = fn_chk_pk(tabname + branchcd + type + vchnum + vchdate, team.col1, branchcd, type, vchnum, vchdate, acode, "WEBAPI").Trim();
                            if (p > 10)
                            { error = "N"; throw new Exception("Test Exception"); }
                            p++;
                        }
                        while (error.Equals("Y"));
                    }
                    #endregion

                    #region Saving to Oracle in 4 series
                    oporow = oDS.Tables[0].NewRow();
                    string my_instdt = "";
                    vchdate = fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE('" + vchdate + "','dd/mm/yyyy') as vchdate from dual", "vchdate");
                    my_instdt = fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE('" + mv_inst_st_dt + "','dd/mm/yyyy') as vchdate from dual", "vchdate");

                    oporow["BRANCHCD"] = branchcd;
                    oporow["TYPE"] = type;
                    oporow["VCHNUM"] = vchnum;
                    oporow["VCHDATE"] = vchdate;

                    saved_doc_no = branchcd + type + vchnum + DateTime.Now.ToString("dd/MM/yyyy"); ;
                    msg = "Loan Request Saved : " + saved_doc_no;

                    oporow["EMPCODE"] = mv_EMPCODE;
                    oporow["DEPTT"] = mv_deptt.Trim();
                    oporow["GRADE"] = mv_grade.Trim();
                    oporow["DRAMT"] = 0;
                    oporow["REQ_AMT"] = makeDouble(mv_dr_amt);
                    oporow["CRAMT"] = makeDouble(mv_cr_amt);
                    oporow["INSTAMT"] = makeDouble(mv_inst_amt);
                    oporow["INST_ST_DT"] = my_instdt;
                    oporow["CUR_LOAN"] = makeDouble(mv_cur_loan);
                    oporow["OS_AMT"] = makeDouble(mv_os_amt);
                    oporow["REMARK"] = mv_LRemarks;
                    oporow["CURRSAL"] = makeDouble(mv_cur_salary);

                    oporow["app_by"] = "-";
                    oporow["APP_dt"] = DateTime.Now.ToString();



                    oporow["ent_by"] = team.col3;
                    oporow["ent_dt"] = DateTime.Now.ToString();

                    oporow["edt_by"] = "-";
                    oporow["edt_dt"] = DateTime.Now.ToString();


                    oDS.Tables[0].Rows.Add(oporow);
                    #endregion



                }
                save_data(cocd, oDS, tabname);

            }
            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }
        //==================================================================
        public List<Team> aLeave_ins(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";

            //------------------------

            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";

            execute_cmd1(team.col1, "ALTER TABLE WB_LEVREQ ADD EMP_ENT_PH varchar2(15) DEFAULT '-'");

            string fldfevas = "", work_br = "", sman_id = "";
            fldfevas = fn_seek_iname(team.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "fstr");

            work_br = "00";
            sman_id = "--";

            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
            }

            string saved_doc_no = "";
            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 

            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;

            string tabname = "WB_LEVREQ";
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();


                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }

                oDS = new DataSet();
                oporow = null;
                oDS = fill_schema(cocd, tabname);


                //for (int i = 0; i < qrlist.Length; i++)
                {
                    int i = 0;
                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");
                    //for (int j = 0; j < colsVal.Length; j++)
                    //{

                    string mv_EMPCODE = "";
                    string mv_Lreason1 = "";
                    string mv_levfrom = "";
                    string mv_levupto = "";
                    string mv_CONT_NAME = "";
                    string mv_CONT_NO = "";
                    string mv_LRemarks = "";
                    string mv_LV_TIME = "";
                    string mv_RET_TIME = "";
                    string mv_TOT_DAYS = "";
                    string mv_TIME_IN_HRS = "";
                    string mv_LVSection = "";
                    string mv_DesFrom = "";
                    string mv_DesTo = "";
                    string mv_LvServYrNo = "";
                    string mv_TicketNo = "";
                    string mv_Airlinename = "";
                    string mv_LvAddress = "";

                    string mv_ExitReEntryEmp = "";
                    string mv_chkvisafam = "";
                    string mv_ExitReEntryfam = "";


                    #region Fields Getting



                    branchcd = colsVal[0].ToString().Trim();
                    branchcd = work_br;

                    type = colsVal[1].ToString().Trim();




                    mv_EMPCODE = colsVal[2].ToString().Trim();
                    mv_Lreason1 = colsVal[3].ToString().Trim();
                    mv_levfrom = colsVal[4].ToString().Trim();
                    mv_levupto = colsVal[5].ToString().Trim();
                    mv_CONT_NAME = colsVal[6].ToString().Trim();
                    mv_CONT_NO = colsVal[7].ToString().Trim();
                    mv_LRemarks = colsVal[8].ToString().Trim();
                    mv_LV_TIME = colsVal[9].ToString().Trim();
                    mv_RET_TIME = colsVal[10].ToString().Trim();
                    mv_TOT_DAYS = colsVal[11].ToString().Trim();
                    mv_TIME_IN_HRS = colsVal[12].ToString().Trim();
                    mv_LVSection = colsVal[13].ToString().Trim();
                    mv_DesFrom = colsVal[14].ToString().Trim();
                    mv_DesTo = colsVal[15].ToString().Trim();
                    mv_LvServYrNo = colsVal[16].ToString().Trim();
                    mv_TicketNo = colsVal[17].ToString().Trim();
                    mv_Airlinename = colsVal[18].ToString().Trim();
                    mv_LvAddress = colsVal[19].ToString().Trim();

                    mv_ExitReEntryEmp = colsVal[20].ToString().Trim();
                    mv_chkvisafam = colsVal[21].ToString().Trim();
                    mv_ExitReEntryfam = colsVal[22].ToString().Trim();


                    #endregion


                    #region Vnum Generation
                    if (i == 0)
                    {
                        int p = 0;
                        string error = "Y";
                        do
                        {
                            vchdate = DateTime.Now.ToString("dd/MM/yyyy");
                            vchnum = next_no(team.col1, branchcd, "-", "select max(LRQNO)+" + p + " as max from " + tabname + " where branchcd='" + branchcd + "' and type ='" + type + "' and LRQDT " + xprdRange + " ", 6, "max");
                            error = fn_chk_pk(tabname + branchcd + type + vchnum + vchdate, team.col1, branchcd, type, vchnum, vchdate, acode, "WEBAPI").Trim();
                            if (p > 10)
                            { error = "N"; throw new Exception("Test Exception"); }
                            p++;
                        }
                        while (error.Equals("Y"));
                    }
                    #endregion

                    #region Saving to Oracle in 4 series
                    oporow = oDS.Tables[0].NewRow();

                    vchdate = fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE('" + vchdate + "','dd/mm/yyyy') as vchdate from dual", "vchdate");

                    oporow["BRANCHCD"] = branchcd;
                    oporow["ORIGNALBR"] = branchcd;
                    oporow["SRNO"] = i;
                    oporow["TYPE"] = type;



                    oporow["LRQNO"] = vchnum; ;
                    oporow["LRQDT"] = vchdate;

                    saved_doc_no = branchcd + type + vchnum + DateTime.Now.ToString("dd/MM/yyyy"); ;
                    msg = "Leave Request Saved : " + saved_doc_no;

                    oporow["EMP_ENT_PH"] = mv_EMPCODE;

                    mq = "Select branchcd||grade||trim(empcode) as fstr from empmas where substr(trim(nvl(tfr_stat,'-')),1,8)<>'TRANSFER' and length(Trim(nvl(leaving_dt,'-')))<5 and replace(trim(mobile),'-','')='" + mv_EMPCODE + "'";
                    string emp_Str = fn_seek_iname(team.col1, "", mq, "fstr");

                    oporow["EMPCODE"] = emp_Str;

                    oporow["Lreason1"] = mv_Lreason1;
                    oporow["levfrom"] = mv_levfrom;
                    oporow["levupto"] = mv_levupto;
                    oporow["CONT_NAME"] = mv_CONT_NAME;
                    oporow["CONT_NO"] = mv_CONT_NO;
                    oporow["LRemarks"] = mv_LRemarks;
                    oporow["LV_TIME"] = mv_LV_TIME;
                    oporow["RET_TIME"] = mv_RET_TIME;
                    oporow["TOT_DAYS"] = mv_TOT_DAYS;
                    oporow["TIME_IN_HRS"] = mv_TIME_IN_HRS;
                    oporow["LVSection"] = mv_LVSection;
                    oporow["DesFrom"] = mv_DesFrom;
                    oporow["DesTo"] = mv_DesTo;
                    oporow["LvServYrNo"] = mv_LvServYrNo;
                    oporow["TicketNo"] = mv_TicketNo;
                    oporow["Airlinename"] = mv_Airlinename;
                    oporow["LvAddress"] = mv_LvAddress;

                    oporow["ExitReEntryEmp"] = mv_ExitReEntryEmp;
                    //oporow["chkvisafam"] = mv_chkvisafam;
                    oporow["ExitReEntryfam"] = mv_ExitReEntryfam;


                    oporow["Lreason2"] = "-";
                    oporow["cont_email"] = "-";
                    oporow["OREMARKS"] = "-"; // FOR SAVING REJECTION REMARKS AT THE TIME OF APPROVAL
                    oporow["RESP_SHARED"] = "-";
                    oporow["LAST_ACTION"] = "-";
                    oporow["LAST_ACTDT"] = "-";


                    oporow["app_by"] = "-";
                    oporow["APP_dt"] = DateTime.Now.ToString();



                    oporow["ent_by"] = team.col3;
                    oporow["ent_dt"] = DateTime.Now.ToString();

                    oporow["edt_by"] = "-";
                    oporow["edt_dt"] = DateTime.Now.ToString();


                    oDS.Tables[0].Rows.Add(oporow);
                    #endregion



                }
                save_data(cocd, oDS, tabname);

            }
            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }

        //==================================================================

        public List<Team> apowcon_ins(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";

            //------------------------

            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";
            string fldfevas = "", work_br = "";
            fldfevas = fn_seek_iname(team.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "fstr");
            work_br = "00";
            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
            }

            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 

            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            string tabname = "WB_PWR_REC";
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();


                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }

                oDS = new DataSet();
                oporow = null;


                oDS = fill_schema(cocd, tabname);


                //for (int i = 0; i < qrlist.Length; i++)
                {
                    int i = 0;
                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");
                    //for (int j = 0; j < colsVal.Length; j++)
                    //{

                    string mv_branch = "";
                    string mv_type = "";
                    string mv_mchcode = "";
                    string mv_mtr_beg = "";
                    string mv_mtr_end = "";
                    string mv_mtr_rmk = "";

                    #region Fields Getting



                    branchcd = colsVal[0].ToString().Trim();
                    branchcd = work_br;

                    type = colsVal[1].ToString().Trim();


                    mv_mchcode = colsVal[2].ToString().Trim();
                    mv_mtr_beg = colsVal[3].ToString().Trim();
                    mv_mtr_end = colsVal[4].ToString().Trim();
                    mv_mtr_rmk = colsVal[5].ToString().Trim();


                    #endregion


                    #region Vnum Generation
                    if (i == 0)
                    {
                        int p = 0;
                        string error = "Y";
                        do
                        {
                            vchdate = DateTime.Now.ToString("dd/MM/yyyy");
                            vchnum = next_no(team.col1, branchcd, "-", "select max(vchnum)+" + p + " as max from " + tabname + " where branchcd='" + branchcd + "' and type ='" + type + "' and vchdate " + xprdRange + " ", 6, "max");
                            error = fn_chk_pk(tabname + branchcd + type + vchnum + vchdate, team.col1, branchcd, type, vchnum, vchdate, acode, "WEBAPI").Trim();
                            if (p > 10)
                            { error = "N"; throw new Exception("Test Exception"); }
                            p++;
                        }
                        while (error.Equals("Y"));
                    }
                    #endregion

                    #region Saving to Oracle in 4 series
                    oporow = oDS.Tables[0].NewRow();

                    string my_instdt = "";
                    vchdate = fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE('" + vchdate + "','dd/mm/yyyy') as vchdate from dual", "vchdate");


                    oporow["BRANCHCD"] = branchcd;
                    oporow["TYPE"] = type;
                    oporow["VCHNUM"] = vchnum;
                    oporow["VCHDATE"] = vchdate;

                    oporow["mch_code"] = mv_mchcode;
                    oporow["mtr_start"] = mv_mtr_beg;
                    oporow["mtr_stop"] = mv_mtr_end;
                    oporow["remarks"] = mv_mtr_rmk;
                    oporow["pwr_rate"] = 10;


                    oporow["ent_by"] = team.col3;
                    oporow["ent_dt"] = DateTime.Now.ToString();


                    oDS.Tables[0].Rows.Add(oporow);
                    #endregion



                }
                save_data(cocd, oDS, tabname);

            }
            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }
        //==================================================================
        public List<Team> aprodmw_ins(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";

            //------------------------

            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";

            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 

            string fldfevas = "", work_br = "";
            fldfevas = fn_seek_iname(team.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "fstr");

            work_br = "00";
            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
            }

            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            string tabname = "WB_PROD_REC";
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();

                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }

                oDS = new DataSet();
                oporow = null;


                oDS = fill_schema(cocd, tabname);


                //for (int i = 0; i < qrlist.Length; i++)
                {
                    int i = 0;
                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");
                    //for (int j = 0; j < colsVal.Length; j++)
                    //{

                    string mv_branch = "";
                    string mv_type = "";
                    string mv_mchcode = "";
                    string mv_bomcode = "";
                    string mv_pchcode = "";
                    string mv_itmcode = "";
                    string mv_proc_dtl = "";
                    string mv_wrk_rmk = "";

                    #region Fields Getting



                    branchcd = work_br;
                    type = colsVal[1].ToString().Trim();

                    mv_mchcode = colsVal[2].ToString().Trim();
                    mv_bomcode = colsVal[3].ToString().Trim();
                    mv_pchcode = colsVal[4].ToString().Trim();

                    mv_itmcode = colsVal[5].ToString().Trim();
                    mv_proc_dtl = colsVal[6].ToString().Trim();
                    mv_wrk_rmk = colsVal[7].ToString().Trim();


                    #endregion


                    #region Vnum Generation
                    if (i == 0)
                    {
                        int p = 0;
                        string error = "Y";
                        do
                        {
                            vchdate = DateTime.Now.ToString("dd/MM/yyyy");
                            vchnum = next_no(team.col1, branchcd, "-", "select max(vchnum)+" + p + " as max from " + tabname + " where branchcd='" + branchcd + "' and type ='" + type + "' and vchdate " + xprdRange + " ", 6, "max");
                            error = fn_chk_pk(tabname + branchcd + type + vchnum + vchdate, team.col1, branchcd, type, vchnum, vchdate, acode, "WEBAPI").Trim();
                            if (p > 10)
                            { error = "N"; throw new Exception("Test Exception"); }
                            p++;
                        }
                        while (error.Equals("Y"));
                    }
                    #endregion

                    #region Saving to Oracle in 4 series
                    oporow = oDS.Tables[0].NewRow();

                    string my_instdt = "";
                    vchdate = fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE('" + vchdate + "','dd/mm/yyyy') as vchdate from dual", "vchdate");


                    oporow["BRANCHCD"] = branchcd;
                    oporow["TYPE"] = type;
                    oporow["VCHNUM"] = vchnum;
                    oporow["VCHDATE"] = vchdate;

                    msg = "Entry Saved : " + branchcd + type + vchnum + DateTime.Now.ToString("dd/MM/yyyy");

                    oporow["mchcode"] = mv_mchcode;
                    oporow["bomcode"] = mv_bomcode;
                    oporow["pchcode"] = mv_pchcode;
                    oporow["icode"] = mv_itmcode;
                    oporow["proc_dtl"] = mv_proc_dtl;

                    oporow["prd_Qty"] = 1;
                    oporow["prd_remark"] = mv_wrk_rmk;

                    oporow["ent_by"] = team.col3;
                    oporow["ent_dt"] = DateTime.Now.ToString();


                    oDS.Tables[0].Rows.Add(oporow);
                    #endregion



                }
                save_data(cocd, oDS, tabname);

            }
            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }
        //==================================================================

        public List<Team> aCure_ins(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";

            //------------------------

            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";
            string fldfevas = "", work_br = "";
            fldfevas = fn_seek_iname(team.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "fstr");
            work_br = "00";
            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
            }

            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 

            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            string tabname = "WB_BSCAN_REC";
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();


                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }

                oDS = new DataSet();
                oporow = null;
                oDS = fill_schema(cocd, tabname);

                int no_of_ent = 0;
                for (int i = 0; i < qrlist.Length; i++)
                {

                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");

                    if (colsVal.Length <= 1)
                    {

                    }
                    else
                    {

                        string req_Dt = "";
                        string mv_branch = "";
                        string mv_type = "";


                        #region Fields Getting



                        branchcd = colsVal[0].ToString().Trim();
                        branchcd = work_br;

                        type = colsVal[1].ToString().Trim();


                        string xmv_bin_stat = "", xmv_bin_item = "", xmv_bin_srno = "", xmv_bin_drgno = "", xmv_bin_dtl = "", xmv_bin_time = "";

                        xmv_bin_stat = colsVal[2].ToString().Trim();
                        xmv_bin_item = colsVal[3].ToString().Trim();
                        xmv_bin_srno = colsVal[4].ToString().Trim();
                        xmv_bin_drgno = colsVal[5].ToString().Trim();
                        xmv_bin_dtl = colsVal[6].ToString().Trim();
                        xmv_bin_time = colsVal[7].ToString().Trim();

                        //xmv_bin_icode = colsVal[3].ToString().Trim();
                        //xmv_bin_qty = colsVal[4].ToString().Trim();
                        //xmv_bin_dtl = colsVal[5].ToString().Trim();
                        //xmv_bin_remark = colsVal[6].ToString().Trim();




                        #endregion


                        #region Vnum Generation
                        if (no_of_ent == 0)
                        {
                            int p = 0;
                            string error = "Y";
                            do
                            {
                                vchdate = DateTime.Now.ToString("dd/MM/yyyy");
                                vchnum = next_no(team.col1, branchcd, "-", "select max(vchnum)+" + p + " as max from " + tabname + " where branchcd='" + branchcd + "' and type ='" + type + "' and vchdate " + xprdRange + " ", 6, "max");
                                error = fn_chk_pk(tabname + branchcd + type + vchnum + vchdate, team.col1, branchcd, type, vchnum, vchdate, acode, "WEBAPI").Trim();
                                if (p > 10)
                                { error = "N"; throw new Exception("Test Exception"); }
                                p++;
                            }
                            while (error.Equals("Y"));
                        }
                        no_of_ent = no_of_ent + 1;
                        #endregion

                        #region Saving to Oracle in 4 series
                        oporow = oDS.Tables[0].NewRow();

                        vchdate = fn_seek_iname(team.col1, branchcd, "select to_Date(to_char(sysdate,'dd/mm/yyyy'),'dd/mm/yyyy') as ldt from dual", "ldt");


                        oporow["BRANCHCD"] = branchcd;
                        oporow["TYPE"] = type;
                        oporow["VCHNUM"] = vchnum;
                        oporow["VCHDATE"] = vchdate;

                        oporow["srno"] = i;

                        //"col1": "Ok to Tfr",
                        //"col2": "LID ASSY  MFS MD & BLACK SAPIENCE 23",
                        //"col3": "21070900209001",
                        //"col4": "AFG73469707",
                        //"col5": "09/07/2021 15:55:29",
                        //"col6": "1324.80"
                        oporow["bin_Stat"] = xmv_bin_stat;
                        oporow["bin_item"] = xmv_bin_item;

                        oporow["bin_srno"] = xmv_bin_srno;
                        oporow["bin_Drgno"] = xmv_bin_drgno;

                        oporow["bin_Dtl"] = xmv_bin_dtl;
                        oporow["bin_time"] = xmv_bin_time;

                        oporow["ent_by"] = team.col3;
                        oporow["ent_dt"] = DateTime.Now.ToString();


                        oDS.Tables[0].Rows.Add(oporow);
                        #endregion


                    }

                }
                save_data(cocd, oDS, tabname);
            }
            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }

        //=================================================================
        public List<Team> aEATMAKE_ins(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";

            //------------------------


            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";
            string fldfevas = "", work_br = "";
            fldfevas = fn_seek_iname(team.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "fstr");
            work_br = "00";
            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
            }

            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 
            string err_fld = "";
            int no_of_ent = 0;
            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            string saved_Doc = "";
            string tabname = "costestimate";
            string req_Dt = "";
            string mv_branch = "", mymsg = "";
            string fix_doc_no = "";
            string mymg = "";
            fix_doc_no = team.col5.ToString();

            string mv_type = "";
            string xmv_icode = "", xmv_batch = "", xmv_qty = "",xmv_manpwr="",xmv_chgovers="";
            string xmv_jobno = "", xmv_process = "", xmv_shift = "", xmv_machine = "", xmv_inchg = "", xmv_start_time = "", xmv_end_time = "";

            try
            {
                vchdate = fn_seek_iname(cocd, "", "SELECT TO_cHAR(SYSDATE,'DD/MM/YYYY') AS SYD FROM DUAL", "syd");
                DateTime date = DateTime.ParseExact(vchdate, "dd/MM/yyyy", null);
                //Saving costestimate type 40 -------------------------------------------------------------------------------
                //try
                {
                    DataTable dtw = new DataTable();
                    string mycocd = team.col1.ToString();


                    dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                    if (dtw.Rows.Count > 0)
                    {
                        frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                        frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                        xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                    }

                    oDS = new DataSet();
                    oporow = null;
                    oDS = fill_schema(cocd, tabname);


                    err_fld = "";
                    for (int i = 0; i < qrlist.Length; i++)
                    {

                        string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");

                        if (colsVal.Length <= 1)
                        {

                        }
                        else
                        {

                            #region Fields Getting
                            branchcd = colsVal[0].ToString().Trim();
                            branchcd = work_br;


                            type = colsVal[1].ToString().Trim();
                            xmv_icode = colsVal[2].ToString().Trim();
                            xmv_batch = colsVal[3].ToString().Trim();
                            xmv_qty = colsVal[4].ToString().Trim();
                            xmv_jobno = colsVal[5].ToString().Trim();
                            xmv_process = colsVal[6].ToString().Trim();
                            xmv_shift = colsVal[7].ToString().Trim();
                            xmv_machine = colsVal[8].ToString().Trim();
                            xmv_inchg = colsVal[9].ToString().Trim();
                            xmv_start_time = colsVal[10].ToString().Trim();
                            xmv_end_time = colsVal[11].ToString().Trim();
                            xmv_manpwr = colsVal[12].ToString().Trim();
                            xmv_chgovers = colsVal[13].ToString().Trim();
                            #endregion
                            //vchdate = fn_seek_iname(team.col1, branchcd, "select to_Date(to_char(sysdate,'dd/mm/yyyy'),'dd/mm/yyyy') as ldt from dual", "ldt");
                            vchdate = date.ToString();

                            string mx = "1";
                            mx += " 2";

                            try
                            {
                                #region Vnum Generation
                                if (no_of_ent == 0)
                                {
                                    int p = 0;
                                    string error = "Y";
                                    do
                                    {
                                        vchdate = DateTime.Now.ToString("dd/MM/yyyy");
                                        vchnum = next_no(team.col1, branchcd, "-", "select max(vchnum)+" + p + " as max from " + tabname + " where branchcd='" + branchcd + "' and type ='" + type + "' and vchdate " + xprdRange + " ", 6, "max");
                                        error = fn_chk_pk(tabname + branchcd + type + vchnum + vchdate, team.col1, branchcd, type, vchnum, vchdate, acode, "WEBAPI").Trim();
                                        if (p > 10)
                                        { error = "N"; }
                                        p++;
                                    }
                                    while (error.Equals("Y"));
                                }
                                no_of_ent = no_of_ent + 1;
                                #endregion
                            }
                            catch (Exception exx)
                            {
                                mx = exx.Message;
                            }

                            #region Saving to Oracle in 4 series

                            oporow = oDS.Tables[0].NewRow();

                            saved_Doc = branchcd + type + vchnum + DateTime.Now.ToString("dd/MM/yyyy");
                            oporow["BRANCHCD"] = branchcd;
                            oporow["TYPE"] = type;

                            if (fix_doc_no.Length == 20)
                            {
                                oporow["VCHNUM"] = fix_doc_no.Substring(4, 6);
                                oporow["VCHDATE"] = date;
                            }
                            else
                            {
                                //try
                                {
                                    oporow["VCHNUM"] = vchnum;
                                    oporow["VCHDATE"] = date;
                                    fix_doc_no = branchcd + type + vchnum + date;

                                }

                            }

                            oporow["srno"] = i;

                            oporow["STATUS"] = "-";
                            oporow["CONVDATE"] = "-";
                            oporow["DROPDATE"] = "-";
                            oporow["COMMENTS"] = "-";

                            //oporow["ACODE"] = "XXXFGC";
                            oporow["ACODE"] = xmv_icode.Trim();  // updated
                            oporow["ICODE"] = xmv_icode.Trim();

                            oporow["QTY"] = 0;


                            DataTable dt_iname = getdata(team.col1, "-", "select iname, unit from item where trim(icode)='" + xmv_icode.Trim() + "'");

                            oporow["COL1"] = xmv_icode.Trim();
                            oporow["COL2"] = dt_iname.Rows[0]["iname"].ToString(); // updated
                            if (type == "40")
                            {
                                oporow["COL3"] = xmv_qty;
                                oporow["COL4"] = "1";
                                oporow["COL5"] = xmv_qty;
                                oporow["MANPWR"] = xmv_manpwr;
                                oporow["CHGOVERS"] = xmv_chgovers;
                                oporow["COL6"] = xmv_process + "/" + fix_doc_no.Substring(4, 6) + "/" + i;
                            }
                            else
                            {
                                oporow["COL3"] = "1";
                                oporow["COL4"] = xmv_qty;
                                oporow["COL5"] = xmv_qty;                               
                                oporow["COL6"] = xmv_batch; //fix_doc_no.Substring(4, 6); updated
                            }



                            oporow["COL7"] = "-";
                            oporow["COL8"] = "-";
                            oporow["REMARKS"] = "-";



                            oporow["PRINTYN"] = "Y";
                            //oporow["STARTDT"] = "XXX";
                            oporow["STARTDT"] = vchdate.Substring(0, 10);  // updated
                            oporow["COL9"] = "-";
                            oporow["COL10"] = "-";
                            oporow["COL11"] = "SF";
                            oporow["COL12"] = "STG";


                            oporow["ENQNO"] = xmv_jobno.Substring(4, 6);
                            oporow["ENQDT"] = date;

                            //oporow["COL13"] = "XXXINUOM";
                            oporow["COL13"] = dt_iname.Rows[0]["unit"].ToString(); // updated
                            oporow["COL14"] = xmv_qty;//"XXXAMT?";    // updated
                            oporow["COL15"] = "-";
                            oporow["COL16"] = "-";
                            oporow["COL17"] = "-";
                            oporow["COL18"] = "-";
                            oporow["COL19"] = "-";
                            oporow["COL20"] = "-";
                            oporow["COL21"] = xmv_process;

                            oporow["COL22"] = fn_seek_iname(team.col1, "", "Select name as fstr from typegrp where branchcd='" + branchcd + "' and id='WI' and upper(Trim(acref))='" + xmv_process + "'", "fstr");

                            oporow["COL23"] = xmv_shift;
                            oporow["COL24"] = xmv_start_time;
                            oporow["COL25"] = xmv_end_time;

                            if (type == "40")
                            {
                                oporow["MANPWR"] = xmv_manpwr;
                                oporow["CHGOVERS"] = xmv_chgovers;
                                oporow["QTY"] = makeDouble(xmv_qty);
                                oporow["ITATE"] = 0; //xxxxxx 
                            }
                            else
                            {
                                oporow["QTY"] = 0;
                                oporow["ITATE"] = makeDouble(xmv_qty); //xxxxxx 
                            }


                            oporow["IRATE"] = 0; //xxxxxx 
                            oporow["APP_BY"] = "-";
                            oporow["APP_dt"] = DateTime.Now.ToString();

                            oporow["ATTACH"] = "-";
                            oporow["ATTACH2"] = "-";
                            oporow["ATTACH3"] = "-";
                            oporow["COMMENTS2"] = "-";
                            oporow["COMMENTS3"] = "-";
                            oporow["AZ_BY"] = "-";
                            oporow["AZ_DT"] = date;
                            oporow["PICODE"] = "XXXXX";
                            oporow["JSTATUS"] = "N";
                            oporow["SUPCL_BY"] = xmv_machine;
                            //oporow["CLO_DT                                             DATE
                            oporow["COMMENTS4"] = "-";
                            oporow["COMMENTS5"] = "-";
                            oporow["EDT_BY"] = "-";
                            oporow["edt_dt"] = DateTime.Now.ToString();
                            oporow["SPLCD"] = "-";
                            oporow["JHOLD"] = "XXXXXXX";
                            oporow["PRC1"] = "-";
                            oporow["PRC2"] = "-";
                            oporow["PRC3"] = "-";
                            oporow["PRC4"] = "-";
                            oporow["NUM1"] = 0;
                            oporow["SCRP1"] = 0;
                            oporow["SCRP2"] = 0;
                            oporow["TIME1"] = 0;
                            oporow["TIME2"] = 0;
                            oporow["ENR1"] = 0;
                            oporow["ENR2"] = 0;
                            oporow["ALTITEM"] = "-";
                            oporow["EFF_WT"] = 0;
                            //oporow["MANPWR"] = 0;
                            //oporow["CHGOVERS"] = 0;
                            oporow["MANPWR"] = xmv_manpwr;
                            oporow["CHGOVERS"] = xmv_chgovers;
                            oporow["NUM2"] = 0;
                            oporow["NUM3"] = 0;
                            oporow["NUM4"] = 0;
                            oporow["NUM5"] = 0;
                            oporow["NUM6"] = 0;
                            oporow["PNG1"] = 0;
                            oporow["PNG2"] = 0;
                            oporow["PROD_TIME"] = 0;
                            oporow["OPR_CODE"] = "-";
                            oporow["PROD_RATE"] = 0;
                            err_fld = "COSTE-" + type;
                            oporow["ent_by"] = team.col3;
                            oporow["COL5"] = xmv_qty;
                            oporow["ent_dt"] = DateTime.Now.ToString();


                            oDS.Tables[0].Rows.Add(oporow);
                            #endregion


                        }

                    }
                    save_data(cocd, oDS, tabname);
                    msg = saved_Doc;
                }
                //catch (Exception e)
                //{
                //    msg += e.Message.ToString() + " --> " + "Data Not Saved - " + tabname + " type " + type + " " + err_fld;
                //}
                err_fld = "";
                //Saving prod_sheeet type 88 -------------------------------------------------------------------------------
                if (type == "40")
                {
                    tabname = "prod_sheet";
                    try
                    {
                        DataTable dtw = new DataTable();

                        oDS = new DataSet();
                        oporow = null;
                        oDS = fill_schema(cocd, tabname);


                        for (int i = 0; i < qrlist.Length; i++)
                        {

                            string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");

                            if (colsVal.Length <= 1)
                            {

                            }
                            else
                            {
                                #region Fields Getting
                                branchcd = colsVal[0].ToString().Trim();
                                branchcd = work_br;

                                type = "88";
                                xmv_icode = colsVal[2].ToString().Trim();
                                xmv_batch = colsVal[3].ToString().Trim();
                                xmv_qty = colsVal[4].ToString().Trim();
                                xmv_jobno = colsVal[5].ToString().Trim();
                                xmv_process = colsVal[6].ToString().Trim();
                                xmv_shift = colsVal[7].ToString().Trim();
                                xmv_machine = colsVal[8].ToString().Trim();
                                xmv_inchg = colsVal[9].ToString().Trim();


                                #endregion


                                #region Saving to Oracle in 4 series
                                oporow = oDS.Tables[0].NewRow();

                                oporow["BRANCHCD"] = branchcd;
                                oporow["TYPE"] = "88";

                                oporow["VCHNUM"] = vchnum;
                                oporow["VCHDATE"] = date;

                                oporow["srno"] = i;

                                oporow["acode"] = xmv_process.Substring(0, 2);
                                oporow["icode"] = xmv_icode.Trim();
                                oporow["a1"] = makeDouble(xmv_qty);
                                oporow["a2"] = makeDouble(xmv_qty);

                                oporow["a3"] = 0;
                                oporow["a4"] = 0;
                                oporow["a5"] = 0;
                                oporow["a6"] = 0;
                                oporow["a7"] = 0;
                                oporow["a8"] = 0;

                                oporow["TOTAL"] = 0;
                                oporow["un_melt"] = 0;
                                oporow["mlt_loss"] = 0;

                                oporow["FLAG"] = "1";

                                oporow["REMARKS"] = "1";

                                oporow["iqtyin"] = makeDouble(xmv_qty);
                                oporow["iqtyout"] = 0;

                                oporow["Subcode"] = "NOS";
                                oporow["MCHCODE"] = xmv_machine;
                                oporow["prevstage"] = "-";
                                oporow["PREVcode"] = xmv_shift;
                                oporow["EMPCODe"] = xmv_inchg;
                                oporow["shftcode"] = xmv_shift;
                                oporow["NOUPS"] = 1;

                                //mymg += make_def_Date(Convert.ToDateTime(xmv_jobno.Substring(10, 10)).ToString("dd/MM/yyyy"), DateTime.Now.ToString("dd/MM/yyyy"));
                                oporow["job_no"] = xmv_jobno.Substring(4, 6);
                                oporow["job_Dt"] = xmv_jobno.Substring(10, 10);

                                oporow["a9"] = 0;
                                oporow["a10"] = 0;
                                oporow["a11"] = 0;
                                oporow["a12"] = 0;
                                oporow["LMD"] = 0;
                                oporow["BCD"] = 0;
                                oporow["ename"] = fn_seek_iname(team.col1, "", "Select mchname as fstr from pmaint where branchcd='" + branchcd + "' and type='10' and (upper(Trim(mchcode))='" + xmv_machine + "' or upper(Trim(acode))||'/'||srno='" + xmv_machine + "') ", "fstr");
                                oporow["var_code"] = "-";
                                oporow["glue_code"] = xmv_jobno.Substring(4, 6);
                                oporow["film_code"] = "-";
                                oporow["remarks2"] = xmv_batch;
                                oporow["naration"] = "-";

                                oporow["num1"] = 0;
                                oporow["num2"] = 0;
                                oporow["num3"] = 0;
                                oporow["num4"] = 0;
                                oporow["num5"] = 0;
                                oporow["num6"] = 0;
                                oporow["num7"] = 0;
                                oporow["num8"] = 0;
                                oporow["num9"] = 0;
                                oporow["num10"] = 0;

                                oporow["num11"] = 0;
                                oporow["num12"] = 0;


                                DateTime date2 = DateTime.ParseExact(xmv_jobno.Substring(10, 10), "dd/MM/yyyy", null);
                                oporow["wo_no"] = xmv_jobno.Substring(4, 6);

                                oporow["wo_Dt"] = date2;

                                oporow["mtime"] = "-";
                                oporow["exc_time"] = "-";
                                oporow["tempr"] = "-";
                                oporow["naration"] = "-";


                                oporow["Mseq"] = 0;
                                oporow["A13"] = 0;
                                oporow["A14"] = 0;
                                oporow["A15"] = 0;
                                oporow["A16"] = 0;
                                oporow["A17"] = 0;
                                oporow["A18"] = 0;
                                oporow["A19"] = 0;
                                oporow["A20"] = 0;

                                oporow["Fm_Fact"] = 1;
                                oporow["PCPSHOT"] = 1;
                                oporow["pbtchno"] = "-";
                                oporow["opr_Dtl"] = xmv_inchg;

                                oporow["oee_R"] = 0;
                                oporow["hcut"] = 0;
                                oporow["alsttim"] = 0;
                                oporow["altctim"] = 0;
                                oporow["cust_Ref"] = "-";
                                oporow["cell_Ref"] = "-";
                                oporow["cell_Refn"] = "-";

                                if (team.col1 != "FSPP")
                                {
                                    oporow["A21"] = 0;
                                    oporow["A22"] = 0;
                                    oporow["A23"] = 0;
                                    oporow["A24"] = 0;
                                    oporow["A25"] = 0;
                                    oporow["A26"] = 0;
                                    oporow["A27"] = 0;
                                    oporow["A28"] = 0;
                                    oporow["A29"] = 0;
                                    oporow["A30"] = 0;
                                }
                                oporow["ntempr"] = 0;
                                oporow["tot_dt"] = 0;
                                oporow["dcode"] = "-";

                                oporow["edt_by"] = "-";
                                oporow["edt_dt"] = DateTime.Now.ToString();
                                oporow["job_Seq"] = 0;
                                oporow["job_replan"] = "-";

                                //-------------------------------
                                //fields to update
                                //-------------------------------
                                oporow["TSLOT"] = "TS";
                                oporow["MCSTART"] = "MCC";
                                oporow["MCSTOP"] = "MCS";
                                oporow["irate"] = 0;

                                oporow["last_op"] = "N";
                                oporow["stage"] = "00";
                                //-------------------------------
                                err_fld = "PRODS-" + "88";
                                oporow["ent_by"] = team.col3;
                                oporow["ent_dt"] = DateTime.Now.ToString();

                                oDS.Tables[0].Rows.Add(oporow);
                                #endregion
                            }
                        }
                        save_data(cocd, oDS, tabname);
                        msg = saved_Doc;
                    }

                    catch (Exception e)
                    {
                        msg = e.Message.ToString() + " --> " + "Data Not Saved " + mymg + " - " + tabname + " " + err_fld;
                    }
                    //--------------------------------------------------------------------------------
                }
                //ivoucher saving type 39,15


                err_fld = "";
                if (type == "25")
                {
                    {

                        DataTable dt25 = new DataTable();
                        dt25 = getdatav(cocd, "SELECT trim(icode) As icode,trim(col6) As col6,trim(col21) As stage,sum(itate) as qty FROM costestimate WHERE branchcd||type||vchnum||to_char(vchdate,'dd-mm-yyyy')='" + branchcd + "25" + fix_doc_no.Substring(4, 6) + fix_doc_no.Substring(10, 10) + "' group by trim(icode),trim(col21),trim(col6)");
                        tabname = "ivoucher";
                        oDS = new DataSet();
                        oporow = null;
                        oDS = fill_schema(cocd, tabname);

                        for (int i = 0; i < dt25.Rows.Count; i++)
                        {
                            #region Saving to Oracle in 4 series
                            oporow = oDS.Tables[0].NewRow();

                            oporow["BRANCHCD"] = branchcd;
                            oporow["type"] = "39";
                            oporow["iopr"] = "88";
                            oporow["VCHNUM"] = fix_doc_no.Substring(4, 6);
                            oporow["VCHDATE"] = date;

                            oporow["stage"] = dt25.Rows[i]["stage"];
                            oporow["acode"] = dt25.Rows[i]["stage"];
                            oporow["icode"] = dt25.Rows[i]["icode"];
                            oporow["iqtyout"] = dt25.Rows[i]["qty"];
                            oporow["srno"] = i;
                            oporow["morder"] = i;
                            oporow["PURPOSE"] = "Item Name";
                            oporow["DESC_"] = "FG Erpcode";
                            oporow["INVNO"] = dt25.Rows[i]["col6"];

                            oporow["INVDATE"] = date;
                            oporow["RCODE"] = "FG Erpcode";
                            oporow["IRATE"] = 0;
                            oporow["freight"] = fix_doc_no.Substring(4, 6);
                            oporow["btchno"] = fix_doc_no.Substring(4, 6);
                            oporow["btchno"] = xmv_process + "/" + fix_doc_no.Substring(4, 6) + "/" + i;
                            oporow["btchdt"] = fix_doc_no.Substring(10, 10);
                            oporow["refnum"] = xmv_jobno.Substring(4, 6);
                            //oporow["refdate"] = Convert.ToDateTime(xmv_jobno.Substring(10, 10)).ToString("dd/MM/yyyy");
                            oporow["refdate"] = DateTime.ParseExact(xmv_jobno.Substring(10, 10), "dd/MM/yyyy", null).ToString();
                            oporow["iqty_wt"] = 0; // prodn
                            oporow["iqty_chl"] = 0;
                            oporow["iqtyin"] = 0;
                            oporow["store"] = "W";
                            oporow["rec_iss"] = "C";
                            err_fld = "IVCH 39";
                            oporow["ent_by"] = team.col3;
                            oporow["ent_dt"] = DateTime.Now.ToString();
                            oporow["edt_by"] = "-";
                            oporow["edt_dt"] = DateTime.Now.ToString();

                            oDS.Tables[0].Rows.Add(oporow);
                            #endregion
                        }
                        if (oDS.Tables[0].Rows.Count > 0)
                        {
                            save_data(cocd, oDS, tabname);
                        }

                        DataTable dt40 = new DataTable();
                        dt40 = getdatav(cocd, "SELECT trim(icode) As icode,trim(col21) As stage,trim(col6) As col6,sum(qty) as qty FROM costestimate WHERE branchcd||type||vchnum||to_char(vchdate,'dd-mm-yyyy')='" + branchcd + "40" + fix_doc_no.Substring(4, 6) + fix_doc_no.Substring(10, 10) + "' group by trim(icode),trim(col21),trim(col6)");
                        tabname = "ivoucher";
                        oDS = new DataSet();
                        oporow = null;
                        oDS = fill_schema(cocd, tabname);

                        for (int i = 0; i < dt40.Rows.Count; i++)
                        {
                            #region Saving to Oracle in 4 series
                            oporow = oDS.Tables[0].NewRow();

                            oporow["BRANCHCD"] = branchcd;
                            oporow["type"] = "15";
                            oporow["iopr"] = "88";
                            oporow["VCHNUM"] = fix_doc_no.Substring(4, 6);
                            oporow["VCHDATE"] = date;
                            oporow["stage"] = dt40.Rows[i]["stage"];
                            oporow["acode"] = dt40.Rows[i]["stage"];
                            oporow["icode"] = dt40.Rows[i]["icode"];
                            oporow["iqtyin"] = dt40.Rows[i]["qty"];
                            oporow["iqtyout"] = 0;
                            oporow["srno"] = i;
                            oporow["morder"] = i;
                            oporow["PURPOSE"] = "Item Name";
                            oporow["DESC_"] = "FG Erpcode";
                            oporow["INVNO"] = dt40.Rows[i]["col6"];
                            oporow["INVDATE"] = date;
                            oporow["RCODE"] = "FG Erpcode";
                            oporow["IRATE"] = 0;
                            oporow["freight"] = fix_doc_no.Substring(4, 6);
                            oporow["btchno"] = xmv_process + "/" + fix_doc_no.Substring(4, 6) + "/" + i;
                            oporow["btchdt"] = fix_doc_no.Substring(10, 10);
                            oporow["iqty_wt"] = 0; // prodn
                            oporow["iqty_chl"] = 0;

                            oporow["refnum"] = xmv_jobno.Substring(4, 6);
                            //oporow["refdate"] = Convert.ToDateTime(xmv_jobno.Substring(10, 10)).ToString("dd/MM/yyyy");
                            oporow["refdate"] = DateTime.ParseExact(xmv_jobno.Substring(10, 10), "dd/MM/yyyy", null).ToString();
                            oporow["store"] = "W";
                            oporow["rec_iss"] = "D";
                            err_fld = "IVCH 15";
                            oporow["ent_by"] = team.col3;
                            oporow["ent_dt"] = DateTime.Now.ToString();
                            oporow["edt_by"] = "-";
                            oporow["edt_dt"] = DateTime.Now.ToString();

                            oDS.Tables[0].Rows.Add(oporow);
                            #endregion
                        }
                        if (oDS.Tables[0].Rows.Count > 0)
                        {
                            save_data(cocd, oDS, tabname);
                        }
                    }
                    //--------------------------------------------------------------------------------
                }
            }
            catch (Exception ex)
            {
                msg = ex.Message + " " + mymsg + " " + vchdate + " " + err_fld + tabname;
            }

            List<Team>
                mylist = new List<Team>();
            try
            {
                if (msg == "")
                    msg = branchcd + type + vchnum + DateTime.Now.ToString("dd/MM/yyyy");
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = branchcd + type + vchnum + DateTime.Now.ToString("dd/MM/yyyy"), });
            }
            catch { }
            return mylist;
        }


        public List<Team> aFG173C_ins(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";

            //------------------------


            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";
            string fldfevas = "", work_br = "";
            fldfevas = fn_seek_iname(team.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "fstr");
            work_br = "00";
            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
            }

            List<Team>
                mylist = new List<Team>();

            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 
            string err_fld = "";
            int no_of_ent = 0;
            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            string saved_Doc = "";
            string tabname = "IVOUCHER";
            string req_Dt = "";
            string mv_branch = "", mymsg = "";
            string fix_doc_no = "";
            string mymg = "";
            fix_doc_no = team.col5.ToString();
            string chk_Stk = "";
            int err_itm_cnt = 0;
            string err_itm_dtl = "";
            string mv_type = "";
            string mv_invno = "";
            string mv_invdt = "";
            string xmv_locn = "", xmv_brstr = "";
            string xmv_batch = "", xmv_tagqty = "";
            string tagqty_ss = "", brstr_ss = "";
            string tagno_ss = "";

            // check already taken 
            //----------------------------------------------------------------
            //---------------------------------------------
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();


                for (int i = 0; i < qrlist.Length; i++)
                {

                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");

                    if (colsVal.Length <= 1)
                    {

                    }
                    else
                    {
                        #region Fields Getting
                        branchcd = colsVal[0].ToString().Trim();
                        branchcd = work_br;
                        type = colsVal[1].ToString().Trim();


                        //type = colsVal[1].ToString().Trim();
                        //xmv_locn = colsVal[2].ToString().Trim();
                        //xmv_brstr = colsVal[3].ToString().Trim();
                        //xmv_batch = colsVal[4].ToString().Trim();
                        //xmv_tagqty = colsVal[5].ToString().Trim();
                        /**-----------Surendar-------------**/
                        if (team.col1 == "GDOT" && type=="17")
                        {
                            
                            xmv_locn = colsVal[2].ToString().Trim();
                            xmv_batch = colsVal[3].ToString().Trim();
                            xmv_tagqty = fn_seek_iname(team.col1, "", "SELECT  TRIM(nvl(a.IQTYIN,0)) as fstr from IVOUCHER a,item b where trim(a.icode)=trim(B.icode) and a.BRANCHCD='00' and a.iqtyin>0 and a.store='W' and A.stage='61' AND TRIM(A.invno) = '" + xmv_batch + "' AND TRIM(A.icode)||TRIM(A.invno) not in (select trim(icode)||trim(btchno) from ivoucher where BRANCHCD='00' and type in ('17','19') and TRIM(btchno) in ('" + xmv_batch + "'))  ORDER BY A.VCHDATE DESC", "fstr");
                            xmv_brstr = fn_seek_iname(team.col1, "", "SELECT  TRIM(A.BRANCHCD)||A.TYPE||A.VCHNUM||TO_CHAR(A.VCHDATE,'YYYYMMDD')||TRIM(A.icode) as fstr from IVOUCHER A,item b where trim(a.icode)=trim(B.icode) and a.BRANCHCD='00' and a.iqtyin>0 and a.store='W' and A.stage='61' AND TRIM(A.invno) = '" + xmv_batch + "' AND TRIM(A.icode)||TRIM(A.invno) not in (select trim(icode)||trim(btchno) from ivoucher where BRANCHCD='00' and type in ('17','19') and TRIM(btchno) in ('" + xmv_batch + "'))  ORDER BY A.VCHDATE DESC", "fstr");
                            tagno_ss = fn_seek_iname(team.col1, "", "SELECT COL3 AS FSTR FROM PACKREC WHERE TRIM(TAGNO)='"+ xmv_batch + "'", "fstr");
                        }
                        else {
                           
                            xmv_locn = colsVal[2].ToString().Trim();
                            xmv_brstr = colsVal[3].ToString().Trim();
                            xmv_batch = colsVal[4].ToString().Trim();
                            xmv_tagqty = colsVal[5].ToString().Trim();
                        }
                            //xmv_batch = colsVal[4].ToString().Trim();                       
                        

                        #endregion
                                               
                        mq1 = "select branchcd||type||vchnum||to_char(vchdate,'dd/mm/yyyy') as fstr from ivoucher where branchcd='" + work_br + "' and type in ('17','19') and btchno='" + xmv_batch + "'";
                        chk_Stk = fn_seek_iname(team.col1, "", mq1, "fstr");
                        

                        if (chk_Stk.Trim() != "0")
                        {
                            msg = "Tag Already Received";
                            err_itm_cnt = err_itm_cnt + 1;
                            err_itm_dtl = err_itm_dtl + "|" + xmv_batch.Trim() + "|";

                        }
                    }
                }
            }

            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Tag Already Taken";
            }
            if (err_itm_cnt > 0)
            {

                try
                {
                    mylist.Add(new Team { col1 = msg, col2 = err_itm_dtl, col3 = "-", col4 = "-", col5 = "-", });
                }
                catch { }
                return mylist;
            }
            string chk_po_Dtl = "";
            //------------------------------------------------------------------
            try
            {
                vchdate = fn_seek_iname(cocd, "", "SELECT TO_cHAR(SYSDATE,'DD/MM/YYYY') AS SYD FROM DUAL", "syd");
                DateTime date = DateTime.ParseExact(vchdate, "dd/MM/yyyy", null);
                //Saving costestimate type 40 -------------------------------------------------------------------------------
                //try
                {
                    DataTable dtw = new DataTable();
                    string mycocd = team.col1.ToString();


                    dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                    if (dtw.Rows.Count > 0)
                    {
                        frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                        frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                        xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                    }

                    oDS = new DataSet();
                    oporow = null;
                    oDS = fill_schema(cocd, tabname);

                    string msrno = "";
                    string squery1 = "";
                    squery1 = "SELECT to_char(sysdate,'yyyymmdd') as vchdate from dual";
                    string dtyyyymmdd = fn_seek_iname(team.col1, branchcd, squery1, "vchdate");
                    err_fld = "";
                    for (int i = 0; i < qrlist.Length; i++)
                    {

                        string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");

                        if (colsVal.Length <= 1)
                        {

                        }
                        else
                        {

                            //#region Fields Getting
                            //branchcd = colsVal[0].ToString().Trim();
                            //branchcd = work_br;


                            //type = colsVal[1].ToString().Trim();
                            //xmv_locn = colsVal[2].ToString().Trim();
                            //xmv_brstr = colsVal[3].ToString().Trim();
                            //if (team.col1 == "GDOT" && type == "17")
                            //{
                            //    xmv_batch = colsVal[4].Substring(9, 17);
                            //}
                            //else
                            //{
                            //    xmv_batch = colsVal[4].ToString().Trim();
                            //}
                            ////xmv_batch = colsVal[4].ToString().Trim();
                            //xmv_tagqty = colsVal[5].ToString().Trim();

                            #region Fields Getting
                            branchcd = colsVal[0].ToString().Trim();
                            branchcd = work_br;
                            type = colsVal[1].ToString().Trim();

                            /**-----------Surendar-------------**/
                            if (team.col1 == "GDOT" && type == "17")
                            {

                                xmv_locn = colsVal[2].ToString().Trim();
                                xmv_batch = colsVal[3].ToString().Trim();
                                xmv_tagqty = fn_seek_iname(team.col1, "", "SELECT  TRIM(nvl(a.IQTYIN,0)) as fstr from IVOUCHER a,item b where trim(a.icode)=trim(B.icode) and a.BRANCHCD='00' and a.iqtyin>0 and a.store='W' and A.stage='61' AND TRIM(A.invno) = '" + xmv_batch + "' AND TRIM(A.icode)||TRIM(A.invno) not in (select trim(icode)||trim(btchno) from ivoucher where BRANCHCD='00' and type in ('17','19') and TRIM(btchno) in ('" + xmv_batch + "'))  ORDER BY A.VCHDATE DESC", "fstr");
                                xmv_brstr = fn_seek_iname(team.col1, "", "SELECT  TRIM(A.BRANCHCD)||A.TYPE||A.VCHNUM||TO_CHAR(A.VCHDATE,'YYYYMMDD')||TRIM(A.icode) as fstr from IVOUCHER A,item b where trim(a.icode)=trim(B.icode) and a.BRANCHCD='00' and a.iqtyin>0 and a.store='W' and A.stage='61' AND TRIM(A.invno) = '" + xmv_batch + "' AND TRIM(A.icode)||TRIM(A.invno) not in (select trim(icode)||trim(btchno) from ivoucher where BRANCHCD='00' and type in ('17','19') and TRIM(btchno) in ('" + xmv_batch + "'))  ORDER BY A.VCHDATE DESC", "fstr");
                                tagno_ss = fn_seek_iname(team.col1, "", "SELECT COL3 AS FSTR FROM PACKREC WHERE TRIM(TAGNO)='" + xmv_batch + "'", "fstr");
                            }
                            else
                            {

                                xmv_locn = colsVal[2].ToString().Trim();
                                xmv_brstr = colsVal[3].ToString().Trim();
                                xmv_batch = colsVal[4].ToString().Trim();
                                xmv_tagqty = colsVal[5].ToString().Trim();
                            }

                            #endregion
                            //vchdate = fn_seek_iname(team.col1, branchcd, "select to_Date(to_char(sysdate,'dd/mm/yyyy'),'dd/mm/yyyy') as ldt from dual", "ldt");
                            vchdate = date.ToString();

                            string mx = "1";
                            mx += " 2";

                            try
                            {
                                #region Vnum Generation
                                if (no_of_ent == 0)
                                {
                                    int p = 0;
                                    string error = "Y";
                                    do
                                    {
                                        vchdate = DateTime.Now.ToString("dd/MM/yyyy");
                                        vchnum = next_no(team.col1, branchcd, "-", "select max(vchnum)+" + p + " as max from " + tabname + " where branchcd='" + branchcd + "' and type ='" + type + "' and vchdate " + xprdRange + " ", 6, "max");
                                        error = fn_chk_pk(tabname + branchcd + type + vchnum + vchdate, team.col1, branchcd, type, vchnum, vchdate, acode, "WEBAPI").Trim();
                                        if (p > 10)
                                        { error = "N"; }
                                        p++;
                                    }
                                    while (error.Equals("Y"));
                                }
                                no_of_ent = no_of_ent + 1;
                                #endregion
                            }
                            catch (Exception exx)
                            {
                                mx = exx.Message;
                            }

                            #region Saving to Oracle in 4 series

                            oporow = oDS.Tables[0].NewRow();

                            oporow["BRANCHCD"] = branchcd;
                            oporow["type"] = "17";
                            oporow["iopr"] = "WH";
                            oporow["VCHNUM"] = vchnum;
                            oporow["VCHDATE"] = fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE(to_char(sysdate,'dd/mm/yyyy'),'dd/mm/yyyy') as vchdate from dual", "vchdate");

                            saved_Doc = branchcd + type + vchnum + DateTime.Now.ToString("dd/MM/yyyy");


                            oporow["stage"] = "-";
                            oporow["vcode"] = "69";
                            oporow["acode"] = "60";
                            oporow["icode"] = xmv_brstr.Substring(18, 8);
                            oporow["iqtyin"] = makeDouble(xmv_tagqty);
                            oporow["iqtyout"] = 0;
                            oporow["srno"] = i;
                            oporow["morder"] = i;

                            msrno = (i + 1).ToString().Trim().PadLeft(4, '0');

                            //must check 1 entry
                            oporow["thru"] = xmv_brstr.Substring(18, 8);
                            //dtyyyymmdd + "-" + branchcd + "17" + "-" + vchnum + "-" + xmv_brstr.Substring(18, 8);


                            oporow["PURPOSE"] = "-";
                            oporow["DESC_"] = "Tfr to Warehouse at " + xmv_locn;
                            oporow["LOCATION"] = xmv_locn;

                            oporow["FINVNO"] = xmv_brstr;

                            if ((team.col1 == "GDOT" && type == "17"))
                            {
                                oporow["INVNO"] = tagno_ss;
                            }
                            else
                            {
                                oporow["INVNO"] = "-";
                            }                            
                            oporow["INVDATE"] = date;
                            oporow["RCODE"] = "-";
                            oporow["IRATE"] = 0;
                            oporow["freight"] = "-";
                            oporow["btchno"] = xmv_batch.Replace(xmv_brstr.Substring(18, 8), "");
                            oporow["btchdt"] = "-";
                            oporow["iqty_wt"] = 0; // prodn
                            oporow["iqty_chl"] = 0;



                            if (team.col1 == "SGRP" || (team.col1 == "GDOT" && type == "17"))
                            {
                                string SQuery = "select enqno||'~'||to_char(enqdt,'dd/mm/yyyy')||'~'||enr1||'~'||enr2 as fstr from costestimate where branchcd='" + work_br + "' and type='40' and trim(icode)='" + xmv_brstr.Substring(18, 8) + "' and trim(col6)='" + xmv_batch.Substring(8, xmv_batch.Length - 8) + "'";

                                chk_po_Dtl = fn_seek_iname(team.col1, branchcd, SQuery, "fstr");

                                if (chk_po_Dtl.Contains("~"))
                                {

                                    mv_invno = chk_po_Dtl.Split('~')[0].ToString();
                                    mv_invdt = chk_po_Dtl.Split('~')[1].ToString();


                                    oporow["iqty_wt"] = makeDouble(chk_po_Dtl.Split('~')[2].ToString());
                                    oporow["no_bdls"] = chk_po_Dtl.Split('~')[3].ToString();

                                    if ((team.col1 == "GDOT" && type == "17"))
                                    {
                                        oporow["invno"] = tagno_ss;
                                    }
                                    else
                                    {
                                        oporow["invno"] = mv_invno;
                                    }                                    
                                    oporow["invdate"] = fn_seek_iname(team.col1, branchcd, "select to_Date('" + mv_invdt + "','dd/mm/yyyy') as ldt from dual", "ldt");

                                    oporow["thru"] = xmv_brstr.Substring(18, 8) + "-" + mv_invno;

                                    SQuery = "select trim(acode)||'~'||substr(convdate,3,2)||'~'||substr(convdate,5,6)||'~'||substr(convdate,11,10)||'~'||trim(convdate) as fstr from costestimate where branchcd='" + work_br + "' and type='30' and srno <=1 and trim(icode)='" + xmv_brstr.Substring(18, 8) + "' and trim(vchnum)='" + oporow["invno"].ToString() + "' and to_char(vchdate,'dd/mm/yyyy')='" + Convert.ToDateTime(oporow["invdate"].ToString()).ToString("dd/MM/yyyy") + "'";

                                    chk_po_Dtl = fn_seek_iname(team.col1, branchcd, SQuery, "fstr");

                                    if (chk_po_Dtl.Contains("~"))
                                    {
                                        oporow["rcode"] = chk_po_Dtl.Split('~')[0].ToString();
                                        oporow["potype"] = chk_po_Dtl.Split('~')[1].ToString();
                                        oporow["ponum"] = chk_po_Dtl.Split('~')[2].ToString();
                                        oporow["podate"] = fn_seek_iname(team.col1, branchcd, "select to_Date('" + chk_po_Dtl.Split('~')[3].ToString() + "','dd/mm/yyyy') as ldt from dual", "ldt");


                                        SQuery = "select trim(cdrgno)||'~'||trim(desc9) as fstr from somas where branchcd||type||ordno||to_chaR(orddt,'dd/mm/yyyy')||srno='" + chk_po_Dtl.Split('~')[4].ToString() + "' and trim(icode)='" + xmv_brstr.Substring(18, 8) + "'";
                                        chk_po_Dtl = fn_seek_iname(team.col1, branchcd, SQuery, "fstr");
                                        if (chk_po_Dtl.Contains("~"))
                                        {
                                            oporow["revis_no"] = chk_po_Dtl.Split('~')[0].ToString();
                                            oporow["purpose"] = chk_po_Dtl.Split('~')[1].ToString();
                                        }

                                    }

                                }

                            }
                            oporow["store"] = "Y";
                            oporow["rec_iss"] = "D";
                            oporow["inspected"] = "Y";
                            oporow["ent_by"] = team.col3;
                            oporow["ent_dt"] = DateTime.Now.ToString();
                            oporow["edt_by"] = "-";
                            oporow["edt_dt"] = DateTime.Now.ToString();
                            err_fld = "IVCH 17";

                            oDS.Tables[0].Rows.Add(oporow);

                            oporow = oDS.Tables[0].NewRow();



                            oporow["BRANCHCD"] = branchcd;
                            oporow["type"] = "3C";
                            oporow["iopr"] = "WH";
                            oporow["VCHNUM"] = vchnum;
                            oporow["VCHDATE"] = fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE(to_char(sysdate,'dd/mm/yyyy'),'dd/mm/yyyy') as vchdate from dual", "vchdate");

                            //saved_Doc = branchcd + type + vchnum + DateTime.Now.ToString("dd/MM/yyyy");

                            oporow["stage"] = "69";
                            oporow["vcode"] = "69";
                            oporow["acode"] = "60";
                            oporow["icode"] = xmv_brstr.Substring(18, 8);
                            oporow["iqtyin"] = 0;
                            oporow["iqtyout"] = makeDouble(xmv_tagqty);
                            oporow["srno"] = i;
                            oporow["morder"] = i;
                            oporow["PURPOSE"] = "-";
                            oporow["DESC_"] = "Tfr from Warehouse to " + xmv_locn;

                            oporow["FINVNO"] = xmv_brstr;
                            if (team.col1 == "SGRP")
                            {
                                oporow["INVNO"] = mv_invno;
                                oporow["INVDATE"] = fn_seek_iname(team.col1, branchcd, "select to_Date('" + mv_invdt + "','dd/mm/yyyy') as ldt from dual", "ldt");

                            }
                            oporow["RCODE"] = "FG Erpcode";


                            oporow["IRATE"] = 0;
                            oporow["freight"] = "-";
                            oporow["btchno"] = xmv_batch.Replace(xmv_brstr.Substring(18, 8), "");
                            oporow["btchdt"] = "-";
                            oporow["iqty_wt"] = 0; // prodn
                            oporow["iqty_chl"] = 0;

                            oporow["store"] = "W";
                            oporow["rec_iss"] = "C";
                            oporow["inspected"] = "Y";

                            oporow["ent_by"] = team.col3;
                            oporow["ent_dt"] = DateTime.Now.ToString();
                            oporow["edt_by"] = "-";
                            oporow["edt_dt"] = DateTime.Now.ToString();
                            err_fld = "IVCH 3C";

                            oDS.Tables[0].Rows.Add(oporow);

                            #endregion

                        }

                    }
                    save_data(cocd, oDS, tabname);
                    msg = saved_Doc;
                }

                err_fld = "";



            }
            catch (Exception ex)
            {
                msg = ex.Message + " " + mymsg + " " + vchdate + " " + err_fld;
            }

            try
            {
                if (msg == "")
                    msg = branchcd + type + vchnum + DateTime.Now.ToString("dd/MM/yyyy");
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = branchcd + type + vchnum + DateTime.Now.ToString("dd/MM/yyyy"), });
            }
            catch { }
            return mylist;
        }

        //=================================================================
        //public List<Team> aDownREJ_ins(Team team)
        //{
        //    //-------------------------
        //    Fn_set_andapp_opts(team.col1, "N");
        //    string co_tbl_cd = team.col1;
        //    if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";
        //    //------------------------

        //    string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";
        //    string fldfevas = "", work_br = "";
        //    fldfevas = fn_seek_iname(team.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "fstr");
        //    work_br = "00";
        //    if (fldfevas.Trim() != "0")
        //    {
        //        work_br = fldfevas.Split('^')[0];
        //    }

        //    //col1 - company code
        //    //col2 - data string
        //    //col3 - EntBy
        //    //col4 - CurrentYear
        //    //col5 - 

        //    string req_Dt = "";
        //    string mv_branch = "";
        //    string mv_type = "";
        //    string xmv_icode = "", xmv_batch = "", xmv_qty = "";
        //    string xmv_jobno = "", xmv_process = "", xmv_shift = "", xmv_machine = "", xmv_inchg = "";
        //    string fix_doc_no = "";
        //    string msg = "Data Saved";
        //    string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
        //    string cocd = team.col1;
        //    String mq0 = team.col2;
        //    string[] qrlist = Regex.Split(mq0, "!~!~!");
        //    int res = 0;
        //    string tabname = "inspvch";
        //    try
        //    {
        //        vchdate = fn_seek_iname(cocd, "", "SELECT TO_cHAR(SYSDATE,'DD/MM/YYYY') AS SYD FROM DUAL", "syd");
        //        DateTime date = DateTime.ParseExact(vchdate, "dd/MM/yyyy", null);

        //        DataTable dtw = new DataTable();
        //        string mycocd = team.col1.ToString();

        //        fix_doc_no = team.col5.ToString();

        //        dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
        //        if (dtw.Rows.Count > 0)
        //        {
        //            frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
        //            frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
        //            xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
        //        }

        //        oDS = new DataSet();
        //        oporow = null;
        //        oDS = fill_schema(cocd, tabname);

        //        int no_of_ent = 0;
        //        for (int i = 0; i < qrlist.Length; i++)
        //        {

        //            string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");

        //            if (colsVal.Length <= 1)
        //            {

        //            }
        //            else
        //            {



        //                #region Fields Getting



        //                branchcd = colsVal[0].ToString().Trim();
        //                branchcd = work_br;

        //                type = colsVal[1].ToString().Trim();

        //                xmv_icode = colsVal[2].ToString().Trim();
        //                xmv_batch = colsVal[3].ToString().Trim();
        //                xmv_qty = colsVal[4].ToString().Trim();
        //                xmv_jobno = colsVal[5].ToString().Trim();
        //                xmv_process = colsVal[6].ToString().Trim();
        //                xmv_shift = colsVal[7].ToString().Trim();
        //                xmv_machine = colsVal[8].ToString().Trim();
        //                xmv_inchg = colsVal[9].ToString().Trim();


        //                #endregion




        //                #region Saving to Oracle in 4 series
        //                oporow = oDS.Tables[0].NewRow();

        //                oporow["BRANCHCD"] = branchcd;
        //                oporow["TYPE"] = type;
        //                oporow["VCHNUM"] = fix_doc_no.Substring(4, 6);
        //                oporow["VCHDATE"] = date;

        //                oporow["srno"] = i;

        //                oporow["title"] = xmv_machine;
        //                oporow["btchno"] = fix_doc_no.Substring(4, 6);
        //                oporow["acode"] = xmv_process;
        //                oporow["Icode"] = xmv_icode.Trim();
        //                oporow["cpartno"] = "-";
        //                oporow["grade"] = "-";

        //                oporow["col1"] = xmv_batch;

        //                oporow["col2"] = xmv_icode;

        //                oporow["col3"] = xmv_qty;

        //                oporow["col4"] = "-";
        //                oporow["col5"] = "-";
        //                oporow["col6"] = "-";

        //                oporow["MRRNUM"] = "88";
        //                oporow["MRRDATE"] = fix_doc_no.Substring(10, 10);
        //                oporow["BTCHDT"] = fix_doc_no.Substring(10, 10);
        //                oporow["RESULT"] = "-";
        //                oporow["OBSV1"] = "-";
        //                oporow["OBSV2"] = "-";
        //                oporow["OBSV3"] = "-";
        //                oporow["OBSV4"] = "-";
        //                oporow["OBSV5"] = "-";
        //                oporow["OBSV6"] = "-";
        //                oporow["OBSV7"] = "-";
        //                oporow["OBSV8"] = "-";
        //                oporow["OBSV9"] = "-";
        //                oporow["OBSV10"] = "-";
        //                oporow["OBSV11"] = "-";
        //                oporow["OBSV12"] = "-";
        //                oporow["OBSV13"] = "-";
        //                oporow["OBSV14"] = "-";
        //                oporow["OBSV15"] = xmv_shift;
        //                oporow["OBSV16"] = xmv_inchg;

        //                oporow["CONTPLAN"] = "-";
        //                oporow["SAMPQTY"] = 0;
        //                oporow["MATL"] = "-";
        //                oporow["finish"] = "-";
        //                oporow["omax"] = "-";
        //                oporow["omin"] = "-";

        //                oporow["rejqty"] = 0;
        //                oporow["obj1"] = 0;
        //                oporow["obj2"] = 0;
        //                oporow["obj3"] = 0;
        //                oporow["obj4"] = 0;
        //                oporow["obj5"] = 0;
        //                oporow["obj6"] = 0;
        //                oporow["qty1"] = 0;
        //                oporow["qty2"] = 0;
        //                oporow["qty3"] = 0;
        //                oporow["qty4"] = 0;
        //                oporow["qty5"] = 0;
        //                oporow["qty6"] = 0;
        //                oporow["qty7"] = 0;
        //                oporow["qty8"] = makeDouble(xmv_qty);

        //                oporow["lsrno"] = "-";
        //                oporow["amdtno"] = 0;

        //                oporow["rel_by"] = "-";
        //                oporow["rel_Dt"] = "-";
        //                oporow["matlrdt"] = "-";
        //                oporow["spr_ref"] = "-";
        //                oporow["spr_lot"] = "-";

        //                oporow["pjobno"] = xmv_jobno.Substring(4, 6);
        //                oporow["pjobdt"] = date;

        //                oporow["ent_by"] = team.col3;
        //                oporow["ent_dt"] = DateTime.Now.ToString();


        //                oDS.Tables[0].Rows.Add(oporow);
        //                #endregion


        //            }

        //        }
        //        save_data(cocd, oDS, tabname);
        //        msg = (type == "45" ? fix_doc_no : fix_doc_no + "  Data Saved ");
        //    }
        //    catch (Exception e)
        //    {
        //        msg = e.Message.ToString() + " --> " + "Data Not Saved";
        //    }



        //    List<Team> mylist = new List<Team>();
        //    try
        //    {
        //        mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-" });
        //    }
        //    catch { }
        //    return mylist;
        //}

        //==================================================================

        public List<Team> aDownREJ_ins(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";
            //------------------------

            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";
            string fldfevas = "", work_br = "";
            fldfevas = fn_seek_iname(team.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "fstr");
            work_br = "00";
            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
            }

            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 

            string req_Dt = "";
            string mv_branch = "";
            string mv_type = "";
            string xmv_icode = "", xmv_batch = "", xmv_qty = "";
            string xmv_jobno = "", xmv_process = "", xmv_shift = "", xmv_machine = "", xmv_inchg = "";
            string fix_doc_no = "";
            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            String xmunit = "";
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            string tabname = "inspvch";
            try
            {
                vchdate = fn_seek_iname(cocd, "", "SELECT TO_cHAR(SYSDATE,'DD/MM/YYYY') AS SYD FROM DUAL", "syd");
                DateTime date = DateTime.ParseExact(vchdate, "dd/MM/yyyy", null);

                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();

                fix_doc_no = team.col5.ToString();

                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }

                oDS = new DataSet();
                oporow = null;
                oDS = fill_schema(cocd, tabname);

                int no_of_ent = 0;
                for (int i = 0; i < qrlist.Length; i++)
                {

                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");

                    if (colsVal.Length <= 1)
                    {

                    }
                    else
                    {



                        #region Fields Getting



                        branchcd = colsVal[0].ToString().Trim();
                        branchcd = work_br;

                        type = colsVal[1].ToString().Trim();

                        xmv_icode = colsVal[2].ToString().Trim();
                        xmv_batch = colsVal[3].ToString().Trim();
                        xmv_qty = colsVal[4].ToString().Trim();
                        xmv_jobno = colsVal[5].ToString().Trim();
                        xmv_process = colsVal[6].ToString().Trim();
                        xmv_shift = colsVal[7].ToString().Trim();
                        xmv_machine = colsVal[8].ToString().Trim();
                        xmv_inchg = colsVal[9].ToString().Trim();
                        xmunit = colsVal[10].ToString().Trim();


                        #endregion




                        #region Saving to Oracle in 4 series
                        oporow = oDS.Tables[0].NewRow();

                        oporow["BRANCHCD"] = branchcd;
                        oporow["TYPE"] = type;
                        oporow["VCHNUM"] = fix_doc_no.Substring(4, 6);
                        oporow["VCHDATE"] = date;

                        oporow["srno"] = i;

                        oporow["title"] = xmv_machine;
                        oporow["btchno"] = fix_doc_no.Substring(4, 6);
                        oporow["acode"] = xmv_process;
                        oporow["Icode"] = xmv_icode.Trim();
                        oporow["cpartno"] = "-";
                        oporow["grade"] = "-";

                        oporow["col1"] = xmv_batch;

                        oporow["col2"] = xmv_icode;

                        oporow["col3"] = xmv_qty;

                        oporow["col4"] = xmunit;
                        oporow["col5"] = "-";
                        oporow["col6"] = "-";

                        oporow["MRRNUM"] = "88";
                        oporow["MRRDATE"] = fix_doc_no.Substring(10, 10);
                        oporow["BTCHDT"] = fix_doc_no.Substring(10, 10);
                        oporow["RESULT"] = "-";
                        oporow["OBSV1"] = "-";
                        oporow["OBSV2"] = "-";
                        oporow["OBSV3"] = "-";
                        oporow["OBSV4"] = "-";
                        oporow["OBSV5"] = "-";
                        oporow["OBSV6"] = "-";
                        oporow["OBSV7"] = "-";
                        oporow["OBSV8"] = "-";
                        oporow["OBSV9"] = "-";
                        oporow["OBSV10"] = "-";
                        oporow["OBSV11"] = "-";
                        oporow["OBSV12"] = "-";
                        oporow["OBSV13"] = "-";
                        oporow["OBSV14"] = "-";
                        oporow["OBSV15"] = xmv_shift;
                        oporow["OBSV16"] = xmv_inchg;

                        oporow["CONTPLAN"] = "-";
                        oporow["SAMPQTY"] = 0;
                        oporow["MATL"] = "-";
                        oporow["finish"] = "-";
                        oporow["omax"] = "-";
                        oporow["omin"] = "-";

                        oporow["rejqty"] = 0;
                        oporow["obj1"] = 0;
                        oporow["obj2"] = 0;
                        oporow["obj3"] = 0;
                        oporow["obj4"] = 0;
                        oporow["obj5"] = 0;
                        oporow["obj6"] = 0;
                        oporow["qty1"] = 0;
                        oporow["qty2"] = 0;
                        oporow["qty3"] = 0;
                        oporow["qty4"] = 0;
                        oporow["qty5"] = 0;
                        oporow["qty6"] = 0;
                        oporow["qty7"] = 0;
                        oporow["qty8"] = makeDouble(xmv_qty);

                        oporow["lsrno"] = "-";
                        oporow["amdtno"] = 0;

                        oporow["rel_by"] = "-";
                        oporow["rel_Dt"] = "-";
                        oporow["matlrdt"] = "-";
                        oporow["spr_ref"] = "-";
                        oporow["spr_lot"] = "-";

                        oporow["pjobno"] = xmv_jobno.Substring(4, 6);
                        oporow["pjobdt"] = date;

                        oporow["ent_by"] = team.col3;
                        oporow["ent_dt"] = DateTime.Now.ToString();


                        oDS.Tables[0].Rows.Add(oporow);
                        #endregion


                    }

                }
                save_data(cocd, oDS, tabname);
                msg = (type == "45" ? fix_doc_no : fix_doc_no + "  Data Saved ");
            }
            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }



            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-" });
            }
            catch { }
            return mylist;
        }
        public List<Team> aLogis_ins(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";
            //------------------------

            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-", drv_num = "";

            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 
            try
            {
                execute_cmd1(team.col1, "alter table WB_LOGIS_REC add VEHICLE_READING varchar(50)");
            }
            catch (Exception e) { }

            string save_conf_no = "-";
            string work_br = "";
            work_br = fn_seek_iname(team.col1, "", "Select AND_ENTBR from evas where username='" + team.col3.ToUpper().Trim() + "'", "AND_ENTBR");


            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            string tabname = "WB_LOGIS_REC";
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();

                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }

                oDS = new DataSet();
                oporow = null;


                oDS = fill_schema(cocd, tabname);


                for (int i = 0; i < qrlist.Length; i++)
                {

                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");
                    if (colsVal.Length <= 1)
                    {

                    }
                    else
                    {

                        string mv_branch = "", mv_type = "", mv_log_locn = "", mv_log_vehi = "", mv_log_drv = "", mv_log_rmk = "", mv_log_supv = "", mv_log_cust = "", mv_log_prev = "", mv_log_dest = "", mv_vehicle_reading = "";

                        branchcd = colsVal[0].ToString().Trim();
                        if (work_br.Length == 2)
                        {
                            branchcd = work_br;
                        }
                        type = colsVal[1].ToString().Trim();

                        mv_log_locn = colsVal[2].ToString().Trim();
                        mv_log_vehi = colsVal[3].ToString().Trim();
                        mv_log_drv = colsVal[4].ToString().Trim();
                        mv_log_rmk = colsVal[5].ToString().Trim();
                        mv_log_supv = colsVal[6].ToString().Trim();
                        mv_log_cust = colsVal[7].ToString().Trim();

                        mv_log_prev = colsVal[8].ToString().Trim();
                        if (type == "12" || type == "52" || type == "53")
                        {
                            mv_log_dest = colsVal[9].ToString().Trim();
                        }
                        try
                        {
                            drv_num = colsVal[9].ToString().Trim();
                        }
                        catch { drv_num = ""; }
                        try
                        {
                            mv_vehicle_reading = colsVal[10].ToString().Trim();
                        }
                        catch (Exception e) { mv_vehicle_reading = "0"; }
                        if (mv_vehicle_reading == "")
                        {
                            mv_vehicle_reading = "0";
                        }


                        #region Vnum Generation
                        if (i == 0)
                        {
                            int p = 0;
                            string error = "Y";
                            do
                            {
                                vchdate = DateTime.Now.ToString("dd/MM/yyyy");
                                vchnum = next_no(team.col1, branchcd, "-", "select max(vchnum)+" + p + " as max from " + tabname + " where branchcd='" + branchcd + "' and type ='" + type + "' and vchdate " + xprdRange + " ", 6, "max");
                                error = fn_chk_pk(tabname + branchcd + type + vchnum + vchdate, team.col1, branchcd, type, vchnum, vchdate, acode, "WEBAPI").Trim();
                                if (p > 10)
                                { error = "N"; throw new Exception("Test Exception"); }
                                p++;
                            }
                            while (error.Equals("Y"));
                        }
                        #endregion

                        #region Saving to Oracle in 4 series
                        oporow = oDS.Tables[0].NewRow();

                        List<Team> mylist2 = new List<Team>();
                        if (type == "11" || type == "51")
                        {
                            string check_vehicle_entry = fn_seek_iname(team.col1, branchcd, "select ent_dt||'^'||type as en_dt from WB_LOGIS_REC where branchcd='" + work_br + "' and vchdate >=to_Date('" + vchdate + "', 'dd/mm/yyyy')-5 and  trim(UPPER(VEHICLE_ID)) like UPPER('" + mv_log_vehi + "%') order by ent_dt desc", "en_dt");
                            if (check_vehicle_entry.Length > 5)
                            {
                                string xtype = check_vehicle_entry.Split('^')[1].Trim().ToString();
                                check_vehicle_entry = check_vehicle_entry.Split('^')[0].Trim().ToString();
                                if (xtype == "11" || xtype == "12" || xtype == "51" || xtype == "52")
                                {
                                    msg = "This Vehicle No. : " + mv_log_vehi + " Already Inside In Plant, So Please First Depart That Vehicle." + " --> " + "Data Not Saved";
                                    try
                                    {
                                        mylist2.Add(new Team { col1 = msg, col2 = save_conf_no, col3 = "-", col4 = "-", col5 = "-", });
                                    }
                                    catch { }
                                    return mylist2;
                                }
                            }

                            decimal vehicle_reading = 0;
                            try
                            {
                                string xxtytpe = "13";
                                if (type == "51") { xxtytpe = "53"; }
                                vehicle_reading = Convert.ToDecimal(fn_seek_iname(team.col1, branchcd, "select vehicle_reading from WB_LOGIS_REC where branchcd='" + work_br + "' AND TRIM(TYPE)='" + xxtytpe + "' and vchdate >=to_Date('" + vchdate + "', 'dd/mm/yyyy')-5 and  trim(UPPER(VEHICLE_ID)) like UPPER('" + mv_log_vehi + "%') order by ent_dt desc", "vehicle_reading"));
                            }
                            catch (Exception e) { vehicle_reading = -1; }
                            if (Convert.ToDecimal(mv_vehicle_reading) < vehicle_reading)
                            {
                                msg = "Vehicle KM Reading Should Not Be Less Than Vehicle Depart." + " --> " + "Data Not Saved";
                                try
                                {
                                    mylist2.Add(new Team { col1 = msg, col2 = save_conf_no, col3 = "-", col4 = "-", col5 = "-", });
                                }
                                catch { }
                                return mylist2;
                            }
                        }
                        if (type == "13" || type == "53")
                        {
                            decimal vehicle_reading = 0;
                            try
                            {
                                string xxtytpe = "11";
                                if (type == "53") { xxtytpe = "51"; }
                                vehicle_reading = Convert.ToDecimal(fn_seek_iname(team.col1, branchcd, "select vehicle_reading from WB_LOGIS_REC where branchcd='" + work_br + "' AND TRIM(TYPE)='" + xxtytpe + "' and vchdate >=to_Date('" + vchdate + "', 'dd/mm/yyyy')-5 and  trim(UPPER(VEHICLE_ID)) like UPPER('" + mv_log_vehi + "%') order by ent_dt desc", "vehicle_reading"));
                            }
                            catch (Exception e) { vehicle_reading = -1; }
                            if (Convert.ToDecimal(mv_vehicle_reading) < vehicle_reading)
                            {
                                msg = "Vehicle KM Reading Should Not Be Less Than Vehicle Arrive." + " --> " + "Data Not Saved";
                                try
                                {
                                    mylist2.Add(new Team { col1 = msg, col2 = save_conf_no, col3 = "-", col4 = "-", col5 = "-", });
                                }
                                catch { }
                                return mylist2;
                            }
                        }


                        string fld_split = "";
                        string my_instdt = "";
                        string my_sysdt = "";
                        fld_split = fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE('" + vchdate + "','dd/mm/yyyy')||'^'||to_char(TO_DATE('" + vchdate + "','dd/mm/yyyy'),'YYYYMMDD')||'^'||sysdate as fstr from dual", "fstr");
                        vchdate = fld_split.Split('^')[0];
                        my_instdt = fld_split.Split('^')[1];
                        my_sysdt = fld_split.Split('^')[2];

                        oporow["BRANCHCD"] = branchcd;
                        oporow["TYPE"] = type;
                        oporow["VCHNUM"] = vchnum;
                        oporow["VCHDATE"] = vchdate;

                        save_conf_no = my_instdt.Trim() + branchcd + type + vchnum;

                        oporow["GPS_LOCN"] = mv_log_locn;
                        oporow["VEHICLE_ID"] = mv_log_vehi;
                        oporow["DRIVER_ID"] = mv_log_drv;
                        oporow["REMARKS"] = mv_log_rmk;
                        oporow["LOADING_SUPV"] = mv_log_supv;
                        oporow["CUSTOMER_DTL"] = mv_log_cust;
                        oporow["PREV_VCHDTL"] = mv_log_prev;
                        oporow["CUSTOMER_DEST"] = mv_log_dest;

                        oporow["DRV_NO"] = drv_num;
                        oporow["VEHICLE_READING"] = mv_vehicle_reading;

                        oporow["ent_by"] = team.col3;
                        oporow["ent_dt"] = DateTime.Now.ToString();


                        oDS.Tables[0].Rows.Add(oporow);
                        #endregion

                    }

                }
                save_data(cocd, oDS, tabname);

            }
            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = save_conf_no, col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }
        //-------------------------------------------------------------------
        public List<Team> aREEL_stack(Team team)
        {

            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            //------------------------

            //updating the field in table for location
            //rm_lot_mode= 1 :: all reel (sgrp /mega) , 2 :: PRT_RAV ="Y" ( reel + other item ), 3 :: PRT_RAV ="N" ( NO reel + all other item)
            // api call to update a valid Lot from Reel/Lot Stacking

            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";
            string work_br = "";
            string save_conf_no = "";
            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 

            execute_cmd1(team.col1, "ALTER TABLE reelvch modify RLOCN varchar2(30) DEFAULT '-'");

            work_br = fn_seek_iname(team.col1, "", "Select AND_ENTBR from evas where username='" + team.col3.ToUpper().Trim() + "'", "AND_ENTBR");

            string reevch_ph = fn_seek_iname(team.col1.ToUpper(), "", "SELECT upper(Trim(tname)) as tname FROM tab WHERE upper(Trim(tname))='REELVCH_PH' ", "tname");
            int bc_len = 0;
            string sql_cmd = "";
            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            string tabname = "REELVCH";
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();

                for (int i = 0; i < qrlist.Length; i++)
                {

                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");
                    if (colsVal.Length <= 1)
                    {

                    }
                    else
                    {

                        string mv_branch = "", mv_type = "", mv_location = "", mv_barcodeno = "";

                        branchcd = colsVal[0].ToString().Trim();
                        if (work_br.Length == 2)
                        {
                            branchcd = work_br;
                        }
                        type = colsVal[1].ToString().Trim();
                        mv_location = colsVal[2].ToString().Trim();
                        mv_barcodeno = colsVal[3].ToString().Trim();
                        string mv_batch_ss = colsVal[4].ToString().Trim();


                        bc_len = mv_barcodeno.Length;

                        if ((rm_lot_mode == "1" || rm_lot_mode == "2") && bc_len < 18)
                        {
                            mv_barcodeno = colsVal[3].ToString().Trim() + colsVal[4].ToString().Trim();
                            sql_cmd = "update reelvch SET RLOCN = '" + mv_location + "' where branchcd='" + work_br + "' and (type like '0%' or type like '1%' or trim(type)='36')  and branchcd||trim(icode)||trim(KCLREELNO)='" + work_br + mv_barcodeno + "' and reelwin>0";
                            string msg_ss = execute_cmd1(mycocd, sql_cmd);
                            //string msg_ss = fn_seek_iname(team.col1, "", "SELECT KCLREELNO FROM reelvch where branchcd='" + work_br + "' and (type like '0%' or type like '1%' or trim(type)='36')  and branchcd||trim(icode)||trim(KCLREELNO)='" + work_br + mv_barcodeno + "' and reelwin>0", "KCLREELNO");
                            if (msg_ss == "Data Not Saved")
                            {
                                sql_cmd = "update reelvch_op SET RLOCN = '" + mv_location + "' where branchcd='" + work_br + "' and (type like '0%' or type like '1%' or trim(type)='36')  and branchcd||trim(icode)||trim(KCLREELNO)='" + work_br + mv_barcodeno + "' and reelwin>0";
                                execute_cmd1(mycocd, sql_cmd);
                            }

                            if (team.col1=="GDOT" )
                            {
                                mv_barcodeno = colsVal[3].ToString().Trim();
                                sql_cmd = "update ivoucher SET tpt_names = to_char(sysdate,'dd/mm/yyyy :hh24:mi:ss')||' - '||'" + team.col3.ToUpper().Trim() + "',BINNO ='" + mv_location + "' where branchcd='" + work_br + "' and type IN ('02','05','07') and trim(icode)='" + mv_barcodeno + "' and trim(btchno)='" + mv_batch_ss + "' and iqtyin>0";
                                execute_cmd1(mycocd, sql_cmd);
                            }

                            if (reevch_ph == "REELVCH_PH")
                            {
                                sql_cmd = "update reelvch_ph SET RLOCN = '" + mv_location + "' where branchcd='" + work_br + "' and type like '0%'  and branchcd||trim(icode)||trim(KCLREELNO)='" + work_br + mv_barcodeno + "' and reelwin>0";
                                execute_cmd1(mycocd, sql_cmd);
                            }
                           
                        }
                        else
                        {
                            mv_barcodeno = colsVal[3].ToString().Trim();
                            sql_cmd = "update ivoucher SET tpt_names = to_char(sysdate,'dd/mm/yyyy :hh24:mi:ss')||' - '||'" + team.col3.ToUpper().Trim() + "',location = substr('" + mv_location + "',1,20) where branchcd='" + work_br + "' and type like '0%' and trim(branchcd)||trim(type)||trim(vchnum)||to_char(vchdate,'yyyymmdd')||trim(icode)||rpad(trim(btchno),15,'_')='" + mv_barcodeno + "' and iqtyin>0";
                            execute_cmd1(mycocd, sql_cmd);

                        }

                        //////if (mv_barcodeno.Length > 20 && rm_lot_mode!="1")
                        //////{
                        //////    mv_barcodeno = colsVal[3].ToString().Trim();
                        //////    sql_cmd = "update ivoucher SET tpt_names = to_char(sysdate,'dd/mm/yyyy :hh24:mi:ss')||' - '||'" + team.col3.ToUpper().Trim() + "',location = substr('" + mv_location + "',1,20) where branchcd='" + work_br + "' and type like '0%' and branchcd||type||vchnum||to_char(vchdate,'yyyymmdd')||trim(icode)='" + mv_barcodeno + "' and iqtyin>0";
                        //////}
                        //////else
                        //////{
                        //////    mv_barcodeno = colsVal[3].ToString().Trim() + colsVal[4].ToString().Trim();
                        //////    sql_cmd = "update reelvch SET RLOCN = '" + mv_location + "' where branchcd='" + work_br + "' and type like '0%' and branchcd||trim(icode)||trim(KCLREELNO)='" + work_br + mv_barcodeno + "' and reelwin>0";
                        //////}
                        res = res + 1;
                    }

                }

                msg = res.ToString() + " Records " + " updated";
            }
            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = save_conf_no, col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }


        //-------------------------------------------
        public List<Team6> areel_check(Team6 team6)
        {
            //-------------------------
            Fn_set_andapp_opts(team6.col1, "N");
            //------------------------


            //rm_lot_mode= 1 :: all reel (sgrp /mega) , 2 :: PRT_RAV ="Y" ( reel + other item ), 3 :: PRT_RAV ="N" ( NO reel + all other item)
            // api call to verify a valid reel from Reel/Lot physical
            // api call to verify a valid Lot from Reel/Lot Stacking

            string err = "", results = "";
            string Data_found = "N";
            int bc_len = 0;
            string[] qrlist;
            string work_br;
            string[] scodelist;
            string ReturnVal = "";
            int cnt = 0;
            int dtrows = 0;


            work_br = fn_seek_iname(team6.col1, "", "Select AND_ENTBR from evas where username='" + team6.col3.ToUpper().Trim() + "'", "AND_ENTBR");
            try
            {
                mq = "-";
                scodelist = Regex.Split(team6.col2, team6.col5);
                cnt = scodelist.Length;
                for (int i = 0; i < cnt; i++)
                {
                    if (mq.Equals("-")) mq = "'" + scodelist[i].ToString().Trim() + "'";
                    else mq = mq + ",'" + scodelist[i].ToString().Trim() + "'";

                }

                branchwise(team6.col1, "", team6.col5);



                string R40 = fn_seek_iname(team6.col1, "", "SELECT ENABLE_YN FROM CONTROLS WHERE ID='R40' AND ENABLE_YN='Y' ", "ENABLE_YN");
                string b51 = fn_seek_iname(team6.col1, "", "SELECT upper(Trim(params)) as params FROM CONTROLS WHERE ID='B51'", "params");
                if (b51.Length < 10)
                {
                    b51 = fn_seek_iname(team6.col1, "", "SELECT upper(Trim(params)) as params FROM CONTROLS WHERE ID='R02'", "params");
                }
                if (R40 == "Y")
                {
                    R40 = "REELVIEW_" + work_br;
                }
                else
                {
                    R40 = "REELVCH";
                }


                bc_len = mq.Length;

                if ((rm_lot_mode == "1" || rm_lot_mode == "2") && bc_len < 18)
                {
                    if (team6.col1 == "STRU")
                    {
                        string q1 = "select trim(icode) icode, trim(kclreelno) as kclreelno, TRIM(nvl(coreelno,'-')) as coreelno, sum(nvl(reelwin,0)) as reelwin, sum(nvl(reelwout,0)) as reelwout from " + R40 + " where branchcd='" + work_br + "' and replace(trim(kclreelno),'-','') in (" + mq + ")  group by trim(icode),trim(kclreelno),TRIM(nvl(coreelno,'-'))";
                        string q2 = "select trim(icode) icode, trim(kclreelno) as kclreelno, TRIM(nvl(coreelno,'-')) as coreelno, sum(nvl(reelwin,0)) as reelwin, sum(nvl(reelwout,0)) as reelwout from REELVCH_PH where branchcd='" + work_br + "' and replace(trim(kclreelno),'-','') in (" + mq + ")  group by trim(icode),trim(kclreelno),TRIM(nvl(coreelno,'-'))";
                        string q3 = q1 + " union all " + q2;
                        Squery = "select 'Success' as col1,trim(a.icode) as col2,trim(a.kclreelno) as col3,replace(trim(b.iname),'-','') as col4,TRIM(nvl(a.coreelno,'-')) as col5,sum(nvl(reelwin,0))-sum(nvl(reelwout,0)) as col6 from ( " + q3 + " )a, item b where trim(a.icode) like '07%' and trim(a.icode)=trim(B.icode) group by trim(a.icode),trim(a.kclreelno),replace(trim(b.iname),'-',''),TRIM(nvl(a.coreelno,'-')) having sum(nvl(reelwin,0))-sum(nvl(reelwout,0)) >0";
                    }
                    else
                    {
                        Squery = "SELECT 'Success' as col1,trim(a.icode) as col2,trim(a.kclreelno) as col3,replace(trim(b.iname),'-','') as col4,TRIM(nvl(a.coreelno,'-')) as col5,sum(nvl(reelwin,0))-sum(nvl(reelwout,0)) as col6 from " + R40 + " a,item b where trim(a.icode)=trim(B.icode) and a.branchcd='" + work_br + "' and replace(trim(a.kclreelno),'-','') in (" + mq + ")  group by trim(a.icode),trim(a.kclreelno),replace(trim(b.iname),'-',''),TRIM(nvl(a.coreelno,'-')) having sum(nvl(reelwin,0))-sum(nvl(reelwout,0)) >0 ";
                    }

                }
                else
                {
                    Squery = "SELECT 'Success' as col1,trim(a.icode) as col2,trim(a.btchno) as col3,replace(trim(b.iname),'-','') as col4,trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'yyyymmdd')||trim(a.icode)||rpad(trim(A.btchno),15,'_') as col5,sum(nvl(iqtyin,0))-sum(nvl(iqtyout,0)) as col6 from ivoucher a,item b where trim(a.icode)=trim(B.icode) and a.branchcd='" + work_br + "' and trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'yyyymmdd')||trim(a.icode)||rpad(trim(A.btchno),15,'_')='" + mq.Replace("'", "").Substring(0, 41) + "' group by trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'yyyymmdd')||trim(a.icode)||rpad(trim(A.btchno),15,'_'),trim(a.icode),trim(a.btchno),replace(trim(b.iname),'-',''),TRIM(nvl(a.icode,'-')) having sum(nvl(iqtyin,0))-sum(nvl(iqtyout,0))>0";
                    String Squer = "select * from evas";
                }
                if (team6.col1 == "ARUB")
                {

                    Squery = "SELECT 'Success' as col1,trim(a.icode) as col2,trim(a.kclreelno) as col3,replace(trim(b.iname),'-','') as col4,TRIM(nvl(a.coreelno,'-')) as col5,sum(nvl(reelwin,0))-sum(nvl(reelwout,0)) as col6 from " + R40 + " a,item b where trim(a.icode)=trim(B.icode) and a.branchcd='" + work_br + "' and VCHDATE>=TO_DATe('" + b51 + "','DD/MM/YYYY') and replace(trim(a.kclreelno),'-','') in (" + mq + ")  group by trim(a.icode),trim(a.kclreelno),replace(trim(b.iname),'-',''),TRIM(nvl(a.coreelno,'-')) having sum(nvl(reelwin,0))-sum(nvl(reelwout,0))>0 ";
                }


                dt = new DataTable();
                dt = getdata(team6.col1, "-", Squery);


                if (dt.Rows.Count > 0) ReturnVal = dt.Rows[0][0].ToString();
                List<Team6> list = new List<Team6>();

                if (1 == 2)
                {

                }
                else
                {
                    list = (from DataRow row in dt.Rows
                            select new Team6()
                            {
                                col1 = row["col1"].ToString(),
                                col2 = row["col2"].ToString(),
                                col3 = row["col3"].ToString(),
                                col4 = row["col4"].ToString(),
                                col5 = row["col5"].ToString(),
                                col6 = row["col6"].ToString(),
                            }).ToList();

                    dtrows = dt.Rows.Count;
                    if (dtrows <= 0)
                    {
                        list.Add(new Team6 { col1 = "Failure", col2 = team6.col2, col3 = "-", col4 = "-", col5 = "-", col6 = "Record not found", });
                    }

                }
                return list;
            }
            catch (Exception e)
            {
                err = e.Message.ToString();
            }
            List<Team6> mylist = new List<Team6>();
            mylist.Add(new Team6 { col1 = results, col2 = "-", col3 = "-", col4 = "-", col5 = "-", col6 = err, });
            return mylist;
        }


        public List<Team6> areel_FGRcheck(Team6 team6)
        {
            //-------------------------
            Fn_set_andapp_opts(team6.col1, "N");
            //------------------------


            //rm_lot_mode= 1 :: all reel (sgrp /mega) , 2 :: PRT_RAV ="Y" ( reel + other item ), 3 :: PRT_RAV ="N" ( NO reel + all other item)
            // api call to verify a valid reel from Reel/Lot physical
            // api call to verify a valid Lot from Reel/Lot Stacking

            string err = "", results = "";
            string Data_found = "N";
            int bc_len = 0;
            string[] qrlist;
            string work_br;
            string[] scodelist;
            string ReturnVal = "";
            int cnt = 0;
            int dtrows = 0;

            string xdate = fn_seek_iname(team6.col1, "00", "Select to_char(sysdate,'DD/MM/YYYY') as fstr from dual", "fstr");

            work_br = fn_seek_iname(team6.col1, "", "Select AND_ENTBR from evas where username='" + team6.col3.ToUpper().Trim() + "'", "AND_ENTBR");
            try
            {
                mq = "-";
                scodelist = Regex.Split(team6.col2, team6.col5);
                cnt = scodelist.Length;
                for (int i = 0; i < cnt; i++)
                {
                    if (mq.Equals("-")) mq = "'" + scodelist[i].ToString().Trim() + "'";
                    else mq = mq + ",'" + scodelist[i].ToString().Trim() + "'";

                }

                branchwise(team6.col1, "", team6.col5);



                string R40 = fn_seek_iname(team6.col1, "", "SELECT ENABLE_YN FROM CONTROLS WHERE ID='R40' AND ENABLE_YN='Y' ", "ENABLE_YN");
                if (R40 == "Y")
                {
                    R40 = "REELVIEW_" + work_br;
                }
                else
                {
                    R40 = "REELVCH";
                }


                bc_len = mq.Length;

                List<Team6> list2 = new List<Team6>();
                if (team6.col1 == "MVIN")
                {
                    if (team6.col6 == "aphystk_ins") // Only Check for Physical Verification in MVIN
                    {

                        string sql_cmd = "select count(*) as xcount from ivoucher where branchcd='" + work_br + "' and type like '16%' and trim(invno)=substr(" + mq.Trim() + ",21,10) and store='Y' and NVL(TRIM(TPT_NAMES), '-') != '-' and iqtyin>0";
                        //int xcount = Convert.ToInt32(fn_seek_iname(team6.col1, "", sql_cmd, "xcount"));

                        //if (xcount > 0)
                        //{
                        //    list2 = new List<Team6>();
                        //    list2.Add(new Team6 { col1 = "Failure", col2 = "Sorry, This Items You Already Scanned In FG Received!", col3 = "-", col4 = "-", col5 = "-", col6 = "Sorry, This Items You Already Scanned In FG Received!", }); ;
                        //    return list2;
                        //}


                        sql_cmd = "select count(*) as xcount  from WB_PHY_REC where branchcd='" + work_br + "' and trim(type)='FP' and to_char(vchdate,'dd/mm/yyyy')='" + xdate + "' and trim(batch_no)=" + mq.Trim() + "";
                        //xcount = Convert.ToInt32(fn_seek_iname(team6.col1, "", sql_cmd, "xcount"));

                        int xcount = Convert.ToInt32(fn_seek_iname(team6.col1, "", sql_cmd, "xcount"));

                        if (xcount > 0)
                        {
                            list2 = new List<Team6>();
                            list2.Add(new Team6 { col1 = "Failure", col2 = "Sorry, For This Item Physical Verification Is Already Done!", col3 = "-", col4 = "-", col5 = "-", col6 = "Sorry, This Item You Already Scanned Before!", }); ;
                            return list2;
                        }
                    }

                    Squery = "select icode,btchno,sum(iqtyin) as tot from (select trim(icode) As icode,trim(invno) as btchno,iqtyin from ivoucher where branchcd='" + work_br + "' and type='16' and trim(invno)=substr(" + mq.Trim() + ",21,10) union all select trim(icode) As icode,trim(invno) as btchno,-1*qtysupp from despatch where branchcd='" + work_br + "' and substr(type,1,1)='4' and trim(no_bdls)=substr(" + mq.Trim() + ",21,10) ) group by icode,btchno having sum(iqtyin)>0 ";

                    Squery = "SELECT 'Success' as col1,trim(a.icode) as col2,trim(a.btchno) as col3,replace(trim(b.iname),'-','') as col4,trim(A.btchno) as col5,a.tot as col6 from (" + Squery + ") a,item b where trim(a.icode)=trim(B.icode)  ";
                }
                else
                {
                    Squery = "SELECT 'Success' as col1,trim(a.icode) as col2,trim(a.btchno) as col3,replace(trim(b.iname),'-','') as col4,trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'yyyymmdd')||trim(a.icode)||rpad(trim(A.btchno),15,'_') as col5,sum(nvl(iqtyin,0))-sum(nvl(iqtyout,0)) as col6 from ivoucher a,item b where trim(a.icode)=trim(B.icode) and a.branchcd='" + work_br + "' and trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'yyyymmdd')||trim(a.icode)||rpad(trim(A.btchno),15,'_')='" + mq.Replace("'", "").Substring(0, 41) + "' group by trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'yyyymmdd')||trim(a.icode)||rpad(trim(A.btchno),15,'_'),trim(a.icode),trim(a.btchno),replace(trim(b.iname),'-',''),TRIM(nvl(a.icode,'-')) ";
                }


                dt = new DataTable();
                dt = getdata(team6.col1, "-", Squery);


                if (dt.Rows.Count > 0) ReturnVal = dt.Rows[0][0].ToString();
                List<Team6> list = new List<Team6>();

                if (1 == 2)
                {

                }
                else
                {
                    list = (from DataRow row in dt.Rows
                            select new Team6()
                            {
                                col1 = row["col1"].ToString(),
                                col2 = row["col2"].ToString(),
                                col3 = row["col3"].ToString(),
                                col4 = row["col4"].ToString(),
                                col5 = row["col5"].ToString(),
                                col6 = row["col6"].ToString(),
                            }).ToList();

                    dtrows = dt.Rows.Count;
                    if (dtrows <= 0)
                    {
                        list.Add(new Team6 { col1 = "Failure", col2 = team6.col2, col3 = "-", col4 = "-", col5 = "-", col6 = "Record not found", });
                    }

                }
                return list;
                //}
            }
            catch (Exception e)
            {
                err = e.Message.ToString();

            }
            List<Team6> mylist = new List<Team6>();
            mylist.Add(new Team6 { col1 = results, col2 = "-", col3 = "-", col4 = "-", col5 = "-", col6 = err, });
            return mylist;
        }


        public List<Team6> areel_jccheck(Team6 team6)
        {
            //-------------------------
            Fn_set_andapp_opts(team6.col1, "N");
            //------------------------

            // check reel at time of issue against job card no.
            string err = "", results = "";
            string Data_found = "N";
            string[] qrlist;
            string work_br;
            string[] scodelist;
            string ReturnVal = "";
            int cnt = 0;
            List<Team6> list = new List<Team6>();
            int dtrows = 0;
            work_br = fn_seek_iname(team6.col1, "", "Select AND_ENTBR from evas where username='" + team6.col3.ToUpper().Trim() + "'", "AND_ENTBR");
            try
            {
                mq = "-";
                scodelist = Regex.Split(team6.col2, team6.col5);
                cnt = scodelist.Length;
                for (int i = 0; i < cnt; i++)
                {
                    if (mq.Equals("-")) mq = "'" + scodelist[i].ToString().Trim() + "'";
                    else mq = mq + ",'" + scodelist[i].ToString().Trim() + "'";

                }

                branchwise(team6.col1, "", team6.col5);




                string R40 = fn_seek_iname(team6.col1, "", "SELECT ENABLE_YN FROM CONTROLS WHERE ID='R40' AND ENABLE_YN='Y' ", "ENABLE_YN");
                if (R40 == "Y")
                {
                    R40 = "REELVIEW_" + work_br;
                }
                else
                {
                    R40 = "REELVCH";
                }


                dt = new DataTable();
                string O87 = fn_seek_iname(team6.col1, "", "SELECT trim(upper(ENABLE_YN)) as ENABLE_YN FROM CONTROLS WHERE ID='O87'  ", "ENABLE_YN");

                if (O87 == "Y")
                {
                    //issue item only given in Job card

                    Squery = "SELECT 'Success' as col1,trim(a.icode) as col2,trim(a.kclreelno) as col3,replace(trim(b.iname),'-','') as col4,TRIM(nvl(a.coreelno,'-')) as col5,sum(nvl(reelwin,0))-sum(nvl(reelwout,0)) as col6 from " + R40 + " a,item b where trim(a.icode)=trim(B.icode) and a.branchcd='" + work_br + "' and replace(trim(a.kclreelno),'-','') in (" + mq + ") and trim(b.icode) in (select trim(col9) as icode from costestimate where branchcd='" + work_br + "' and branchcd||type||vchnum||to_char(vchdate,'dd/mm/yyyy')='" + team6.col6 + "' and length(Trim(col9))>=8 UNION ALL select trim(ICODE) as icode from MULTIVCH where branchcd='" + work_br + "' and branchcd||type||vchnum||to_char(vchdate,'dd/mm/yyyy')='" + team6.col6 + "' ) group by trim(a.icode),trim(a.kclreelno),replace(trim(b.iname),'-',''),TRIM(nvl(a.coreelno,'-')) having  sum(nvl(reelwin,0))-sum(nvl(reelwout,0))>0 ";
                }
                else
                {
                    //issue any item from reel stock
                    Squery = "SELECT 'Success' as col1,trim(a.icode) as col2,trim(a.kclreelno) as col3,replace(trim(b.iname),'-','') as col4,TRIM(nvl(a.coreelno,'-')) as col5,sum(nvl(reelwin,0))-sum(nvl(reelwout,0)) as col6 from " + R40 + " a,item b where trim(a.icode)=trim(B.icode) and a.branchcd='" + work_br + "' and replace(trim(a.kclreelno),'-','') in (" + mq + ")  group by trim(a.icode),trim(a.kclreelno),replace(trim(b.iname),'-',''),TRIM(nvl(a.coreelno,'-')) having  sum(nvl(reelwin,0))-sum(nvl(reelwout,0))>0 ";
                }

                //if (team6.col1 == "MEGH")
                //{
                //    string qq = "select max(oprate1)||'^'||max(oprate3)||'^'||min(oprate1)||'^'||min(oprate3) as oprate_min_max from item where trim(icode) in (select distinct trim(col9) as icode from costestimate where branchcd||type||vchnum||to_char(vchdate,'dd/mm/yyyy')='" + team6.col6 + "' and  nvl(trim(col9), '-') !='-') ";
                //    string oprate_range = fn_seek_iname(team6.col1, "", qq, "oprate_min_max");
                //    string oprate1_max = oprate_range.Split('^')[0];
                //    string oprate3_max = oprate_range.Split('^')[1];
                //    string oprate1_min = oprate_range.Split('^')[2];
                //    string oprate3_min = oprate_range.Split('^')[3];


                //    Squery = "select  'Success' as col1,trim(a.icode) as col2,trim(a.kclreelno) as col3,replace(trim(b.iname),'-','') as col4, a.coreelno as col5,a.bal as col6 from (select icode, kclreelno, TRIM(nvl(coreelno,'-')) as coreelno, sum(nvl(reelwin,0))-sum(nvl(reelwout,0)) as bal from " + R40 + " where branchcd='" + work_br + "' and replace(trim(kclreelno),'-','') in (" + mq + ") group by icode, kclreelno, coreelno) a, item b where a.icode=b.icode and trim(b.oprate1) between " + oprate1_min + " and  " + oprate1_max + " and trim(b.oprate3) between " + oprate3_min + " and  " + oprate3_max + "";
                //    //Squery = "SELECT 'Success' as col1,trim(a.icode) as col2,trim(a.kclreelno) as col3,replace(trim(b.iname),'-','') as col4,TRIM(nvl(a.coreelno,'-')) as col5,sum(nvl(reelwin,0))-sum(nvl(reelwout,0)) as col6 from " + R40 + " a,item b where trim(a.icode)=trim(B.icode) and a.branchcd='" + work_br + "' and replace(trim(a.kclreelno),'-','') in (" + mq + ") and trim(b.icode) in (select trim(col9) as icode from costestimate where branchcd='" + work_br + "' and branchcd||type||vchnum||to_char(vchdate,'dd/mm/yyyy')='" + team6.col6 + "' and length(Trim(col9))>=8 UNION ALL select trim(ICODE) as icode from MULTIVCH where branchcd='" + work_br + "' and branchcd||type||vchnum||to_char(vchdate,'dd/mm/yyyy')='" + team6.col6 + "' ) group by trim(a.icode),trim(a.kclreelno),replace(trim(b.iname),'-',''),TRIM(nvl(a.coreelno,'-')) having  sum(nvl(reelwin,0))-sum(nvl(reelwout,0))>0 ";
                //}

                dt = getdata(team6.col1, "-", Squery);
                if (dt.Rows.Count > 0) ReturnVal = dt.Rows[0][0].ToString();
                if (1 == 2)
                {
                }
                else
                {
                    list = (from DataRow row in dt.Rows
                            select new Team6()
                            {
                                col1 = row["col1"].ToString(),
                                col2 = row["col2"].ToString(),
                                col3 = row["col3"].ToString(),
                                col4 = row["col4"].ToString(),
                                col5 = row["col5"].ToString(),
                                col6 = row["col6"].ToString(),
                            }).ToList();
                    dtrows = dt.Rows.Count;
                    if (dtrows <= 0)
                    {
                        list.Add(new Team6 { col1 = "Failure", col2 = team6.col2, col3 = "-", col4 = "-", col5 = "-", col6 = "Stock Not Sufficient/Item Code Not in Job Card", });
                    }

                }
                return list;
                //}
            }
            catch (Exception e)
            {
                err = e.Message.ToString();

            }
            List<Team6> mylist = new List<Team6>();
            mylist.Add(new Team6 { col1 = results, col2 = "-", col3 = "-", col4 = "-", col5 = "-", col6 = err, });
            return list;
        }

        //-------------------------------------------

        public List<Team6> areel_retcheck(Team6 team6)
        {
            //-------------------------
            Fn_set_andapp_opts(team6.col1, "N");
            //------------------------

            // check reel at time of return against job card no.
            string err = "", results = "";
            string Data_found = "N";
            string[] qrlist;
            string work_br;
            string last_tr_type = "";
            string[] scodelist;
            string ReturnVal = "";
            int cnt = 0;
            int dtrows = 0;
            string job_no = "";
            work_br = fn_seek_iname(team6.col1, "", "Select AND_ENTBR from evas where username='" + team6.col3.ToUpper().Trim() + "'", "AND_ENTBR");

            try
            {
                mq = "-";
                scodelist = Regex.Split(team6.col2, team6.col5);
                job_no = team6.col6.Trim().Substring(4, 6).ToString();//updated by shivam
                cnt = scodelist.Length;
                for (int i = 0; i < cnt; i++)
                {
                    if (mq.Equals("-")) mq = "'" + scodelist[i].ToString().Trim() + "'";
                    else mq = mq + ",'" + scodelist[i].ToString().Trim() + "'";

                }

                branchwise(team6.col1, "", team6.col5);

                dt = new DataTable();

                string O87 = fn_seek_iname(team6.col1, "", "SELECT ENABLE_YN FROM CONTROLS WHERE ID='O87'  ", "ENABLE_YN");

                string R40 = fn_seek_iname(team6.col1, "", "SELECT ENABLE_YN FROM CONTROLS WHERE ID='R40' AND ENABLE_YN='Y' ", "ENABLE_YN");

                string st_date = fn_seek_iname(team6.col1, "", "SELECT PARAMS FROM CONTROLS WHERE ID='R40'", "PARAMS");
                if (R40 == "Y")
                {
                    R40 = "REELVIEW_" + work_br;
                }
                else
                {
                    R40 = "REELVCH";
                }


                string SQuery = "select branchcd,icode,kclreelno,sum(reelwin) as reelwin,sum(reelwout) as reelwout,sum(reelwin)-sum(reelwout) as closing from (select branchcd,trim(icode) as icode,trim(kclreelno) as kclreelno ,reelwout as reelwin,0 as reelwout from REELVch where branchcd='" + work_br + "' and type like '3%' and vchdate > to_date('" + st_date + "', 'dd/mm/yyyy') union all select branchcd,trim(icode) as icode,trim(kclreelno) as kclreelno,0 as reelwin,reelwin as reelwout from REELVch where branchcd='" + work_br + "' and type like '1%' and vchdate > to_date('" + st_date + "', 'dd/mm/yyyy') union all select branchcd,trim(icode) as icode,trim(col6) as  kclreelno,0 as reelwin,is_number(col4) as reelwout from costestimate where branchcd='" + work_br + "' and type like '25%' and vchdate > to_date('" + st_date + "', 'dd/mm/yyyy')) where kclreelno='" + team6.col2.Trim() + "' group by branchcd,icode,kclreelno";
                string reel_stock = fn_seek_iname(team6.col1, "", SQuery, "closing");

                if (O87 == "Y")
                {
                    if (team6.col1.Trim() == "NATP")
                    {
                        mq = "select * from (SELECT distinct 'Success' as col1,trim(a.icode) as col2,trim(a.kclreelno) as col3,replace(trim(b.iname),'-','') as col4,a.type as col5," + reel_stock + " as col6,to_char(c.ent_dt,'yyyymmdd :hh24:mi:ss') as col7 from " + R40 + " a,item b,ivoucher c where a.branchcd||a.type||a.vchnum||to_char(a.vchdate,'dd/mm/yyyy')||trim(A.icode)=c.branchcd||c.type||c.vchnum||to_char(c.vchdate,'dd/mm/yyyy')||trim(c.icode) and trim(a.icode)=trim(B.icode) and a.branchcd='" + work_br + "' and a.type like '%' and replace(trim(a.kclreelno),'-','') in (" + mq + ")  order by to_char(c.ent_dt,'yyyymmdd :hh24:mi:ss') desc) where rownum<2 ";  //updated by shivam   ==> job_no compared and reel_issue qty setted in col6
                    }
                    else
                    {
                        // mq = "select * from (SELECT distinct 'Success' as col1,trim(a.icode) as col2,trim(a.kclreelno) as col3,replace(trim(b.iname),'-','') as col4,a.type as col5,0 as col6,to_char(c.ent_dt,'yyyymmdd :hh24:mi:ss') as col7 from " + R40 + " a,item b,ivoucher c where a.branchcd||a.type||a.vchnum||to_char(a.vchdate,'dd/mm/yyyy')||trim(A.icode)=c.branchcd||c.type||c.vchnum||to_char(c.vchdate,'dd/mm/yyyy')||trim(c.icode) and trim(a.icode)=trim(B.icode) and a.branchcd='" + work_br + "' and a.type like '%' and replace(trim(a.kclreelno),'-','') in (" + mq + ") and trim(b.icode) in (select trim(col9) as icode from costestimate where branchcd='" + work_br + "' and branchcd||type||vchnum||to_char(vchdate,'dd/mm/yyyy')='" + team6.col6 + "' and length(Trim(col9))>=8 UNION ALL select trim(ICODE) as icode from MULTIVCH where branchcd='" + work_br + "' and branchcd||type||vchnum||to_char(vchdate,'dd/mm/yyyy')='" + team6.col6 + "') order by to_char(c.ent_dt,'yyyymmdd :hh24:mi:ss') desc) where rownum<2 ";
                        mq = "select * from (SELECT distinct 'Success' as col1,trim(a.icode) as col2,trim(a.kclreelno) as col3,replace(trim(b.iname),'-','') as col4,a.type as col5," + reel_stock + " as col6,to_char(c.ent_dt,'yyyymmdd :hh24:mi:ss') as col7 from " + R40 + " a,item b,ivoucher c where a.branchcd||a.type||a.vchnum||to_char(a.vchdate,'dd/mm/yyyy')||trim(A.icode)=c.branchcd||c.type||c.vchnum||to_char(c.vchdate,'dd/mm/yyyy')||trim(c.icode) and trim(a.icode)=trim(B.icode) and a.branchcd='" + work_br + "' and a.type like '%' and replace(trim(a.kclreelno),'-','') in (" + mq + ") and trim(b.icode) in (select trim(col9) as icode from costestimate where branchcd='" + work_br + "' and branchcd||type||vchnum||to_char(vchdate,'dd/mm/yyyy')='" + team6.col6 + "' and length(Trim(col9))>=8 UNION ALL select trim(ICODE) as icode from MULTIVCH where branchcd='" + work_br + "' and branchcd||type||vchnum||to_char(vchdate,'dd/mm/yyyy')='" + team6.col6 + "') order by to_char(c.ent_dt,'yyyymmdd :hh24:mi:ss') desc) where rownum<2 ";
                    }
                }
                else
                {
                    //mq = "select * from (SELECT distinct 'Success' as col1,trim(a.icode) as col2,trim(a.kclreelno) as col3,replace(trim(b.iname),'-','') as col4,a.type as col5,0 as col6,to_char(c.ent_dt,'yyyymmdd :hh24:mi:ss') as col7 from " + R40 + " a,item b,ivoucher c where a.branchcd||a.type||a.vchnum||to_char(a.vchdate,'dd/mm/yyyy')||trim(A.icode)=c.branchcd||c.type||c.vchnum||to_char(c.vchdate,'dd/mm/yyyy')||trim(c.icode) and trim(a.icode)=trim(B.icode) and a.branchcd='" + work_br + "' and a.type like '%' and replace(trim(a.kclreelno),'-','') in (" + mq + ") order by to_char(c.ent_dt,'yyyymmdd :hh24:mi:ss') desc) where rownum<2 ";
                    if (team6.col1.Trim() == "NATP")
                    {
                        mq = "select * from (SELECT distinct 'Success' as col1,trim(a.icode) as col2,trim(a.kclreelno) as col3,replace(trim(b.iname),'-','') as col4,a.type as col5," + reel_stock + " as col6,to_char(c.ent_dt,'yyyymmdd :hh24:mi:ss') as col7 from " + R40 + " a,item b,ivoucher c where a.branchcd||a.type||a.vchnum||to_char(a.vchdate,'dd/mm/yyyy')||trim(A.icode)=c.branchcd||c.type||c.vchnum||to_char(c.vchdate,'dd/mm/yyyy')||trim(c.icode) and trim(a.icode)=trim(B.icode) and a.branchcd='" + work_br + "' and a.type like '%' and replace(trim(a.kclreelno),'-','') in (" + mq + ")  order by to_char(c.ent_dt,'yyyymmdd :hh24:mi:ss') desc) where rownum<2 ";  //updated by shivam   ==> job_no compared and reel_issue qty setted in col6
                    }
                    else
                    {
                        mq = "select * from (SELECT distinct 'Success' as col1,trim(a.icode) as col2,trim(a.kclreelno) as col3,replace(trim(b.iname),'-','') as col4,a.type as col5," + reel_stock + " as col6,to_char(c.ent_dt,'yyyymmdd :hh24:mi:ss') as col7 from " + R40 + " a,item b,ivoucher c where a.branchcd||a.type||a.vchnum||to_char(a.vchdate,'dd/mm/yyyy')||trim(A.icode)=c.branchcd||c.type||c.vchnum||to_char(c.vchdate,'dd/mm/yyyy')||trim(c.icode) and trim(a.icode)=trim(B.icode) and a.branchcd='" + work_br + "' and a.type like '%' and replace(trim(a.kclreelno),'-','') in (" + mq + ") and trim(a.JOB_NO)='" + job_no + "' order by to_char(c.ent_dt,'yyyymmdd :hh24:mi:ss') desc) where rownum<2 ";  //updated by shivam   ==> job_no compared and reel_issue qty setted in col6
                    }
                }


                dt = getdata(team6.col1, "-", mq);

                if (dt.Rows.Count > 0) ReturnVal = dt.Rows[0][0].ToString();



                List<Team6> list = new List<Team6>();

                if (1 == 2)
                {

                }
                else
                {


                    list = (from DataRow row in dt.Rows
                            select new Team6()
                            {
                                col1 = row["col1"].ToString(),
                                col2 = row["col2"].ToString(),
                                col3 = row["col3"].ToString(),
                                col4 = row["col4"].ToString(),
                                col5 = row["col5"].ToString(),
                                col6 = row["col6"].ToString(),

                            }).ToList();

                    dtrows = dt.Rows.Count;
                    if (dtrows > 0)
                    {
                        last_tr_type = dt.Rows[0]["col5"].ToString();
                    }

                    if (dtrows <= 0)
                    {
                        list = new List<Team6>();
                        list.Add(new Team6 { col1 = "Failure", col2 = team6.col2, col3 = "-", col4 = "-", col5 = "-", col6 = "Reel Not Issued against This job", });
                    }
                    if (last_tr_type == "11")
                    {
                        list = new List<Team6>();
                        list.Add(new Team6 { col1 = "Failure", col2 = team6.col2, col3 = "-", col4 = "-", col5 = "-", col6 = "Last Entry is Not a Issue Entry", });
                    }
                }
                return list;
                //}
            }
            catch (Exception e)
            {
                err = e.Message.ToString();

            }
            List<Team6> mylist = new List<Team6>();
            mylist.Add(new Team6 { col1 = results, col2 = "-", col3 = "-", col4 = "-", col5 = "-", col6 = err, });
            return mylist;
        }


        //-------------------------------------------
        public List<Team6> aNJreel_jccheck(Team6 team6)
        {
            //-------------------------
            Fn_set_andapp_opts(team6.col1, "N");
            //------------------------

            string b50 = fn_seek_iname(team6.col1, "", "SELECT upper(Trim(params)) as params FROM CONTROLS WHERE ID='B50'", "params");
            string b51 = fn_seek_iname(team6.col1, "", "SELECT upper(Trim(params)) as params FROM CONTROLS WHERE ID='B51'", "params");
            if (b51.Length < 10)
            {
                b51 = fn_seek_iname(team6.col1, "", "SELECT upper(Trim(params)) as params FROM CONTROLS WHERE ID='R02'", "params");
            }



            //rm_lot_mode= 1 :: all reel (sgrp /mega) , 2 :: PRT_RAV ="Y" ( reel + other item ), 3 :: PRT_RAV ="N" ( NO reel + all other item)
            // api call to verify a valid reel from Reel/Lot physical stock to be >0
            // api call to verify a valid Lot from Reel/Lot Stacking stock to be >0

            string err = "", results = "";
            string Data_found = "N";
            int bc_len = 0;
            string[] qrlist;
            string work_br;
            string[] scodelist;
            string ReturnVal = "";
            int cnt = 0;
            List<Team6> mylist = new List<Team6>();



            work_br = fn_seek_iname(team6.col1, "", "Select AND_ENTBR from evas where username='" + team6.col3.ToUpper().Trim() + "'", "AND_ENTBR");
            string mlotstkdt = fn_seek_iname(team6.col1, "", "select lotstkdt from type where id='B' and type1='" + work_br + "'", "lotstkdt");

            int dtrows = 0;

            try
            {
                mq = "-";
                scodelist = Regex.Split(team6.col2, team6.col5);
                cnt = scodelist.Length;
                for (int i = 0; i < cnt; i++)
                {
                    if (mq.Equals("-")) mq = "'" + scodelist[i].ToString().Trim() + "'";
                    else mq = mq + ",'" + scodelist[i].ToString().Trim() + "'";

                }

                string R40 = fn_seek_iname(team6.col1, "", "SELECT ENABLE_YN FROM CONTROLS WHERE ID='R40' AND ENABLE_YN='Y' ", "ENABLE_YN");
                if (R40 == "Y")
                {
                    R40 = "REELVIEW_" + work_br;
                }
                else
                {
                    R40 = "REELVCH";
                }


                bc_len = mq.Length;

                if ((rm_lot_mode == "1" || rm_lot_mode == "2") && bc_len < 18)
                {
                    if (team6.col6.Substring(0, 1) == "1")
                    {
                        Squery = "SELECT 'Success' as col1,trim(a.icode) as col2,trim(a.kclreelno) as col3,replace(trim(b.iname),'-','') as col4,TRIM(nvl(a.coreelno,'-')) as col5,sum(nvl(reelwout,0))-sum(nvl(reelwin,0)) as col6 from " + R40 + " a,item b where substr(a.type,1,1) in ('1','3') and trim(a.icode)=trim(B.icode) and a.branchcd='" + work_br + "' and replace(trim(a.kclreelno),'-','') in (" + mq + ")  group by trim(a.icode),trim(a.kclreelno),replace(trim(b.iname),'-',''),TRIM(nvl(a.coreelno,'-')) having sum(nvl(reelwout,0))-sum(nvl(reelwin,0))>0 ";
                    }
                    else
                    {
                        Squery = "SELECT 'Success' as col1,trim(a.icode) as col2,trim(a.kclreelno) as col3,replace(trim(b.iname),'-','') as col4,TRIM(nvl(a.coreelno,'-')) as col5,sum(nvl(reelwin,0))-sum(nvl(reelwout,0)) as col6 from " + R40 + " a,item b where trim(a.icode)=trim(B.icode) and a.branchcd='" + work_br + "' and replace(trim(a.kclreelno),'-','') in (" + mq + ")  group by trim(a.icode),trim(a.kclreelno),replace(trim(b.iname),'-',''),TRIM(nvl(a.coreelno,'-')) having sum(nvl(reelwin,0))-sum(nvl(reelwout,0))>0 ";
                    }

                    if (team6.col1 == "ARUB")
                    {

                        Squery = "SELECT 'Success' as col1,trim(a.icode) as col2,trim(a.kclreelno) as col3,replace(trim(b.iname),'-','') as col4,TRIM(nvl(a.coreelno,'-')) as col5,sum(nvl(reelwin,0))-sum(nvl(reelwout,0)) as col6 from " + R40 + " a,item b where trim(a.icode)=trim(B.icode) and a.branchcd='" + work_br + "' and VCHDATE>=TO_DATe('" + b51 + "','DD/MM/YYYY') and replace(trim(a.kclreelno),'-','') in (" + mq + ")  group by trim(a.icode),trim(a.kclreelno),replace(trim(b.iname),'-',''),TRIM(nvl(a.coreelno,'-')) having sum(nvl(reelwin,0))-sum(nvl(reelwout,0))>0 ";
                    }


                }
                else
                {
                    if (team6.col6.Substring(0, 1) == "1")
                    {
                        Squery = "SELECT 'Success' as col1,trim(a.icode) as col2,trim(a.btchno) as col3,replace(trim(b.iname),'-','') as col4,TRIM(nvl(a.icode,'-')) as col5,sum(nvl(iqtyin,0))-sum(nvl(iqtyout,0)) as col6 from ivoucher a,item b where trim(a.icode)=trim(B.icode) and a.branchcd='" + work_br + "' and trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'yyyymmdd')||trim(a.icode)||rpad(trim(A.btchno),15,'_')='" + mq.Replace("'", "").Substring(0, 41) + "' group by trim(a.icode),trim(a.btchno),replace(trim(b.iname),'-',''),TRIM(nvl(a.icode,'-')) having sum(nvl(iqtyin,0))>0 ";
                    }
                    else
                    {
                        if (team6.col1 == "VIGP" || team6.col1 == "BRPL" || team6.col1 == "JRAJ" || team6.col1 == "GDOT")
                        {

                            Squery = "SELECT 'Success' as col1,trim(icode) as col2,trim(Batch) as col3,replace(trim(iname),'-','') as col4,TRIM(nvl(icode,'-')) as col5,Lot_Bal as col6 from (Select B.iname,TRIM(invno) as Batch,a.iqtyin as Lot_Qty,a.iqtyout as Issued,a.iqtyin-a.iqtyout as Lot_Bal,a.vchdate as Lot_Dt,a.vchnum as Lot_No,a.Acode,a.Type,a.mfgdt,a.expdt,a.Icode From (select TRIM(branchcd)AS BRANCHCD,MAX(type) as type,trim(vchnum) as vchnum,trim(vchdate) as vchdate,'-' as mattype,MAX(acode) as acode,trim(icode) as icode,sum(iqtyina) iqtyin,sum(iqtyouta) iqtyout,trim(invno) as invno,max(mfgdt) As mfgdt,max(expdt) As expdt from (select branchcd,type,vchnum,vchdate,acode,icode,nvl(iqtyin,0) iqtyina,0 as iqtyin,nvl(iqtyout,0) iqtyout,nvl(iqtyout,0) iqtyouta,invno,to_char(invdate,'dd/mm/yyyy') invdate,mattype,null as mfgdt,null as expdt From itemvbal where branchcd='" + work_br + "' and trim(branchcd)||trim(type)||trim(vchnum)||to_char(vchdate,'yyyymmdd')||trim(icode)||rpad(trim(invno),15,'_')='" + mq.Replace("'", "").Substring(0, 41) + "'  Union All select branchcd,type,vchnum,vchdate,acode,icode,nvl(iqtyin,0) iqtyina,0 as iqtyin,0 iqtyout,nvl(iqtyout,0) iqtyouta, btchno invno,btchdt invdate,BTCHNO AS mattype,mfgdt,expdt from ivoucher where branchcd='" + work_br + "' and substr(type,1,1)='0' and VCHDATE>=TO_DATe('" + mlotstkdt + "','DD/MM/YYYY') AND store='Y' and trim(branchcd)||trim(type)||trim(vchnum)||to_char(vchdate,'yyyymmdd')||trim(icode)||rpad(trim(btchno),15,'_')='" + mq.Replace("'", "").Substring(0, 41) + "' Union All sELECT BRANCHCD,trim(buyer) type,trim(GENUM) vchnum,GEDATE vchdate,trim(vcode) acode,trim(icode) icode,0 as iqtyina,0 iqtyin,0 as IQTYOUT,nvl(iqtyout,0)-nvl(iqtyin,0) iqtyouta,trim(MATTYPE) invno,to_Char(GEDATE,'dd/mm/yyyy') invdate,mattype,null as mfgdt,null as expdt FROM IVOUCHER WHERE branchcd='" + work_br + "' and (substr(type,1,1) in('1','2','3','4') or type='70') and type!='36'  and VCHDATE>=TO_DATe('" + mlotstkdt + "','DD/MM/YYYY') AND store='Y' and trim(branchcd)||trim(buyer)||trim(genum)||to_char(gedate,'yyyymmdd')||trim(icode)||rpad(trim(mattype),15,'_')='" + mq.Replace("'", "").Substring(0, 41) + "' ) where 1=1 group by TRIM(branchcd),trim(vchnum),trim(vchdate),trim(icode),trim(invno) having  sum(iqtyina)-sum(iqtyouta)>0) a,item b where trim(a.icode)=trim(b.icodE) order by to_Date(a.vchdate,'dd/mm/yyyy'),a.iqtyin-a.iqtyout) ";
                        }
                        else
                        {
                            Squery = "SELECT 'Success' as col1,trim(a.icode) as col2,trim(a.btchno) as col3,replace(trim(b.iname),'-','') as col4,TRIM(nvl(a.icode,'-')) as col5,sum(nvl(iqtyin,0))-sum(nvl(iqtyout,0)) as col6 from ivoucher a,item b where trim(a.icode)=trim(B.icode) and a.branchcd='" + work_br + "' and trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'yyyymmdd')||trim(a.icode)||rpad(trim(A.btchno),15,'_')='" + mq.Replace("'", "").Substring(0, 41) + "' group by trim(a.icode),trim(a.btchno),replace(trim(b.iname),'-',''),TRIM(nvl(a.icode,'-')) having sum(nvl(iqtyin,0))-sum(nvl(iqtyout,0))>0 ";
                        }

                    }

                }
                string main_query = "";
                main_query = Squery;

                string icode_batch1 = "";
                string dt_of_batch1 = "";
                string dt_of_batch2 = "";
                string Num_of_batch2 = "";
                string chk_btch_query = "";
                string chk_dt_diff = "";
                string test_batch = "";
                string retIcode = "";

                if (team6.col1 == "VIGP" || team6.col1 == "BRPL" || team6.col1 == "JRAJ" || team6.col1 == "GDOT" || b50 == "1" || b50 == "2")
                {

                    if ((rm_lot_mode == "1" || rm_lot_mode == "2") && bc_len < 18)
                    {
                        test_batch = mq.Replace("'", "");
                    }
                    else
                    {
                        test_batch = mq.Substring(27, 15);
                    }

                    test_batch = test_batch.Replace("_", "");
                    DataTable dt_old_b = new DataTable();

                    if (b50 == "1")
                    {
                        //chk_btch_query = "Select TRIM(invno) as Batch,a.iqtyin as Lot_Qty,a.iqtyout as Issued,a.iqtyin-a.iqtyout as Lot_Bal,to_char(to_datE(a.vchdate,'dd/mm/yyyy'),'dd/mm/yyyy') as Lot_Dt,a.vchnum as Lot_No,a.Acode,a.Type,a.mfgdt,a.expdt,a.Icode From (select TRIM(branchcd)AS BRANCHCD,MAX(type) as type,trim(vchnum) as vchnum,trim(vchdate) as vchdate,'-' as mattype,MAX(acode) as acode,trim(icode) as icode,sum(iqtyina) iqtyin,sum(iqtyouta) iqtyout,trim(invno) as invno,max(mfgdt) As mfgdt,max(expdt) As expdt from (select branchcd,type,vchnum,vchdate,acode,icode,nvl(iqtyin,0) iqtyina,0 as iqtyin,nvl(iqtyout,0) iqtyout,nvl(iqtyout,0) iqtyouta,invno,to_char(invdate,'dd/mm/yyyy') invdate,mattype,null as mfgdt,null as expdt From itemvbal where branchcd='" + work_br + "' and trim(icode)='" + mq.Replace("'", "").Substring(18, 8) + "'  Union All select branchcd,type,vchnum,vchdate,acode,icode,nvl(iqtyin,0) iqtyina,0 as iqtyin,0 iqtyout,nvl(iqtyout,0) iqtyouta, btchno invno,btchdt invdate,BTCHNO AS mattype,mfgdt,expdt from ivoucher where branchcd='" + work_br + "' and trim(icode)='" + mq.Replace("'", "").Substring(18, 8) + "' and substr(type,1,1)='0' and VCHDATE>=TO_DATe('"+ mlotstkdt +"','DD/MM/YYYY') AND store='Y' Union All sELECT BRANCHCD,trim(buyer) type,trim(GENUM) vchnum,GEDATE vchdate,trim(vcode) acode,trim(icode) icode,0 as iqtyina,0 iqtyin,0 as IQTYOUT,nvl(iqtyout,0)-nvl(iqtyin,0) iqtyouta,trim(MATTYPE) invno,to_Char(GEDATE,'dd/mm/yyyy') invdate,mattype,null as mfgdt,null as expdt FROM IVOUCHER WHERE branchcd='" + work_br + "'  and trim(icode)='" + mq.Replace("'", "").Substring(18, 8) + "' and (substr(type,1,1) in('1','2','3','4') or type='70') and type!='36'  and VCHDATE>=TO_DATe('"+ mlotstkdt +"','DD/MM/YYYY') AND store='Y' ) where trim(invno)='" + test_batch + "'  group by TRIM(branchcd),trim(vchnum),trim(vchdate),trim(icode),trim(invno) having  sum(iqtyina)-sum(iqtyouta)>0) a order by to_Date(a.vchdate,'dd/mm/yyyy'),a.iqtyin-a.iqtyout ";
                        chk_btch_query = "SELECT 'Success' as col1,trim(icode) as col2,trim(Batch) as col3,Lot_Dt,TRIM(nvl(icode,'-')) as col5,Lot_Bal as col6 from (Select TRIM(invno) as Batch,a.iqtyin as Lot_Qty,a.iqtyout as Issued,a.iqtyin-a.iqtyout as Lot_Bal,a.vchdate as Lot_Dt,a.vchnum as Lot_No,a.Acode,a.Type,a.mfgdt,a.expdt,a.Icode From (select TRIM(branchcd)AS BRANCHCD,MAX(type) as type,trim(vchnum) as vchnum,trim(vchdate) as vchdate,'-' as mattype,MAX(acode) as acode,trim(icode) as icode,sum(iqtyina) iqtyin,sum(iqtyouta) iqtyout,trim(invno) as invno,max(mfgdt) As mfgdt,max(expdt) As expdt from (select branchcd,type,vchnum,vchdate,acode,icode,nvl(iqtyin,0) iqtyina,0 as iqtyin,nvl(iqtyout,0) iqtyout,nvl(iqtyout,0) iqtyouta,invno,to_char(invdate,'dd/mm/yyyy') invdate,mattype,null as mfgdt,null as expdt From itemvbal where branchcd='" + work_br + "' and trim(branchcd)||trim(type)||trim(vchnum)||to_char(vchdate,'yyyymmdd')||trim(icode)||rpad(trim(invno),15,'_')='" + mq.Replace("'", "").Substring(0, 41) + "'  Union All select branchcd,type,vchnum,vchdate,acode,icode,nvl(iqtyin,0) iqtyina,0 as iqtyin,0 iqtyout,nvl(iqtyout,0) iqtyouta, btchno invno,btchdt invdate,BTCHNO AS mattype,mfgdt,expdt from ivoucher where branchcd='" + work_br + "' and substr(type,1,1)='0' and VCHDATE>=TO_DATe('" + mlotstkdt + "','DD/MM/YYYY') AND store='Y' and trim(branchcd)||trim(type)||trim(vchnum)||to_char(vchdate,'yyyymmdd')||trim(icode)||rpad(trim(btchno),15,'_')='" + mq.Replace("'", "").Substring(0, 41) + "' Union All sELECT BRANCHCD,trim(buyer) type,trim(GENUM) vchnum,GEDATE vchdate,trim(vcode) acode,trim(icode) icode,0 as iqtyina,0 iqtyin,0 as IQTYOUT,nvl(iqtyout,0)-nvl(iqtyin,0) iqtyouta,trim(MATTYPE) invno,to_Char(GEDATE,'dd/mm/yyyy') invdate,mattype,null as mfgdt,null as expdt FROM IVOUCHER WHERE branchcd='" + work_br + "' and (substr(type,1,1) in('1','2','3','4') or type='70') and type!='36'  and VCHDATE>=TO_DATe('" + mlotstkdt + "','DD/MM/YYYY') AND store='Y' and trim(branchcd)||trim(buyer)||trim(genum)||to_char(gedate,'yyyymmdd')||trim(icode)||rpad(trim(mattype),15,'_')='" + mq.Replace("'", "").Substring(0, 41) + "' ) where 1=1 group by TRIM(branchcd),trim(vchnum),trim(vchdate),trim(icode),trim(invno) having  sum(iqtyina)-sum(iqtyouta)>0) a order by to_Date(a.vchdate,'dd/mm/yyyy'),a.iqtyin-a.iqtyout) ";
                        dt_of_batch1 = fn_seek_iname(team6.col1.ToUpper(), "", chk_btch_query, "Lot_Dt");

                        chk_btch_query = "SELECT 'Success' as col1,trim(icode) as col2,trim(Batch) as batch,Lot_Dt,TRIM(nvl(icode,'-')) as col5,Lot_Bal as col6,trim(icode) as erp_Code from (Select TRIM(invno) as Batch,a.iqtyin as Lot_Qty,a.iqtyout as Issued,a.iqtyin-a.iqtyout as Lot_Bal,a.vchdate as Lot_Dt,a.vchnum as Lot_No,a.Acode,a.Type,a.mfgdt,a.expdt,a.Icode From (select TRIM(branchcd)AS BRANCHCD,MAX(type) as type,trim(vchnum) as vchnum,trim(vchdate) as vchdate,'-' as mattype,MAX(acode) as acode,trim(icode) as icode,sum(iqtyina) iqtyin,sum(iqtyouta) iqtyout,trim(invno) as invno,max(mfgdt) As mfgdt,max(expdt) As expdt from (select branchcd,type,vchnum,vchdate,acode,icode,nvl(iqtyin,0) iqtyina,0 as iqtyin,nvl(iqtyout,0) iqtyout,nvl(iqtyout,0) iqtyouta,invno,to_char(invdate,'dd/mm/yyyy') invdate,mattype,null as mfgdt,null as expdt From itemvbal where branchcd='" + work_br + "' and trim(icode)='" + mq.Replace("'", "").Substring(18, 8) + "' and trim(branchcd)||trim(type)||trim(vchnum)||to_char(vchdate,'yyyymmdd')||trim(icode)||rpad(trim(invno),15,'_')!='" + mq.Replace("'", "").Substring(0, 41) + "'  Union All select branchcd,type,vchnum,vchdate,acode,icode,nvl(iqtyin,0) iqtyina,0 as iqtyin,0 iqtyout,nvl(iqtyout,0) iqtyouta, btchno invno,btchdt invdate,BTCHNO AS mattype,mfgdt,expdt from ivoucher where branchcd='" + work_br + "' and substr(type,1,1)='0' and VCHDATE>=TO_DATe('" + mlotstkdt + "','DD/MM/YYYY') AND store='Y' and trim(icode)='" + mq.Replace("'", "").Substring(18, 8) + "' and trim(branchcd)||trim(type)||trim(vchnum)||to_char(vchdate,'yyyymmdd')||trim(icode)||rpad(trim(btchno),15,'_')!='" + mq.Replace("'", "").Substring(0, 41) + "' Union All sELECT BRANCHCD,trim(buyer) type,trim(GENUM) vchnum,GEDATE vchdate,trim(vcode) acode,trim(icode) icode,0 as iqtyina,0 iqtyin,0 as IQTYOUT,nvl(iqtyout,0)-nvl(iqtyin,0) iqtyouta,trim(MATTYPE) invno,to_Char(GEDATE,'dd/mm/yyyy') invdate,mattype,null as mfgdt,null as expdt FROM IVOUCHER WHERE branchcd='" + work_br + "' and (substr(type,1,1) in('1','2','3','4') or type='70') and type!='36'  and VCHDATE>=TO_DATe('" + mlotstkdt + "','DD/MM/YYYY') AND store='Y' and trim(icode)='" + mq.Replace("'", "").Substring(18, 8) + "' and trim(branchcd)||trim(buyer)||trim(genum)||to_char(gedate,'yyyymmdd')||trim(icode)||rpad(trim(mattype),15,'_')!='" + mq.Replace("'", "").Substring(0, 41) + "' ) where 1=1 group by TRIM(branchcd),trim(vchnum),trim(vchdate),trim(icode),trim(invno) having  sum(iqtyina)-sum(iqtyouta)>0) a order by to_Date(a.vchdate,'dd/mm/yyyy'),a.iqtyin-a.iqtyout) ";
                        //chk_btch_query = "Select TRIM(invno) as Batch,a.iqtyin as Lot_Qty,a.iqtyout as Issued,a.iqtyin-a.iqtyout as Lot_Bal,to_char(to_datE(a.vchdate,'dd/mm/yyyy'),'dd/mm/yyyy') as Lot_Dt,a.vchnum as Lot_No,a.Acode,a.Type,a.mfgdt,a.expdt,a.Icode From (select TRIM(branchcd)AS BRANCHCD,MAX(type) as type,trim(vchnum) as vchnum,trim(vchdate) as vchdate,'-' as mattype,MAX(acode) as acode,trim(icode) as icode,sum(iqtyina) iqtyin,sum(iqtyouta) iqtyout,trim(invno) as invno,max(mfgdt) As mfgdt,max(expdt) As expdt from (select branchcd,type,vchnum,vchdate,acode,icode,nvl(iqtyin,0) iqtyina,0 as iqtyin,nvl(iqtyout,0) iqtyout,nvl(iqtyout,0) iqtyouta,invno,to_char(invdate,'dd/mm/yyyy') invdate,mattype,null as mfgdt,null as expdt From itemvbal where branchcd='" + work_br + "' and trim(icode)='" + mq.Replace("'", "").Substring(18, 8) + "'  Union All select branchcd,type,vchnum,vchdate,acode,icode,nvl(iqtyin,0) iqtyina,0 as iqtyin,0 iqtyout,nvl(iqtyout,0) iqtyouta, btchno invno,btchdt invdate,BTCHNO AS mattype,mfgdt,expdt from ivoucher where branchcd='" + work_br + "' and trim(icode)='" + mq.Replace("'", "").Substring(18, 8) + "' and substr(type,1,1)='0' and VCHDATE>=TO_DATe('"+ mlotstkdt +"','DD/MM/YYYY') AND store='Y' Union All sELECT BRANCHCD,trim(buyer) type,trim(GENUM) vchnum,GEDATE vchdate,trim(vcode) acode,trim(icode) icode,0 as iqtyina,0 iqtyin,0 as IQTYOUT,nvl(iqtyout,0)-nvl(iqtyin,0) iqtyouta,trim(MATTYPE) invno,to_Char(GEDATE,'dd/mm/yyyy') invdate,mattype,null as mfgdt,null as expdt FROM IVOUCHER WHERE branchcd='" + work_br + "'  and trim(icode)='" + mq.Replace("'", "").Substring(18, 8) + "' and (substr(type,1,1) in('1','2','3','4') or type='70') and type!='36'  and VCHDATE>=TO_DATe('"+ mlotstkdt +"','DD/MM/YYYY') AND store='Y' ) where trim(invno)!='" + test_batch + "'  group by TRIM(branchcd),trim(vchnum),trim(vchdate),trim(icode),trim(invno) having  sum(iqtyina)-sum(iqtyouta)>0) a order by to_Date(a.vchdate,'dd/mm/yyyy'),a.iqtyin-a.iqtyout ";
                        dt_old_b = getdata(team6.col1.ToUpper(), "-", chk_btch_query);
                    }
                    else
                    {
                        if (team6.col1 == "ARUB")
                        {
                            chk_btch_query = "select trim(icode) as icode,to_chaR(min(vchdate),'dd/mm/yyyy') as lot_Dt,sum(reelwin)-sum(reelwout) as bal from (Select vchdate,icode,kclreelno,reelwin,0 as reelwout from " + R40 + " where branchcd='" + work_br + "'  and trim(kclreelno)='" + test_batch + "' and vchdate >= to_date('" + b51 + "', 'dd/mm/yyyy')  and reelwin>0 union all Select null as vchdate,icode,kclreelno,0 as reelwin,reelwout from " + R40 + " where branchcd='" + work_br + "' and trim(kclreelno)='" + test_batch + "' and vchdate >= to_date('" + b51 + "', 'dd/mm/yyyy') and reelwout>0)  group by trim(icode) having sum(reelwin)-sum(reelwout)>0";
                            icode_batch1 = fn_seek_iname(team6.col1.ToUpper(), "", chk_btch_query, "icode");

                            chk_btch_query = "select trim(icode) as icode,to_char(min(vchdate),'dd/mm/yyyy') as lot_Dt,sum(reelwin)-sum(reelwout) as bal from (Select vchdate,icode,kclreelno,reelwin,0 as reelwout from " + R40 + " where branchcd='" + work_br + "' and vchdate >= to_date('" + b51 + "', 'dd/mm/yyyy')  and trim(kclreelno)='" + test_batch + "'  and reelwin>0 union all Select null as vchdate,icode,kclreelno,0 as reelwin,reelwout from " + R40 + " where branchcd='" + work_br + "' and trim(kclreelno)='" + test_batch + "' and vchdate > to_date('" + b51 + "', 'dd/mm/yyyy') and reelwout>0)  group by trim(icode) having sum(reelwin)-sum(reelwout)>0";
                            dt_of_batch1 = fn_seek_iname(team6.col1.ToUpper(), "", chk_btch_query, "Lot_Dt");

                            chk_btch_query = "select a.*,to_date(lot_dt,'dd/mm/yyyy') as dtsort from (select trim(kclreelno) as batch,to_char(min(vchdate),'dd/mm/yyyy') as lot_dt,sum(reelwin)-sum(reelwout) as bal,trim(icode) as erp_Code from (Select vchdate,icode,kclreelno,reelwin,0 as reelwout from " + R40 + " where branchcd='" + work_br + "' and trim(icode)='" + icode_batch1 + "' and vchdate>=to_DatE('" + b51 + "','dd/mm/yyyy') and trim(kclreelno)!='" + test_batch + "'  and reelwin>0 union all Select null as vchdate,icode,kclreelno,0 as reelwin,reelwout from " + R40 + " where branchcd='" + work_br + "' and vchdate>=to_DatE('" + b51 + "','dd/mm/yyyy') and trim(icode)='" + icode_batch1 + "' and trim(kclreelno)!='" + test_batch + "' and reelwout>0) group by trim(icode),trim(kclreelno) having sum(reelwin)-sum(reelwout)>0) a order by dtsort";
                            dt_old_b = getdata(team6.col1.ToUpper(), "-", chk_btch_query);
                        }
                        else
                        {
                            chk_btch_query = "select trim(icode) as icode,to_chaR(min(vchdate),'dd/mm/yyyy') as lot_Dt,sum(reelwin)-sum(reelwout) as bal from (Select vchdate,icode,kclreelno,reelwin,0 as reelwout from " + R40 + " where branchcd='" + work_br + "'  and trim(kclreelno)='" + test_batch + "'  and reelwin>0 union all Select null as vchdate,icode,kclreelno,0 as reelwin,reelwout from " + R40 + " where branchcd='" + work_br + "' and trim(kclreelno)='" + test_batch + "' and reelwout>0)  group by trim(icode) having sum(reelwin)-sum(reelwout)>0";
                            icode_batch1 = fn_seek_iname(team6.col1.ToUpper(), "", chk_btch_query, "icode");

                            chk_btch_query = "select trim(icode) as icode,to_char(min(vchdate),'dd/mm/yyyy') as lot_Dt,sum(reelwin)-sum(reelwout) as bal from (Select vchdate,icode,kclreelno,reelwin,0 as reelwout from " + R40 + " where branchcd='" + work_br + "'  and trim(kclreelno)='" + test_batch + "'  and reelwin>0 union all Select null as vchdate,icode,kclreelno,0 as reelwin,reelwout from " + R40 + " where branchcd='" + work_br + "' and trim(kclreelno)='" + test_batch + "' and reelwout>0)  group by trim(icode) having sum(reelwin)-sum(reelwout)>0";
                            dt_of_batch1 = fn_seek_iname(team6.col1.ToUpper(), "", chk_btch_query, "Lot_Dt");

                            chk_btch_query = "select a.*,to_date(lot_dt,'dd/mm/yyyy') as dtsort from (select trim(kclreelno) as batch,to_char(min(vchdate),'dd/mm/yyyy') as lot_dt,sum(reelwin)-sum(reelwout) as bal,trim(icode) as erp_Code from (Select vchdate,icode,kclreelno,reelwin,0 as reelwout from " + R40 + " where branchcd='" + work_br + "' and trim(icode)='" + icode_batch1 + "' and vchdate>=to_DatE('" + b51 + "','dd/mm/yyyy') and trim(kclreelno)!='" + test_batch + "'  and reelwin>0 union all Select null as vchdate,icode,kclreelno,0 as reelwin,reelwout from " + R40 + " where branchcd='" + work_br + "' and vchdate>=to_DatE('" + b51 + "','dd/mm/yyyy') and trim(icode)='" + icode_batch1 + "' and trim(kclreelno)!='" + test_batch + "' and reelwout>0) group by trim(icode),trim(kclreelno) having sum(reelwin)-sum(reelwout)>0) a order by dtsort";
                            dt_old_b = getdata(team6.col1.ToUpper(), "-", chk_btch_query);
                        }
                    }


                    if (dt_old_b.Rows.Count < 1)
                    {
                        dt_of_batch2 = dt_of_batch1;  // shivam updated this
                    }
                    else
                    {
                        dt_of_batch2 = dt_old_b.Rows[0]["Lot_Dt"].ToString();
                        Num_of_batch2 = dt_old_b.Rows[0]["Batch"].ToString();
                        retIcode = dt_old_b.Rows[0]["erp_Code"].ToString();
                    }

                    //dt_of_batch2 = fn_seek_iname(team6.col1.ToUpper(), "", chk_btch_query, "Lot_Dt");

                    if (dt_of_batch1.Length > 6 && dt_of_batch2.Length > 6)
                    {
                        chk_btch_query = "select to_date('" + dt_of_batch2 + "','dd/mm/yyyy')-to_date('" + dt_of_batch1 + "','dd/mm/yyyy') as dtd from dual";

                        chk_dt_diff = (fn_seek_iname(team6.col1.ToUpper(), "", chk_btch_query, "dtd")).ToString();

                        if (makeDouble(chk_dt_diff) < 0)
                        {
                            chk_btch_query = "Batch # " + Num_of_batch2 + " of Date " + dt_of_batch2 + " Exists, Please Follow FIFO";

                            try
                            {
                                mylist.Add(new Team6 { col1 = "Failure", col2 = retIcode, col3 = "-", col4 = "-", col5 = "-", col6 = chk_btch_query, });

                            }
                            catch { }
                            return mylist;
                        }
                        else if (makeDouble(chk_dt_diff) == 0 && team6.col1 == "ARUB")
                        {
                            string mydt = dt_of_batch1;
                            DataTable dtShiv = new DataTable();
                            //SQuery = "select trim(a.icode)||trim(a.btchno) as fstr,c.iname as item_name,a.icode as item_code,c.cpartno,c.unit,a.btchno as Batch,sum(a.iqtyin)-sum(a.iqtyout) as balance,trim(a.icode)||trim(A.btchno) as bcode,a.refnum as job_no,to_Char(a.refdate,'dd/mm/yyyy') as job_dt,to_Char(a.refdate,'yyyymmdd') as sortdt from (select trim(icode) as icode,btchno,iqtyin,0 as iqtyout,'-' as binno,refnum,refdate from ivoucher where branchcd='" + work_br + "' and type like '%' and stage='" + list[0].col2.Trim().ToString() + "' and store in ('W','Y') and type!='39' and vchdate  " + xprdrnage + " union all select trim(icode) as icode,'-' as btchno,iqtyin,0 iqtyout,'-' as binno,vchnum refnum,vchdate refdate from WIPSTK where branchcd='" + work_br + "' and type like '50%' and stage='" + list[0].col2.Trim().ToString() + "' and vchdate " + xprdrnage + " union all select trim(icode) as icode,btchno,0 as iqtyin,iqtyout,'-' as binno,refnum,refdate from ivoucher where branchcd='" + work_br + "' and type like '%' and stage='" + list[0].col2.Trim().ToString() + "'  and store in ('W','Y') and vchdate " + xprdrnage + ") a,item c where trim(a.icode)=trim(c.icode) and trim(a.icode)||trim(a.btchno) not in ('" + team6.col6 + "') and trim(a.icode)='" + team6.col6.Left(8) + "' group by c.iname,a.icode,c.cpartno,c.unit,a.btchno,a.binno,trim(a.icode)||trim(A.btchno),a.refnum,to_Char(a.refdate,'dd/mm/yyyy'),to_Char(a.refdate,'yyyymmdd') having sum(a.iqtyin)-sum(a.iqtyout)>0 order by sortdt,a.btchno,a.icode";
                            chk_btch_query = "select a.*,to_date(lot_dt,'dd/mm/yyyy') as dtsort from (select trim(kclreelno) as batch,to_char(min(vchdate),'dd/mm/yyyy') as lot_dt,sum(reelwin)-sum(reelwout) as bal,trim(icode) as erp_Code from (Select vchdate,icode,kclreelno,reelwin,0 as reelwout from " + R40 + " where branchcd='" + work_br + "' and trim(icode)='" + icode_batch1 + "' and vchdate>=to_DatE('" + b51 + "','dd/mm/yyyy') and trim(kclreelno)!='" + test_batch + "'  and reelwin>0 union all Select null as vchdate,icode,kclreelno,0 as reelwin,reelwout from " + R40 + " where branchcd='" + work_br + "' and vchdate>=to_DatE('" + b51 + "','dd/mm/yyyy') and trim(icode)='" + icode_batch1 + "' and trim(kclreelno)!='" + test_batch + "' and reelwout>0) group by trim(icode),trim(kclreelno) having sum(reelwin)-sum(reelwout)>0) a order by dtsort, a.batch,a.erp_Code";
                            string myqry = "select * from (" + chk_btch_query + ") where lot_dt='" + mydt + "' and batch<'" + team6.col2 + "'";
                            dtShiv = getdata(team6.col1, "-", myqry);
                            if (dtShiv.Rows.Count > 0)
                            {
                                //chk_btch_query = "Total Batch " + dtShiv.Rows.Count + " for Date " + mydt + " Exists.First Batch is " + dtShiv.Rows[0]["batch"].ToString().Trim() + "  , Please Follow FIFO !!";
                                chk_btch_query = "Batch No. " + dtShiv.Rows[0]["batch"].ToString().Trim() + " Of Date " + mydt + " Is Pending To Be Issued. " + ", Please Follow FIFO !!";
                                try
                                {
                                    mylist = new List<Team6>();
                                    mylist.Add(new Team6 { col1 = "Failure", col2 = retIcode, col3 = "-", col4 = "-", col5 = "-", col6 = chk_btch_query, });
                                }
                                catch { }
                                return mylist;
                            }
                        }
                    }
                }


                dt = new DataTable();
                dt = getdata(team6.col1, "-", main_query);


                if (dt.Rows.Count > 0) ReturnVal = dt.Rows[0][0].ToString();
                List<Team6> list = new List<Team6>();

                if (1 == 2)
                {

                }
                else
                {
                    list = (from DataRow row in dt.Rows
                            select new Team6()
                            {
                                col1 = row["col1"].ToString(),
                                col2 = row["col2"].ToString(),
                                col3 = row["col3"].ToString(),
                                col4 = row["col4"].ToString(),
                                col5 = row["col5"].ToString(),
                                col6 = row["col6"].ToString(),
                            }).ToList();

                    dtrows = dt.Rows.Count;
                    if (dtrows <= 0)
                    {
                        list.Add(new Team6 { col1 = "Failure", col2 = team6.col2, col3 = "-", col4 = "-", col5 = "-", col6 = "Record not found", });
                    }

                }
                return list;
                //}
            }
            catch (Exception e)
            {
                err = e.Message.ToString();

            }
            mylist.Add(new Team6 { col1 = results, col2 = "-", col3 = "-", col4 = "-", col5 = "-", col6 = err, });
            return mylist;
        }



        public List<Team6> old_aNJreel_jccheck(Team6 team6)
        {
            //-------------------------
            Fn_set_andapp_opts(team6.col1, "N");
            //------------------------

            //rm_lot_mode= 1 :: all reel (sgrp /mega) , 2 :: PRT_RAV ="Y" ( reel + other item ), 3 :: PRT_RAV ="N" ( NO reel + all other item)
            // api call to verify a valid reel from Reel/Lot physical
            // api call to verify a valid Lot from Reel/Lot Stacking

            // check reel at time of issue without item in job card checking
            string err = "", results = "";
            string Data_found = "N";
            string[] qrlist;
            string work_br;
            string[] scodelist;
            string ReturnVal = "";
            int cnt = 0;
            List<Team6> list = new List<Team6>();
            int dtrows = 0;
            work_br = fn_seek_iname(team6.col1, "", "Select AND_ENTBR from evas where username='" + team6.col3.ToUpper().Trim() + "'", "AND_ENTBR");
            try
            {
                mq = "-";
                scodelist = Regex.Split(team6.col2, team6.col5);
                cnt = scodelist.Length;
                for (int i = 0; i < cnt; i++)
                {
                    if (mq.Equals("-")) mq = "'" + scodelist[i].ToString().Trim() + "'";
                    else mq = mq + ",'" + scodelist[i].ToString().Trim() + "'";

                }

                branchwise(team6.col1, "", team6.col5);

                string R40 = fn_seek_iname(team6.col1, "", "SELECT ENABLE_YN FROM CONTROLS WHERE ID='R40' AND ENABLE_YN='Y' ", "ENABLE_YN");
                if (R40 == "Y")
                {
                    R40 = "REELVIEW_" + work_br;
                }
                else
                {
                    R40 = "REELVCH";
                }


                dt = new DataTable();



                Squery = "SELECT 'Success' as col1,trim(a.icode) as col2,trim(a.kclreelno) as col3,replace(trim(b.iname),'-','') as col4,TRIM(nvl(a.coreelno,'-')) as col5,sum(nvl(reelwin,0))-sum(nvl(reelwout,0)) as col6 from " + R40 + " a,item b where trim(a.icode)=trim(B.icode) and a.branchcd='" + work_br + "' and replace(trim(a.kclreelno),'-','') in (" + mq + ")  group by trim(a.icode),trim(a.kclreelno),replace(trim(b.iname),'-',''),TRIM(nvl(a.coreelno,'-')) having  sum(nvl(reelwin,0))-sum(nvl(reelwout,0))>0 ";



                dt = getdata(team6.col1, "-", Squery);

                if (dt.Rows.Count > 0) ReturnVal = dt.Rows[0][0].ToString();


                if (1 == 2)
                {

                }
                else
                {
                    list = (from DataRow row in dt.Rows
                            select new Team6()
                            {
                                col1 = row["col1"].ToString(),
                                col2 = row["col2"].ToString(),
                                col3 = row["col3"].ToString(),
                                col4 = row["col4"].ToString(),
                                col5 = row["col5"].ToString(),
                                col6 = row["col6"].ToString(),
                            }).ToList();

                    dtrows = dt.Rows.Count;
                    if (dtrows <= 0)
                    {
                        list.Add(new Team6 { col1 = "Failure", col2 = team6.col2, col3 = "-", col4 = "-", col5 = "-", col6 = "Stock Not Sufficient", });
                    }

                }
                return list;
                //}
            }
            catch (Exception e)
            {
                err = e.Message.ToString();

            }
            List<Team6> mylist = new List<Team6>();
            mylist.Add(new Team6 { col1 = results, col2 = "-", col3 = "-", col4 = "-", col5 = "-", col6 = err, });
            return list;
        }

        public List<Team6> aNJ_NR_jccheck(Team6 team6)
        {
            //non use
            //-------------------------
            Fn_set_andapp_opts(team6.col1, "N");
            //------------------------

            // check reel at time of issue without item in job card checking
            string err = "", results = "";
            string Data_found = "N";
            string[] qrlist;
            string work_br;
            string[] scodelist;
            string ReturnVal = "";
            int cnt = 0;
            List<Team6> list = new List<Team6>();
            int dtrows = 0;
            work_br = fn_seek_iname(team6.col1, "", "Select AND_ENTBR from evas where username='" + team6.col3.ToUpper().Trim() + "'", "AND_ENTBR");
            try
            {
                mq = "-";
                scodelist = Regex.Split(team6.col2, team6.col5);
                cnt = scodelist.Length;
                for (int i = 0; i < cnt; i++)
                {
                    if (mq.Equals("-")) mq = "'" + scodelist[i].ToString().Trim().Substring(0, 41) + "'";
                    else mq = mq + ",'" + scodelist[i].ToString().Trim().Substring(0, 41) + "'";

                }

                branchwise(team6.col1, "", team6.col5);




                dt = new DataTable();

                Squery = "SELECT 'Success' as col1,trim(a.icode) as col2,trim(a.btchno) as col3,replace(trim(b.iname),'-','') as col4,TRIM(nvl(a.icode,'-')) as col5,sum(nvl(iqtyin,0))-sum(nvl(iqtyout,0)) as col6 from ivoucher a,item b where trim(a.icode)=trim(B.icode) and a.branchcd='" + work_br + "' and trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'yyyymmdd')||trim(a.icode)||rpad(trim(A.btchno),15,'_') in (" + mq + ")  group by trim(a.icode),trim(a.btchno),replace(trim(b.iname),'-',''),TRIM(nvl(a.icode,'-')) having  sum(nvl(iqtyin,0))-sum(nvl(iqtyout,0))>0 ";

                dt = getdata(team6.col1, "-", Squery);

                if (dt.Rows.Count > 0) ReturnVal = dt.Rows[0][0].ToString();


                if (1 == 2)
                {

                }
                else
                {
                    list = (from DataRow row in dt.Rows
                            select new Team6()
                            {
                                col1 = row["col1"].ToString(),
                                col2 = row["col2"].ToString(),
                                col3 = row["col3"].ToString(),
                                col4 = row["col4"].ToString(),
                                col5 = row["col5"].ToString(),
                                col6 = row["col6"].ToString(),
                            }).ToList();

                    dtrows = dt.Rows.Count;
                    if (dtrows <= 0)
                    {
                        list.Add(new Team6 { col1 = "Failure", col2 = team6.col2, col3 = "-", col4 = "-", col5 = "-", col6 = "Stock Not Sufficient", });
                    }

                }
                return list;
                //}
            }
            catch (Exception e)
            {
                err = e.Message.ToString();

            }
            List<Team6> mylist = new List<Team6>();
            mylist.Add(new Team6 { col1 = results, col2 = "-", col3 = "-", col4 = "-", col5 = "-", col6 = err, });
            return list;
        }



        public List<Team6> aNJ_NR_PHcheck(Team6 team6)
        {
            //-------------------------
            Fn_set_andapp_opts(team6.col1, "N");
            //------------------------

            // check reel at time of issue without item in job card checking
            string err = "", results = "";
            string Data_found = "N";
            string[] qrlist;
            string work_br;
            string[] scodelist;
            string ReturnVal = "";
            int cnt = 0;
            List<Team6> list = new List<Team6>();
            int dtrows = 0;
            work_br = fn_seek_iname(team6.col1, "", "Select AND_ENTBR from evas where username='" + team6.col3.ToUpper().Trim() + "'", "AND_ENTBR");
            try
            {
                mq = "-";
                scodelist = Regex.Split(team6.col2, team6.col5);
                cnt = scodelist.Length;
                for (int i = 0; i < cnt; i++)
                {
                    if (mq.Equals("-")) mq = "'" + scodelist[i].ToString().Trim().Substring(0, 41) + "'";
                    else mq = mq + ",'" + scodelist[i].ToString().Trim().Substring(0, 41) + "'";

                }

                branchwise(team6.col1, "", team6.col5);




                dt = new DataTable();

                Squery = "SELECT 'Success' as col1,trim(a.icode) as col2,trim(a.btchno) as col3,replace(trim(b.iname),'-','') as col4,TRIM(nvl(a.icode,'-')) as col5,sum(nvl(iqtyin,0))-sum(nvl(iqtyout,0)) as col6 from ivoucher a,item b where trim(a.icode)=trim(B.icode) and a.branchcd='" + work_br + "' and trim(a.branchcd)||trim(a.type)||trim(a.vchnum)||to_char(a.vchdate,'yyyymmdd')||trim(a.icode)||rpad(trim(A.btchno),15,'_') in (" + mq + ")  group by trim(a.icode),trim(a.btchno),replace(trim(b.iname),'-',''),TRIM(nvl(a.icode,'-')) ";

                dt = getdata(team6.col1, "-", Squery);

                if (dt.Rows.Count > 0) ReturnVal = dt.Rows[0][0].ToString();


                if (1 == 2)
                {

                }
                else
                {
                    list = (from DataRow row in dt.Rows
                            select new Team6()
                            {
                                col1 = row["col1"].ToString(),
                                col2 = row["col2"].ToString(),
                                col3 = row["col3"].ToString(),
                                col4 = row["col4"].ToString(),
                                col5 = row["col5"].ToString(),
                                col6 = row["col6"].ToString(),
                            }).ToList();

                    dtrows = dt.Rows.Count;
                    if (dtrows <= 0)
                    {
                        list.Add(new Team6 { col1 = "Failure", col2 = team6.col2, col3 = "-", col4 = "-", col5 = "-", col6 = "Stock Not Sufficient", });
                    }

                }
                return list;
                //}
            }
            catch (Exception e)
            {
                err = e.Message.ToString();

            }
            List<Team6> mylist = new List<Team6>();
            mylist.Add(new Team6 { col1 = results, col2 = "-", col3 = "-", col4 = "-", col5 = "-", col6 = err, });
            return list;
        }

        //-------------------------------------------

        public List<Team6> aNJreel_retcheck(Team6 team6)
        {
            //-------------------------
            Fn_set_andapp_opts(team6.col1, "N");
            //------------------------

            // check reel at time of return without item in job card checking
            string err = "", results = "";
            string Data_found = "N";
            string[] qrlist;
            string work_br;
            string last_tr_type = "";
            string[] scodelist;
            string ReturnVal = "";
            int cnt = 0;
            int dtrows = 0;
            work_br = fn_seek_iname(team6.col1, "", "Select AND_ENTBR from evas where username='" + team6.col3.ToUpper().Trim() + "'", "AND_ENTBR");

            try
            {
                mq = "-";
                scodelist = Regex.Split(team6.col2, team6.col5);
                cnt = scodelist.Length;
                for (int i = 0; i < cnt; i++)
                {
                    if (mq.Equals("-")) mq = "'" + scodelist[i].ToString().Trim() + "'";
                    else mq = mq + ",'" + scodelist[i].ToString().Trim() + "'";
                }

                branchwise(team6.col1, "", team6.col5);

                dt = new DataTable();

                string R40 = fn_seek_iname(team6.col1, "", "SELECT ENABLE_YN FROM CONTROLS WHERE ID='R40' AND ENABLE_YN='Y' ", "ENABLE_YN");
                if (R40 == "Y")
                {
                    R40 = "REELVIEW_" + work_br;
                }
                else
                {
                    R40 = "REELVCH";
                }



                mq = "select * from (SELECT distinct 'Success' as col1,trim(a.icode) as col2,trim(a.kclreelno) as col3,replace(trim(b.iname),'-','') as col4,a.type as col5,0 as col6,to_char(c.ent_dt,'yyyymmdd :hh24:mi:ss') as col7 from " + R40 + " a,item b,ivoucher c where a.branchcd||a.type||a.vchnum||to_char(a.vchdate,'dd/mm/yyyy')||trim(A.icode)=c.branchcd||c.type||c.vchnum||to_char(c.vchdate,'dd/mm/yyyy')||trim(c.icode) and trim(a.icode)=trim(B.icode) and a.branchcd='" + work_br + "' and a.type like '%' and replace(trim(a.kclreelno),'-','') in (" + mq + ") order by to_char(c.ent_dt,'yyyymmdd :hh24:mi:ss') desc) where rownum<2 ";

                dt = getdata(team6.col1, "-", mq);

                if (dt.Rows.Count > 0) ReturnVal = dt.Rows[0][0].ToString();


                List<Team6> list = new List<Team6>();

                if (1 == 2)
                {

                }
                else
                {


                    list = (from DataRow row in dt.Rows
                            select new Team6()
                            {
                                col1 = row["col1"].ToString(),
                                col2 = row["col2"].ToString(),
                                col3 = row["col3"].ToString(),
                                col4 = row["col4"].ToString(),
                                col5 = row["col5"].ToString(),
                                col6 = row["col6"].ToString(),

                            }).ToList();

                    dtrows = dt.Rows.Count;
                    if (dtrows > 0)
                    {
                        last_tr_type = dt.Rows[0]["col5"].ToString();
                    }

                    if (dtrows <= 0)
                    {
                        list.Add(new Team6 { col1 = "Failure", col2 = team6.col2, col3 = "-", col4 = "-", col5 = "-", col6 = "Reel Not Issued against This job", });
                    }
                    if (last_tr_type == "11")
                    {
                        list.Add(new Team6 { col1 = "Failure", col2 = team6.col2, col3 = "-", col4 = "-", col5 = "-", col6 = "Last Entry is Not a Issue Entry", });
                    }

                }
                return list;
                //}
            }
            catch (Exception e)
            {
                err = e.Message.ToString();

            }
            List<Team6> mylist = new List<Team6>();
            mylist.Add(new Team6 { col1 = results, col2 = "-", col3 = "-", col4 = "-", col5 = "-", col6 = err, });
            return mylist;
        }

        //-------------------------------------------
        public List<Team6> ajobc_check(Team6 team6)
        {
            //-------------------------
            Fn_set_andapp_opts(team6.col1, "N");
            //------------------------

            string err = "", results = "";
            string Data_found = "N";
            string[] qrlist;
            string work_br;
            string[] scodelist;
            string ReturnVal = "";
            int cnt = 0;
            int dtrows = 0;
            work_br = fn_seek_iname(team6.col1, "", "Select AND_ENTBR from evas where username='" + team6.col3.ToUpper().Trim() + "'", "AND_ENTBR");
            try
            {
                mq = "-";
                scodelist = Regex.Split(team6.col2, team6.col5);
                cnt = scodelist.Length;
                for (int i = 0; i < cnt; i++)
                {
                    if (mq.Equals("-")) mq = "'" + scodelist[i].ToString().Trim() + "'";
                    else mq = mq + ",'" + scodelist[i].ToString().Trim() + "'";

                }

                branchwise(team6.col1, "", team6.col5);

                dt = new DataTable();
                dt = getdata(team6.col1, "-", "SELECT distinct 'Success' as col1,trim(a.icode) as col2,trim(a.vchnum) as col3,'-' as col4,'-' as col5,'-' as col6 from costestimate a where a.branchcd||a.type||a.vchnum||to_Char(a.vchdate,'dd/mm/yyyy') in (" + mq + ")");
                if (dt.Rows.Count > 0) ReturnVal = dt.Rows[0][0].ToString();
                List<Team6> list = new List<Team6>();

                if (1 == 2)
                {

                }
                else
                {
                    list = (from DataRow row in dt.Rows
                            select new Team6()
                            {
                                col1 = row["col1"].ToString(),
                                col2 = row["col2"].ToString(),
                                col3 = row["col3"].ToString(),
                                col4 = row["col4"].ToString(),
                                col5 = row["col5"].ToString(),
                                col6 = row["col6"].ToString(),
                            }).ToList();

                    dtrows = dt.Rows.Count;
                    if (dtrows <= 0)
                    {
                        list.Add(new Team6 { col1 = "Failure", col2 = team6.col2, col3 = "-", col4 = "-", col5 = "-", col6 = "Record not found", });
                    }

                }
                return list;
                //}
            }
            catch (Exception e)
            {
                err = e.Message.ToString();

            }
            List<Team6> mylist = new List<Team6>();
            mylist.Add(new Team6 { col1 = results, col2 = "-", col3 = "-", col4 = "-", col5 = "-", col6 = err, });
            return mylist;
        }

        //-------------------------------------------
        public List<Team6> aSGFG_check(Team6 team6)
        {
            //-------------------------
            Fn_set_andapp_opts(team6.col1, "N");
            //------------------------

            string popsql = "";
            string Rxprd1 = "", Rxprd2 = "";
            string xprd1 = "", xprd2 = "";
            string wip_phy_Dt = "";
            string wip_phy_upd = "";
            string ext_Cond = "";
            string ext_Cond1 = "";
            string s_code1 = "", s_code2 = "";

            string err = "", results = "";
            string Data_found = "N";
            string[] qrlist;
            string work_br;
            string[] scodelist;
            string ReturnVal = "";
            string mydate = DateTime.Now.ToString("dd/MM/yyyy");
            int cnt = 0;
            int dtrows = 0;
            work_br = fn_seek_iname(team6.col1, "", "Select AND_ENTBR from evas where username='" + team6.col3.ToUpper().Trim() + "'", "AND_ENTBR");

            //====================================================
            wip_phy_Dt = fn_seek_iname(team6.col1, "", "select to_char(max(vchdatE),'dd/mm/yyyy') as fstr from FGSTKVCH_PH where branchcd='" + work_br + "' ", "fstr");
            wip_phy_upd = fn_seek_iname(team6.col1, "", "select max(to_char(phy_Dt,'yyyymmdd hh24:mi:ss')) as fstr from FGSTKVCH_PH where branchcd='" + work_br + "'", "fstr");



            Rxprd1 = "between to_date('" + wip_phy_Dt + "','dd/mm/yyyy') and to_date('" + mydate + "','dd/mm/yyyy') -1";
            Rxprd2 = "between to_date('" + mydate + "','dd/mm/yyyy') and to_date('" + mydate + "','dd/mm/yyyy')";

            ext_Cond = "to_char(PHY_DT,'yyyymmdd hh24:mi:ss')>'" + wip_phy_upd + "'";
            ext_Cond1 = "to_char(ent_DT,'yyyymmdd hh24:mi:ss')>'" + wip_phy_upd + "'";

            //====================================================

            xprd1 = "between to_date('01/01/2022','dd/mm/yyyy') and to_date('" + mydate + "','dd/mm/yyyy') -1";
            xprd2 = "between to_date('" + mydate + "','dd/mm/yyyy') and to_date('" + mydate + "','dd/mm/yyyy')";


            try
            {
                mq = "-";
                scodelist = Regex.Split(team6.col2, team6.col5);
                cnt = scodelist.Length;
                for (int i = 0; i < cnt; i++)
                {
                    if (mq.Equals("-")) mq = "'" + scodelist[i].ToString().Trim() + "'";
                    else mq = mq + ",'" + scodelist[i].ToString().Trim() + "'";

                }

                branchwise(team6.col1, "", team6.col5);


                s_code1 = "90000000";
                s_code2 = "99999999";

                popsql = "Select trim(A.icode) as fstr,'-' as gstr,d.Name as Item_Group,b.Iname as Item_Name,TRIM(KCLREELNO) AS BATCH_NO,trim(A.icode) as ERP_Code,sum(reelop)+sum(reelinw)-sum(reeloutw) as Lot_closing,b.unit,b.cpartno,a.branchcd,substr(trim(a.icode),1,2) as MainGroup,substr(trim(a.icode),1,4) as SubGroup from (" +
                    "Select branchcd,Icode,0 as opening,0 as cdr,0 as ccr,0 as clos,reelwin as reelop,0 as reelinw,0 as reeloutw,0 as reelclos,kclreelno from FGSTKVCH_PH where branchcd='" + work_br + "' and Icode between '" + s_code1 + "' and '" + s_code2 + "' and vchdate=to_date('" + wip_phy_Dt + "','dd/mm/yyyy') union all " +
                    "select branchcd,Icode,0 as op,0 as cdr,0 as ccr,0 as clos,iqtyin-iqtyout as reelop,0 as reelinw,0 as reeloutw,0 as reelclos,BTCHNO from ivoucher where branchcd='" + work_br + "' and type in ('17','19','36') and vchdate " + Rxprd1 + " and icode between '" + s_code1 + "' and '" + s_code2 + "' and " + ext_Cond1 + " union all " +
                    "select branchcd,Icode,0 as op,0 as cdr,0 as ccr,0 as clos,qtysupp*-1 as reelop,0 as reelinw,0 as reeloutw,0 as reelclos,NO_BDLS from despatch where branchcd='" + work_br + "' and (type like '4%' or type like '65%') and packdate " + Rxprd1 + " and icode between '" + s_code1 + "' and '" + s_code2 + "' and " + ext_Cond1 + " union all " +
                    "select branchcd,icode,0 as op,0 as cdr,0 as ccr,0 as clos,0 as reelop,iqtyin as reelinw,iqtyout as reeloutw,0 as reelclos,btchno from ivoucher where branchcd='" + work_br + "' and type in ('17','19','36') and vchdate " + Rxprd2 + " and icode between '" + s_code1 + "' and '" + s_code2 + "'  and " + ext_Cond1 + "  union all " +
                    "select branchcd,icode,0 as op,0 as cdr,0 as ccr,0 as clos,0 as reelop,0 as reelinw,qtysupp as reeloutw,0 as reelclos,No_bdls from despatch where branchcd='" + work_br + "' and (type like '4%' or type like '65%') and packdate " + Rxprd2 + " and icode between '" + s_code1 + "' and '" + s_code2 + "'  and " + ext_Cond1 + "  " +
                    ") a , item b,type c,type d where c.id='B' and trim(A.branchcd)=trim(c.type1) and d.id='Y' and substr(A.icode,1,2)=trim(d.type1) and trim(A.icode)=trim(B.icodE)  " +
                    "group by c.Vchnum,d.Name,b.Iname,trim(A.icode),b.unit,b.cpartno,a.branchcd,substr(trim(a.icode),1,2),substr(trim(a.icode),1,4),b.SERVICABLE ,TRIM(a.KCLREELNO) having sum(reelop)+sum(reelinw)+sum(reeloutw) !=0 order by substr(trim(a.icode),1,4),b.Iname";


                dt = new DataTable();

                Squery = "SELECT distinct 'Success' as col1,trim(a.erp_Code) as col2,trim(a.batch_no) as col3,a.item_name as col4,'-' as col5,a.Lot_closing as col6 from (" + popsql + ") a where trim(a.erp_Code)||trim(a.batch_no) in (" + mq + ")";
                dt = getdata(team6.col1, "-", Squery);

                if (dt.Rows.Count > 0) ReturnVal = dt.Rows[0][0].ToString();
                List<Team6> list = new List<Team6>();

                if (1 == 2)
                {

                }
                else
                {
                    list = (from DataRow row in dt.Rows
                            select new Team6()
                            {
                                col1 = row["col1"].ToString(),
                                col2 = row["col2"].ToString(),
                                col3 = row["col3"].ToString(),
                                col4 = row["col4"].ToString(),
                                col5 = row["col5"].ToString(),
                                col6 = row["col6"].ToString(),
                            }).ToList();

                    dtrows = dt.Rows.Count;
                    if (dtrows <= 0)
                    {
                        list.Add(new Team6 { col1 = "Failure", col2 = team6.col2, col3 = "-", col4 = "-", col5 = "-", col6 = "Scanned QR Code, Not found", });
                    }

                }
                return list;
                //}
            }
            catch (Exception e)
            {
                err = e.Message.ToString();

            }
            List<Team6> mylist = new List<Team6>();
            mylist.Add(new Team6 { col1 = results, col2 = "-", col3 = "-", col4 = "-", col5 = "-", col6 = err, });
            return mylist;
        }

        public List<Team6> aInterStg_check(Team6 team6)
        {
            //-------------------------
            Fn_set_andapp_opts(team6.col1, "N");
            //------------------------
            string err = "", results = "";
            string Data_found = "N";
            string[] qrlist;
            string work_br;
            string[] scodelist;
            string ReturnVal = "";
            int cnt = 0;
            int dtrows = 0;
            work_br = fn_seek_iname(team6.col1, "", "Select AND_ENTBR from evas where username='" + team6.col3.ToUpper().Trim() + "'", "AND_ENTBR");
            string mlotstkdt = fn_seek_iname(team6.col1, "", "select lotstkdt from type where id='B' and type1='" + work_br + "'", "lotstkdt");


            string frm_cDt1 = "";
            string frm_cDt2 = "";
            string xprdrnage = "";
            string mydate = DateTime.Now.ToString("dd/MM/yyyy");
            frm_cDt1 = fn_seek_iname(team6.col1, "", "Select to_Char(fmdate,'dd/mm/yyyy') as fmdt from co where code like '" + team6.col1 + "%' and FMDATE<=TO_DATE('" + mydate + "','DD/MM/YYYY') AND TODATE>=TO_DATE('" + mydate + "','DD/MM/YYYY') order by fmdate desc", "fmdt");
            frm_cDt2 = fn_seek_iname(team6.col1, "", "Select to_Char(todate,'dd/mm/yyyy') as fmdt from co where code like '" + team6.col1 + "%' and to_CHAR(FMDATE,'DD/MM/YYYY')='" + frm_cDt1 + "' order by fmdate desc", "fmdt");

            xprdrnage = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
            List<Team6> list = new List<Team6>();
            try
            {
                mq = "-";
                scodelist = Regex.Split(team6.col2, team6.col5);
                cnt = scodelist.Length;
                for (int i = 0; i < cnt; i++)
                {
                    if (mq.Equals("-")) mq = "'" + scodelist[i].ToString().Trim() + "'";
                    else mq = mq + ",'" + scodelist[i].ToString().Trim() + "'";
                }

                branchwise(team6.col1, "", team6.col5);

                if (team6.col1 == "CHPL")
                {
                    string col6 = team6.col6.Split('_')[0];
                    col6 = col6.Substring(0, 2) + col6.Substring(18, col6.Length - 18);
                    mq = "select 'Success' as col1,trim(a.stage) as col2,trim(a.Icode)||' #~# '||trim(a.refnum)||' #~# '||trim(to_char(a.refdate, 'dd/mm/yyyy')) as col3,replace(trim(b.iname),'-','') as col4,trim(a.invno) as col5,TRIM(nvl(a.iqtyin,0)) as col6, trim(a.type) as type from ivoucher a,item b where a.iqtyin>0 and trim(a.icode)=trim(B.icode) and trim(a.branchcd)||trim(a.icode)||trim(a.invno)='" + col6 + "'  and a.iqtyin>0 order by a.edt_dt desc";
                }
                else
                {
                    mq = "SELECT 'Success' as col1,trim(a.stage) as col2,trim(a.Icode)||' #~# '||trim(a.refnum)||' #~# '||trim(to_char(a.refdate, 'dd/mm/yyyy')) as col3,replace(trim(b.iname),'-','') as col4,trim(a.invno) as col5,TRIM(nvl(a.iqtyin,0)) as col6, trim(a.type) as type from ivoucher a,item b where a.iqtyin>0 and trim(a.icode)=trim(B.icode) and a.branchcd='" + work_br + "' and trim(A.icode)||trim(A.btchno) ='" + team6.col6 + "' and a.iqtyin>0 order by a.edt_dt desc";
                }
                dt = getdata(team6.col1, "-", mq);

                if (dt.Rows.Count > 0) ReturnVal = dt.Rows[0][0].ToString();
                {
                    string xxstage = dt.Rows[0][1].ToString();
                    string xxtype = dt.Rows[0][6].ToString();

                    if (ReturnVal.Trim() == "Success" && xxtype == "3A")
                    {

                        // Checking that batch is already consumed on that stage or not.
                        mq = "select * from ivoucher where trim(branchcd)='" + work_br + "' and trim(type) = '39' and trim(icode)||trim(btchno) ='" + team6.col6 + "' and trim(stage)='" + xxstage + "'";
                        DataTable prod_dt_check = getdata(team6.col1, "-", mq);
                        if (prod_dt_check.Rows.Count > 0)
                        {
                            list = new List<Team6>();
                            list.Add(new Team6 { col1 = "Failure", col2 = "-", col3 = "-", col4 = "-", col5 = "-", col6 = "This Batch(" + team6.col6 + ") Has Already You Consumed On this Stage : " + xxstage + "" });
                            return list;
                        }
                    }

                    DataTable dt_new = new DataTable();
                    dt_new.Columns.Add("col1");
                    dt_new.Columns.Add("col2");
                    dt_new.Columns.Add("col3");
                    dt_new.Columns.Add("col4");
                    dt_new.Columns.Add("col5");
                    dt_new.Columns.Add("col6");

                    DataRow original;
                    int row_index = 0;
                    foreach (DataRow dr in dt.Rows)
                    {
                        row_index++;
                        original = dt_new.NewRow();
                        original["col1"] = dr["col1"];
                        original["col2"] = dr["col2"];
                        original["col3"] = dr["col3"];
                        original["col4"] = dr["col4"];
                        original["col5"] = dr["col5"];
                        original["col6"] = dr["col6"];

                        dt_new.Rows.Add(original);

                        if (row_index > 0) { break; }
                    }

                    list = (from DataRow row in dt_new.Rows
                            select new Team6()
                            {
                                col1 = row["col1"].ToString(),
                                col2 = row["col2"].ToString(),
                                col3 = row["col3"].ToString(),
                                col4 = row["col4"].ToString(),
                                col5 = row["col5"].ToString(),
                                col6 = row["col6"].ToString(),
                            }).ToList();

                    //if (list.Count > 0) { 
                    //    string dt_of_batch2 = "", Num_of_batch2 = "", retIcode = "";
                    //    DataTable dt_old_b = new DataTable();
                    //    string query = "select to_char(refdate, 'dd/mm/yyyy') as xold_date, trim(icode) as icode,trim(REPLACE(BTCHNO, '-', '')) as btchno from ivoucher where branchcd='" + work_br + "' and trim(vchdate)>=TO_DATe('" + mlotstkdt + "','DD/MM/YYYY') and trim(icode)= '" + team6.col6.Substring(0, 8).Trim() + "' having ROUND(sum(iqtyin)-sum(iqtyout)) >0 group by refdate, icode, btchno  order by refdate";
                    //    query = "SELECT distinct a.* from (" + query + ")a where TRIM(NVL(a.btchno,'-')) <> '-'";

                    //    string SQuery = "";

                    //    SQuery = "select trim(a.icode)||trim(a.btchno) as fstr,c.iname as item_name,a.icode as item_code,c.cpartno,c.unit,a.btchno as Batch,sum(a.iqtyin)-sum(a.iqtyout) as balance,trim(a.icode)||trim(A.btchno) as bcode,to_Char(a.refdate,'dd/mm/yyyy') as job_dt,to_Char(a.refdate,'yyyymmdd') as sortdt from (select trim(icode) as icode,btchno,iqtyin,0 as iqtyout,'-' as binno,refnum,refdate from ivoucher where branchcd='" + work_br + "' and type like '%' and stage='" + list[0].col2.Trim().ToString() + "' and store in ('W','Y') and type!='39' and vchdate  " + xprdrnage + " union all select trim(icode) as icode,'-' as btchno,iqtyin,0 iqtyout,'-' as binno,vchnum refnum,vchdate refdate from WIPSTK where branchcd='" + work_br + "' and type like '50%' and stage='" + list[0].col2.Trim().ToString() + "' and vchdate " + xprdrnage + " union all select trim(icode) as icode,btchno,0 as iqtyin,iqtyout,'-' as binno,refnum,refdate from ivoucher where branchcd='" + work_br + "' and type like '%' and stage='" + list[0].col2.Trim().ToString() + "'  and store in ('W','Y') and vchdate " + xprdrnage + ") a,item c where trim(a.icode)=trim(c.icode) and trim(a.icode)||trim(a.btchno) not in ('" + team6.col6 + "') and trim(a.icode)='" + team6.col6.Left(8) + "' group by c.iname,a.icode,c.cpartno,c.unit,a.btchno,a.binno,trim(a.icode)||trim(A.btchno),to_Char(a.refdate,'dd/mm/yyyy'),to_Char(a.refdate,'yyyymmdd') having sum(a.iqtyin)-sum(a.iqtyout)>0 and nvl(trim(a.btchno),'-')!='-' order by sortdt,a.btchno,a.icode";
                    //    dt_old_b = getdata(team6.col1, "-", SQuery);
                    //    string xold_date = fn_seek_iname(team6.col1, "", SQuery, "JOB_DT");

                    //    string xbtch_date = Regex.Split(list[0].col3.Trim().ToString(), "#~#")[2].Trim();
                    //    if (xold_date.Length > 6 && xbtch_date.Length > 6)
                    //    {
                    //        string chk_btch_query = "select to_date('" + xbtch_date + "','dd/mm/yyyy')-to_date('" + xold_date + "','dd/mm/yyyy') as dtd from dual";

                    //        string chk_dt_diff = (fn_seek_iname(team6.col1.ToUpper(), "", chk_btch_query, "dtd")).ToString();

                    //        if (dt_old_b.Rows.Count < 1)
                    //        { }
                    //        else
                    //        {

                    //        }

                    //        if (makeDouble(chk_dt_diff) > 0 || makeDouble(chk_dt_diff) == 0)
                    //        {

                    //            if (dt_old_b.Rows.Count > 0)
                    //            {
                    //                if (makeDouble(chk_dt_diff) > 0)
                    //                {

                    //                    dt_of_batch2 = dt_old_b.Rows[0]["JOB_DT"].ToString();
                    //                    Num_of_batch2 = dt_old_b.Rows[0]["Batch"].ToString();
                    //                    retIcode = dt_old_b.Rows[0]["item_code"].ToString();

                    //                    chk_btch_query = "Batch # " + Num_of_batch2 + " of Date " + dt_of_batch2 + " Exists, Please Follow FIFO";
                    //                    try
                    //                    {
                    //                        list = new List<Team6>();
                    //                        list.Add(new Team6 { col1 = "Failure", col2 = retIcode, col3 = "-", col4 = "-", col5 = "-", col6 = chk_btch_query, });

                    //                    }
                    //                    catch { }
                    //                    return list;
                    //                }
                    //                else if (makeDouble(chk_dt_diff) == 0)
                    //                {
                    //                    string mydt = Regex.Split(list[0].col3, "#~#")[2].Trim();                                    
                    //                    DataTable dtShiv = new DataTable();
                    //                    SQuery = "select trim(a.icode)||trim(a.btchno) as fstr,c.iname as item_name,a.icode as item_code,c.cpartno,c.unit,a.btchno as Batch,sum(a.iqtyin)-sum(a.iqtyout) as balance,trim(a.icode)||trim(A.btchno) as bcode,a.refnum as job_no,to_Char(a.refdate,'dd/mm/yyyy') as job_dt,to_Char(a.refdate,'yyyymmdd') as sortdt from (select trim(icode) as icode,btchno,iqtyin,0 as iqtyout,'-' as binno,refnum,refdate from ivoucher where branchcd='" + work_br + "' and type like '%' and stage='" + list[0].col2.Trim().ToString() + "' and store in ('W','Y') and type!='39' and vchdate  " + xprdrnage + " union all select trim(icode) as icode,'-' as btchno,iqtyin,0 iqtyout,'-' as binno,vchnum refnum,vchdate refdate from WIPSTK where branchcd='" + work_br + "' and type like '50%' and stage='" + list[0].col2.Trim().ToString() + "' and vchdate " + xprdrnage + " union all select trim(icode) as icode,btchno,0 as iqtyin,iqtyout,'-' as binno,refnum,refdate from ivoucher where branchcd='" + work_br + "' and type like '%' and stage='" + list[0].col2.Trim().ToString() + "'  and store in ('W','Y') and vchdate " + xprdrnage + ") a,item c where trim(a.icode)=trim(c.icode) and trim(a.icode)||trim(a.btchno) not in ('" + team6.col6 + "') and trim(a.icode)='" + team6.col6.Left(8) + "' group by c.iname,a.icode,c.cpartno,c.unit,a.btchno,a.binno,trim(a.icode)||trim(A.btchno),a.refnum,to_Char(a.refdate,'dd/mm/yyyy'),to_Char(a.refdate,'yyyymmdd') having sum(a.iqtyin)-sum(a.iqtyout)>0 order by sortdt,a.btchno,a.icode";
                    //                    string myqry = "select * from (" + SQuery + ") where job_dt='" + mydt + "' and fstr<'" + team6.col6 + "' ";
                    //                    dtShiv = getdata(team6.col1, "-", myqry);
                    //                    if (dtShiv.Rows.Count > 0)
                    //                    {
                    //                        chk_btch_query = "Total Batch " + dtShiv.Rows.Count + " for Date " + mydt + " Exists.First Batch is " + dtShiv.Rows[0]["batch"].ToString().Trim() + "  , Please Follow FIFO !!";
                    //                        try
                    //                        {
                    //                            list = new List<Team6>();
                    //                            list.Add(new Team6 { col1 = "Failure", col2 = retIcode, col3 = "-", col4 = "-", col5 = "-", col6 = chk_btch_query, });
                    //                        }
                    //                        catch { }
                    //                        return list;
                    //                    }
                    //                }
                    //            }
                    //        }
                    //   }
                    //}
                    dtrows = dt.Rows.Count;
                    if (dtrows <= 0)
                    {
                        list.Add(new Team6 { col1 = "Failure", col2 = team6.col2, col3 = "-", col4 = "-", col5 = "-", col6 = "Record not found", });
                    }

                }
                return list;
                //}
            }
            catch (Exception e)
            {
                err = e.Message.ToString();

            }
            List<Team6> mylist = new List<Team6>();
            mylist.Add(new Team6 { col1 = results, col2 = "-", col3 = "-", col4 = "-", col5 = "-", col6 = err, });
            return mylist;
        }
        //public List<Team6> aInterStg_checkzz(Team6 team6)
        //{
        //    //-------------------------
        //    Fn_set_andapp_opts(team6.col1, "N");
        //    //------------------------

        //    string err = "", results = "";
        //    string Data_found = "N";
        //    string[] qrlist;
        //    string work_br;
        //    string[] scodelist;
        //    string ReturnVal = "";
        //    int cnt = 0;
        //    int dtrows = 0;
        //    work_br = fn_seek_iname(team6.col1, "", "Select AND_ENTBR from evas where username='" + team6.col3.ToUpper().Trim() + "'", "AND_ENTBR");
        //    try
        //    {
        //        mq = "-";
        //        scodelist = Regex.Split(team6.col2, team6.col5);
        //        cnt = scodelist.Length;
        //        for (int i = 0; i < cnt; i++)
        //        {
        //            if (mq.Equals("-")) mq = "'" + scodelist[i].ToString().Trim() + "'";
        //            else mq = mq + ",'" + scodelist[i].ToString().Trim() + "'";

        //        }

        //        branchwise(team6.col1, "", team6.col5);


        //        // shivam updated this code  *
        //        string scanned_code = team6.col6;
        //        string invdate = "";
        //        mq = "SELECT to_char(invdate, 'yyyymmdd') as invdate from ivoucher where iqtyin>0 and branchcd='" + work_br + "' and trim(vchnum)='" + scanned_code.Substring(18, 6) + "' and trim(stage)='" + scanned_code.Substring(15, 2) + "' and trim(btchno)='" + scanned_code.Substring(8, scanned_code.Length - 8) + "' and trim(icode)='" + scanned_code.Substring(0, 8) + "'";
        //        dt = new DataTable();
        //        dt = getdata(team6.col1, "-", mq);
        //        if (dt.Rows.Count > 0) ReturnVal = dt.Rows[0][0].ToString();
        //        foreach (DataRow row in dt.Rows)
        //        {
        //            invdate = row["invdate"].ToString();
        //        }

        //        string generateStringForQuery = work_br + scanned_code.Substring(15, 2) + scanned_code.Substring(8, scanned_code.Length - 8) + invdate + scanned_code.Substring(0, 8) + scanned_code.Substring(8, scanned_code.Length - 8);
        //        // shivam updated this code

        //        mq = "SELECT 'Success' as col1,trim(a.stage) as col2,trim(a.Icode)||' #~# '||trim(a.refnum)||' #~# '||trim(to_char(a.refdate, 'dd/mm/yyyy')) as col3,replace(trim(b.iname),'-','') as col4,trim(a.invno) as col5,TRIM(nvl(a.iqtyin,0)) as col6 from ivoucher a,item b where a.iqtyin>0 and trim(a.icode)=trim(B.icode) and a.branchcd='" + work_br + "' and A.branchcd||trim(A.stage)||trim(A.btchno)||to_char(A.invdate,'yyyymmdd')||trim(A.icode)||trim(A.invno) ='" + generateStringForQuery + "'";

        //        dt = getdata(team6.col1, "-", mq);
        //        if (dt.Rows.Count > 0) ReturnVal = dt.Rows[0][0].ToString();
        //        List<Team6> list = new List<Team6>();

        //        if (1 == 2)
        //        {

        //        }
        //        else
        //        {
        //            list = (from DataRow row in dt.Rows
        //                    select new Team6()
        //                    {
        //                        col1 = row["col1"].ToString(),
        //                        col2 = row["col2"].ToString(),
        //                        col3 = row["col3"].ToString(),
        //                        col4 = row["col4"].ToString(),
        //                        col5 = row["col5"].ToString(),
        //                        col6 = row["col6"].ToString(),
        //                    }).ToList();

        //            dtrows = dt.Rows.Count;
        //            if (dtrows <= 0)
        //            {
        //                list.Add(new Team6 { col1 = "Failure", col2 = team6.col2, col3 = "-", col4 = "-", col5 = "-", col6 = "Record not found", });
        //            }

        //        }
        //        return list;
        //        //}
        //    }
        //    catch (Exception e)
        //    {
        //        err = e.Message.ToString();

        //    }
        //    List<Team6> mylist = new List<Team6>();
        //    mylist.Add(new Team6 { col1 = results, col2 = "-", col3 = "-", col4 = "-", col5 = "-", col6 = err, });
        //    return mylist;
        //}
        //------------------------------------------------------------------

        //==================================================================
        public List<Team> aFGTAG_stack(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            //------------------------

            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";

            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 

            string save_conf_no = "-";
            string work_br = "";
            work_br = fn_seek_iname(team.col1, "", "Select AND_ENTBR from evas where username='" + team.col3.ToUpper().Trim() + "'", "AND_ENTBR");


            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            string FGvch_ph = fn_seek_iname(team.col1.ToUpper(), "", "SELECT upper(Trim(tname)) as tname FROM tab WHERE upper(Trim(tname))='FGSTKVCH_PH' ", "tname");

            string tabname = "WB_LOGIS_REC";
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();
                string mv_branch = "", mv_type = "", mv_location = "", mv_barcodeno = "";
                string stor_flg = "";
                string name_flg = "";
                string sql_cmd = "";
                for (int i = 0; i < qrlist.Length - 1; i++)
                {

                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");
                    if (colsVal.Length <= 1)
                    {

                    }
                    else
                    {
                        branchcd = colsVal[0].ToString().Trim();
                        if (work_br.Length == 2)
                        {
                            branchcd = work_br;
                        }
                        type = colsVal[1].ToString().Trim();

                        mv_location = colsVal[2].ToString().Trim();
                        if (team.col1 == "MVIN")
                        {
                            mv_barcodeno = mv_barcodeno + colsVal[3].ToString().Trim() + "','";
                        }
                        else
                        {
                            mv_barcodeno = colsVal[3].ToString().Trim();
                        }
                        if (cocd == "SVPL" || cocd == "GDOT")
                        {
                            if (type == "QC")
                            {
                                stor_flg = "Q";
                                name_flg = "gstvchnum";
                            }
                            if (type == "FG")
                            {
                                stor_flg = "Y";
                                name_flg = "tpt_names";
                            }
                            if (type == "PT")
                            {

                                sql_cmd = "update packrec SET COL5 = to_char(sysdate,'dd/mm/yyyy :hh24:mi:ss')||' - '||'" + team.col3.ToUpper().Trim() + "',COL4 = substr('" + mv_location + "',1,20) where branchcd='" + work_br + "' and Tagno='" + mv_barcodeno + "' and NUM1>0";
                                execute_cmd1(mycocd, sql_cmd);
                            }

                            sql_cmd = "update ivoucher SET store='" + stor_flg + "'," + name_flg + " = to_char(sysdate,'dd/mm/yyyy :hh24:mi:ss')||' - '||'" + team.col3.ToUpper().Trim() + "',location = substr('" + mv_location + "',1,20), INSPECTED='Y' where branchcd='" + work_br + "' and type='16' and branchcd||type||vchnum||to_char(vchdate,'yyyymmdd')||trim(icode)='" + mv_barcodeno + "' and iqtyin>0";
                        }
                        else if (cocd == "ARUB" || cocd == "SRUB")
                        {
                            stor_flg = "Y";
                            name_flg = "tpt_names";
                            sql_cmd = "update ivoucher SET store='" + stor_flg + "'," + name_flg + " = to_char(sysdate,'dd/mm/yyyy :hh24:mi:ss')||' - '||'" + team.col3.ToUpper().Trim() + "',location = substr('" + mv_location + "',1,20) where branchcd='" + work_br + "' and type like '1%' and branchcd||type||vchnum||to_char(vchdate,'yyyymmdd')||trim(icode)='" + mv_barcodeno + "' and iqtyin>0";
                        }

                        else if (cocd == "MVIN")
                        {
                            stor_flg = "Y";
                            name_flg = "tpt_names";
                        }
                        //else if (team.col1 == "CHPL" || team.col1 == "GDOT")
                        else if (team.col1 == "CHPL")
                        {
                            sql_cmd = "update packrec SET COL5 = to_char(sysdate,'dd/mm/yyyy :hh24:mi:ss')||' - '||'" + team.col3.ToUpper().Trim() + "',COL4 = substr('" + mv_location + "',1,20) where branchcd='" + work_br + "' and Tagno='" + mv_barcodeno + "' and NUM1>0";
                        }
                        else
                        {
                            sql_cmd = "update ivoucher SET gstvchnum = to_char(sysdate,'dd/mm/yyyy :hh24:mi:ss')||' - '||'" + team.col3.ToUpper().Trim() + "',location = substr('" + mv_location + "',1,20) where branchcd='" + work_br + "' and type='3A' and branchcd||type||vchnum||to_char(vchdate,'dd/mm/yyyy')||trim(binno)='" + mv_barcodeno + "' and iqtyin>0";
                        }
                        if (team.col1 != "MVIN")
                        {
                            execute_cmd1(mycocd, sql_cmd);
                        }

                        if (team.col1 == "SGRP")
                        {
                            //location = substr('" + mv_location + "',1,20) where branchcd='" + work_br + "' and type='3A' and branchcd||type||vchnum||to_char(vchdate,'dd/mm/yyyy')||trim(binno)='" + mv_barcodeno + "' and iqtyin>0
                            sql_cmd = "update ivoucher SET gstvchnum = to_char(sysdate,'dd/mm/yyyy :hh24:mi:ss')||' - '||'" + team.col3.ToUpper().Trim() + "',location = substr('" + mv_location + "',1,20) where branchcd='" + work_br + "' and branchcd||type||vchnum||to_char(vchdate,'yyyymmdd')||trim(icode)||trim(btchno)='" + mv_barcodeno + "' and iqtyin>0";
                            execute_cmd1(mycocd, sql_cmd);
                            sql_cmd = "update FGSTKVCH_PH SET RLOCN = substr('" + mv_location + "',1,20) where branchcd='" + work_br + "' and trim(icode)||trim(kclreelno) like substr('" + mv_barcodeno + "%',19,50) ";
                            execute_cmd1(mycocd, sql_cmd);

                        }


                        res = res + 1;
                    }
                }
                msg = res.ToString() + " Records " + " updated";

                if (team.col1 == "MVIN")
                {
                    sql_cmd = "update ivoucher SET store='Y'," + name_flg + " = to_char(sysdate,'dd/mm/yyyy :hh24:mi:ss')||' - '||'" + team.col3.ToUpper().Trim() + "',location = substr('" + mv_location + "',1,20) where branchcd='" + work_br + "' and type like '16%' and trim(invno) in ('" + mv_barcodeno + "') and iqtyin>0";
                    msg = execute_cmd1(mycocd, sql_cmd);
                    execute_cmd1(mycocd, "commit");
                }
            }


            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = save_conf_no, col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }


        //==================================================================
        public List<Team> aSV_MRRIQC_upd(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            //------------------------

            //inspection for sata vikas reel wise
            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";


            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 

            string save_conf_no = "-";
            string work_br = "";
            work_br = fn_seek_iname(team.col1, "", "Select AND_ENTBR from evas where username='" + team.col3.ToUpper().Trim() + "'", "AND_ENTBR");


            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            string tabname = "REELVCH";
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();


                string sql_cmd = "";
                for (int i = 0; i < qrlist.Length; i++)
                {

                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");
                    if (colsVal.Length <= 1)
                    {

                    }
                    else
                    {

                        string mv_branch = "", mv_type = "", mv_scan = "", mv_icode = "";
                        string mv_okqty = "", mv_rejqty = "", mv_reason = "";

                        branchcd = colsVal[0].ToString().Trim();
                        if (work_br.Length == 2)
                        {
                            branchcd = work_br;
                        }
                        type = colsVal[1].ToString().Trim();
                        mv_scan = colsVal[2].ToString().Trim();
                        mv_icode = colsVal[3].ToString().Trim();
                        mv_okqty = colsVal[4].ToString().Trim();
                        mv_rejqty = colsVal[5].ToString().Trim();
                        mv_reason = colsVal[6].ToString().Trim();

                        string link_mrr = "";
                        link_mrr = fn_seek_iname(team.col1, "", "Select branchcd||type||vchnum||to_char(vchdate,'dd/mm/yyyy')||trim(icode) as fstr from reelvch where branchcd='" + work_br + "' and type like '0%' and trim(icode)||trim(KCLREELNO)='" + mv_scan + "' and reelwin>0", "fstr");

                        //if (makeDouble(mv_rejqty) > 0)
                        //{
                        //    sql_cmd = "update REELVCH SET  REELWIN=" + mv_okqty + ",REEL_REJQTY=" + mv_rejqty + ",rinsp_by= '" + team.col3.ToUpper().Trim() + "' where branchcd='" + work_br + "' and type like '0%' and trim(icode)||trim(KCLREELNO)='" + mv_scan + "' and reelwin>0";
                        //    execute_cmd1(mycocd, sql_cmd);

                        //    sql_cmd = "update ivoucher SET  acpt_id=" + mv_okqty + ",iqtyin=" + mv_okqty + ",rej_Rw=" + mv_rejqty + ",inspected='Y',actual_insp='Y',qc_Date=sysdate,qcdate=to_char(sysdate,'dd/mm/yyyy'),pname= '" + team.col3.ToUpper().Trim() + "' where branchcd='" + work_br + "' and type like '0%' and branchcd||type||vchnum||to_char(vchdate,'dd/mm/yyyy')||trim(icode)='" + link_mrr + "' and store<>'R' ";
                        //    sql_cmd = "update ivoucher SET  acpt_ud=iqtyin-" + mv_rejqty + ",iqtyin=iqtyin-" + mv_rejqty + ",rej_Rw=" + mv_rejqty + ",inspected='Y',actual_insp='Y',qc_Date=sysdate,qcdate=to_char(sysdate,'dd/mm/yyyy'),pname= '" + team.col3.ToUpper().Trim() + "' where branchcd='" + work_br + "' and type like '0%' and branchcd||type||vchnum||to_char(vchdate,'dd/mm/yyyy')||trim(icode)='" + link_mrr + "' and store<>'R' ";

                        //    execute_cmd1(mycocd, sql_cmd);

                        //    sql_cmd = "insert into ivoucher(branchcd,type,vchnum,vchdate,acode,icode,irate,iqtyin,iqtyout,desc_,pname,qc_Date,store,rec_iss,ent_by,ent_dt,edt_by,edt_dt)(select branchcd,type,vchnum,vchdate,acode,icode,irate,REEL_REJQTY,0 ,'Rejn '||trim(kcleelno),rinsp_by,sysdate,'R','D',rinsp_by,sysdate,'-',sysdate from reelvch where branchcd='" + work_br + "' and type like '0%' and branchcd||type||vchnum||to_char(vchdate,'dd/mm/yyyy')||trim(icode)='" + link_mrr + "')";
                        //    execute_cmd1(mycocd, sql_cmd);

                        //}
                        //else
                        //{
                        //       //sql_cmd = "update ivoucher SET  acpt_ud=iqtyin,rej_Rw=0,inspected='Y',actual_insp='Y',qc_Date=sysdate,qcdate=to_char(sysdate,'dd/mm/yyyy'),pname= '" + team.col3.ToUpper().Trim() + "' where branchcd='" + work_br + "' and type like '0%' and branchcd||type||vchnum||to_char(vchdate,'dd/mm/yyyy')||trim(icode)='" + link_mrr + "' and nvl(store,'-')<>'R' ";
                        //        sql_cmd = "update ivoucher SET  acpt_ud=iqtyin,rej_Rw=0,inspected='Y',actual_insp='Y',qc_Date=sysdate,qcdate=to_char(sysdate,'dd/mm/yyyy'),pname= '" + team.col3.ToUpper().Trim() + "' where branchcd='" + work_br + "' and type like '0%' and to_char(a.vchdate,'yyyymmdd')||a.vchnum||a.type||a.branchcd ='" + mv_scan + "' and nvl(store,'-')<>'R' ";
                        //        execute_cmd1(mycocd, sql_cmd);                            

                        //    sql_cmd = "update REELVCH SET rinsp_by= '" + team.col3.ToUpper().Trim() + "' where branchcd='" + work_br + "' and type like '0%' and trim(icode)||trim(KCLREELNO)='" + mv_scan + "' and reelwin>0";
                        //    execute_cmd1(mycocd, sql_cmd);

                        //}

                        switch (team.col1)
                        {
                            case "GDOT":
                            case "GCAP":
                                if (makeDouble(mv_rejqty) > 0)
                                {

                                    sql_cmd = "update ivoucher SET  acpt_ud=" + mv_okqty + ",iqtyin=" + mv_okqty + ",rej_Rw=" + mv_rejqty + ",inspected='Y',actual_insp='Y',qc_Date=sysdate,store='Y',qcdate=to_char(sysdate,'dd/mm/yyyy'),pname= '" + team.col3.ToUpper().Trim() + "' where branchcd='" + work_br + "' and type like '0%' and to_char(vchdate,'yyyymmdd')||vchnum||type||branchcd='" + mv_scan + "' and store<>'R' ";
                                    execute_cmd1(mycocd, sql_cmd);

                                }
                                else
                                {
                                    sql_cmd = "update ivoucher SET  acpt_ud=iqtyin,rej_Rw=0,inspected='Y',actual_insp='Y',store='Y',qc_Date=sysdate,qcdate=to_char(sysdate,'dd/mm/yyyy'),pname= '" + team.col3.ToUpper().Trim() + "' where branchcd='" + work_br + "' and type like '0%' and to_char(vchdate,'yyyymmdd')||vchnum||type||branchcd='" + mv_scan + "' and nvl(store,'-')<>'R' ";
                                    execute_cmd1(mycocd, sql_cmd);
                                }
                                break;

                            default:
                                if (makeDouble(mv_rejqty) > 0)
                                {
                                    sql_cmd = "update REELVCH SET  REELWIN=" + mv_okqty + ",REEL_REJQTY=" + mv_rejqty + ",rinsp_by= '" + team.col3.ToUpper().Trim() + "' where branchcd='" + work_br + "' and type like '0%' and trim(icode)||trim(KCLREELNO)='" + mv_scan + "' and reelwin>0";
                                    execute_cmd1(mycocd, sql_cmd);

                                    sql_cmd = "update ivoucher SET  acpt_ud=" + mv_okqty + ",iqtyin=" + mv_okqty + ",rej_Rw=" + mv_rejqty + ",inspected='Y',actual_insp='Y',qc_Date=sysdate,qcdate=to_char(sysdate,'dd/mm/yyyy'),pname= '" + team.col3.ToUpper().Trim() + "' where branchcd='" + work_br + "' and type like '0%' and branchcd||type||vchnum||to_char(vchdate,'dd/mm/yyyy')||trim(icode)='" + link_mrr + "' and store<>'R' ";
                                    sql_cmd = "update ivoucher SET  acpt_ud=iqtyin-" + mv_rejqty + ",iqtyin=iqtyin-" + mv_rejqty + ",rej_Rw=" + mv_rejqty + ",inspected='Y',actual_insp='Y',qc_Date=sysdate,qcdate=to_char(sysdate,'dd/mm/yyyy'),pname= '" + team.col3.ToUpper().Trim() + "' where branchcd='" + work_br + "' and type like '0%' and branchcd||type||vchnum||to_char(vchdate,'dd/mm/yyyy')||trim(icode)='" + link_mrr + "' and store<>'R' ";

                                    execute_cmd1(mycocd, sql_cmd);

                                    sql_cmd = "insert into ivoucher(branchcd,type,vchnum,vchdate,acode,icode,irate,iqtyin,iqtyout,desc_,pname,qc_Date,store,rec_iss,ent_by,ent_dt,edt_by,edt_dt)(select branchcd,type,vchnum,vchdate,acode,icode,irate,REEL_REJQTY,0 ,'Rejn '||trim(kcleelno),rinsp_by,sysdate,'R','D',rinsp_by,sysdate,'-',sysdate from reelvch where branchcd='" + work_br + "' and type like '0%' and branchcd||type||vchnum||to_char(vchdate,'dd/mm/yyyy')||trim(icode)='" + link_mrr + "')";
                                    execute_cmd1(mycocd, sql_cmd);

                                }
                                else
                                {
                                    sql_cmd = "update REELVCH SET rinsp_by= '" + team.col3.ToUpper().Trim() + "' where branchcd='" + work_br + "' and type like '0%' and trim(icode)||trim(KCLREELNO)='" + mv_scan + "' and reelwin>0";
                                    execute_cmd1(mycocd, sql_cmd);

                                    sql_cmd = "update ivoucher SET  acpt_ud=iqtyin,rej_Rw=0,inspected='Y',actual_insp='Y',qc_Date=sysdate,qcdate=to_char(sysdate,'dd/mm/yyyy'),pname= '" + team.col3.ToUpper().Trim() + "' where branchcd='" + work_br + "' and type like '0%' and branchcd||type||vchnum||to_char(vchdate,'dd/mm/yyyy')||trim(icode)='" + link_mrr + "' and nvl(store,'-')<>'R' ";
                                    execute_cmd1(mycocd, sql_cmd);
                                }
                                break;
                        }

                        res = res + 1;
                    }

                }

                msg = res.ToString() + " Records " + " Inspected by " + team.col3.ToUpper().Trim();
            }

            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = save_conf_no, col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }

        public List<Team> aJOB_START(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            //------------------------

            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";

            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 

            string save_conf_no = "-";
            string work_br = "";
            work_br = fn_seek_iname(team.col1, "", "Select AND_ENTBR from evas where username='" + team.col3.ToUpper().Trim() + "'", "AND_ENTBR");

            string mv_branch = "", mv_type = "", mv_location = "", mv_barcodeno = "";
            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            string tabname = "WB_LOGIS_REC";
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();


                string sql_cmd = "";
                for (int i = 0; i < qrlist.Length; i++)
                {

                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");
                    if (1 == 2)
                    {

                    }
                    else
                    {
                        mv_location = fn_seek_iname(team.col1, "00", "SELECT to_char(sysdate,'dd/mm :hh24:mi') AS SYSD FROM DUAL", "SYSD");

                        mv_barcodeno = team.col5;
                        sql_cmd = "update costestimate SET ALTITEM = to_char(sysdate,'dd/mm/yyyy :hh24:mi')||' - '||'" + team.col3.ToUpper().Trim() + "' where branchcd='" + work_br + "' and type='30' and branchcd||type||vchnum||to_char(vchdate,'dd/mm/yyyy')='" + mv_barcodeno + "'";

                        execute_cmd1(mycocd, sql_cmd);
                        res = res + 1;
                    }

                }

                msg = "Start " + mv_location;
            }

            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = save_conf_no, col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }

        //---------------------------------------------------------------------------
        public List<Team6> aFGTAG_check(Team6 team6)
        {
            //-------------------------
            Fn_set_andapp_opts(team6.col1, "N");
            //------------------------

            string err = "", results = "";
            string Data_found = "N";
            string[] qrlist;
            string[] scodelist;
            string ReturnVal = "";
            int cnt = 0;
            int dtrows = 0;            
            string mydate = DateTime.Now.ToString("dd/MM/yyyy");
            string frm_cDt1 = "";
            string frm_cDt2 = "";
            string xprdRange = "", mq_ss_icode="";
            frm_cDt1 = fn_seek_iname(team6.col1, "", "Select to_Char(fmdate,'dd/mm/yyyy') as fmdt from co where code like '" + team6.col1 + "%' and FMDATE<=TO_DATE('" + mydate + "','DD/MM/YYYY') AND TODATE>=TO_DATE('" + mydate + "','DD/MM/YYYY') order by fmdate desc", "fmdt");
            frm_cDt2 = fn_seek_iname(team6.col1, "", "Select to_Char(todate,'dd/mm/yyyy') as fmdt from co where code like '" + team6.col1 + "%' and to_CHAR(FMDATE,'DD/MM/YYYY')='" + frm_cDt1 + "' order by fmdate desc", "fmdt");

            xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";

            string fldfevas = "", work_br = "", sman_id = "";
            fldfevas = fn_seek_iname(team6.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team6.col3.ToUpper().Trim() + "'", "fstr");

            work_br = "00";
            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
            }

            try
            {
                mq = "-";
                scodelist = Regex.Split(team6.col2, team6.col5);
                cnt = scodelist.Length;
                for (int i = 0; i < cnt; i++)
                {
                    if (mq.Equals("-")) mq = "'" + scodelist[i].ToString().Trim() + "'";
                    else mq = mq + ",'" + scodelist[i].ToString().Trim() + "'";
                    /*---------surendar---------*/
                         if ((mq.Trim() != "0" && team6.col1 == "ARUB") && team6.col6 == "EP824")
                         {
                           string[] colsVal = Regex.Split(mq.ToString(), ",");                        
                            mq_ss = colsVal[0].ToString().Substring(0,9).Trim() + "'";
                            mq_ss_icode = colsVal[0].ToString().Substring(9,19).Trim();                        
                         }                  
                        /*---------surendar---------*/
                        if (mq.Trim() != "0" && team6.col1=="GDOT")
                        {
                        string[] colsVal = Regex.Split(mq.ToString(), ",");
                        if (colsVal.Length <= 1)
                        {
                         
                        }
                        else
                        {
                            mq_ss_icode = colsVal[0].ToString().Trim() + "'";
                            mq_ss = "'" + colsVal[1].ToString().Trim() + "'";

                        }
                    }
                    /*---------surendar---------*/

                }


                branchwise(team6.col1, "", team6.col5);

                dt = new DataTable();
               

                List<Team6> list2 = new List<Team6>();
                switch (team6.col1)
                {
                    case "CHPL":
                    case "GDOT":
                        if (team6.col6 == "FGSTACK")
                        {
                            //mq1 = "SELECT 'Success' as col1,trim(a.icode) as col2,a.BRANCHCD||A.TYPE||A.VCHNUM||TO_CHAR(a.VCHDATE,'YYYYMMDD')||TRIM(A.icode) as col3,replace(trim(b.iname),'-','') as col4,TRIM(A.icode)||TRIM(A.invno) as col5,TRIM(nvl(a.IQTYIN,0)) as col6 from IVOUCHER a,item b where trim(a.icode)=trim(B.icode) and a.BRANCHCD='" + work_br + "' and a.iqtyin>0 and a.store='W' and A.stage='69' AND TRIM(A.invno) = " + mq_ss + " AND TRIM(A.icode)||TRIM(A.invno) not in (select trim(icode)||trim(btchno) from ivoucher where BRANCHCD='" + work_br + "' and type in ('17','19') and TRIM(icode)||TRIM(btchno) in (" + mq + ") )  ORDER BY A.VCHDATE DESC";
                            mq1 = "SELECT 'Success' as col1,trim(a.icode) as col2,a.BRANCHCD||A.TYPE||A.VCHNUM||TO_CHAR(a.VCHDATE,'YYYYMMDD')||TRIM(A.icode) as col3,replace(trim(b.iname),'-','') as col4,TRIM(A.icode)||TRIM(A.invno) as col5,TRIM(nvl(a.IQTYIN,0)) as col6 from IVOUCHER a,item b where trim(a.icode)=trim(B.icode) and a.BRANCHCD='" + work_br + "' and a.iqtyin>0 and a.store='W' and A.stage='61' AND TRIM(A.invno) = " + mq_ss + " AND TRIM(A.icode)||TRIM(A.BTCHNO) not in (select trim(icode)||trim(btchno) from ivoucher where BRANCHCD='" + work_br + "' and type in ('17','19') and TRIM(BTCHNO) in (" + mq_ss + ") )  ORDER BY A.VCHDATE DESC";

                            dt = getdata(team6.col1, "-", mq1);
                                               
                        }
                        else if (team6.col6 == "EP1212")
                        {
                            mq1 = "SELECT 'Success' as col1,trim(a.iqtyin) as col2,trim(a.invno) as col3,replace(trim(b.iname),'-','') as col4,TRIM(A.btchno) as col5,TRIM(a.icode) as col6 from IVOUCHER a, item b where trim(a.icode)= trim(b.icode) and a.BRANCHCD='" + work_br + "' and a.iqtyin > 0 AND TRIM(A.btchno) = " + mq_ss + "  AND TYPE IN ('17', '19') AND trim(a.iqtyin)>0";
                            dt = getdata(team6.col1, "-", mq1);

                        }
                        else
                        {
                            mq1 = "SELECT 'Success' as col1,trim(a.icode) as col2,a.tagno as col3,replace(trim(b.iname),'-','') as col4,TRIM(A.icode)||TRIM(A.tagno) as col5,1 as col6 from packrec a,item b where trim(a.icode)=trim(B.icode) and a.BRANCHCD='" + work_br + "' and A.type='PT' AND TRIM(A.tagno) in (" + mq_ss + ") AND trim(nvl(a.col4,'-'))='-' ORDER BY A.VCHDATE DESC";
                            dt = getdata(team6.col1, "-", mq1);
                        }
                        break;

                    case "MVIN":

                        int xcount = 0;
                        //string check_physical = "select count(*) as xcount from WB_PHY_REC where branchcd='" + work_br + "' and trim(batch_no)=" + mq.Trim() + "";
                        //xcount = Convert.ToInt32(fn_seek_iname(team6.col1, "", check_physical, "xcount"));
                        //if (xcount > 0)
                        //{
                        //    list2 = new List<Team6>();
                        //    list2.Add(new Team6 { col1 = "Failure", col2 = "Sorry, This Items You Already Received In Physical!", col3 = "-", col4 = "-", col5 = "-", col6 = "Sorry, This Item You Already Scanned Before!", }); ;
                        //    return list2;
                        //}

                        string sql_cmd = "select count(*) as xcount from ivoucher where branchcd='" + work_br + "' and type like '16%' and trim(invno)=substr(" + mq.Trim() + ",21,10) and store='Y' and NVL(TRIM(TPT_NAMES), '-') != '-' and iqtyin>0";
                        xcount = Convert.ToInt32(fn_seek_iname(team6.col1, "", sql_cmd, "xcount"));
                        if (xcount > 0)
                        {
                            list2 = new List<Team6>();
                            list2.Add(new Team6 { col1 = "Failure", col2 = "Sorry, This Items You Already Scanned Before!", col3 = "-", col4 = "-", col5 = "-", col6 = "Sorry, This Item You Already Scanned Before!", }); ;
                            return list2;
                        }
                        else
                        {
                            Squery = "select icode,btchno,sum(iqtyin) as tot from (select trim(icode) As icode,trim(invno) as btchno,iqtyin from ivoucher where branchcd='" + work_br + "' and type='16' and trim    (invno)=substr(" + mq.Trim() + ",21,10) union all select trim(icode) As icode,trim(invno) as btchno,-1*qtysupp from despatch where branchcd='" + work_br + "' and substr    (type,1,1)='4' and trim(no_bdls)=substr(" + mq.Trim() + ",21,10) ) group by icode,btchno having sum(iqtyin)>0 ";
                            mq1 = "SELECT 'Success' as col1,trim(a.icode) as col2,trim(a.btchno) as col3,replace(trim(b.iname),'-','') as col4,trim(A.btchno) as col5,a.tot as col6 from (" + Squery + ") a,item b where trim(a.icode)=trim(B.icode)  ";
                            dt = getdata(team6.col1, "-", mq1);
                        }

                        //mq1 = "SELECT 'Success' as col1,trim(a.icode) as col2,a.BRANCHCD||A.TYPE||A.VCHNUM||TO_CHAR(a.VCHDATE,'YYYYMMDD')||TRIM(A.icode) as col3,replace(trim(b.iname),'-','')  as col4,'-' as col5,TRIM(nvl(a.IQTYIN,0)) as col6 from IVOUCHER a,item b where and a.BRANCHCD='" + work_br + "' and A.TYPE like '1%' ANtrim(a.btchno) as  col3'YYYYMMDD')||TRIM(A.icode) in (" + mq + ") and a.iqtyin>0 ORDER BY A.VCHDATE DESC";
                        break;
                    case "SVPL":
                    case "SRUB":
                    case "ARUB":
                        if (team6.col1 == "SVPL" )
                        {
                            if (team6.col6 == "QC")
                            {
                                mq1 = "select count(*) as xcount from ivoucher where branchcd='" + work_br + "' and type='16' and BRANCHCD||TYPE||VCHNUM||TO_CHAR(VCHDATE,'YYYYMMDD')||TRIM(icode) in (" + mq + ") and trim(inspected)='Y' and trim(store) in ('Q','Y') and iqtyin>0";
                            }
                            else { mq1 = "select count(*) as xcount from ivoucher where branchcd='" + work_br + "' and type='16' and BRANCHCD||TYPE||VCHNUM||TO_CHAR(VCHDATE,'YYYYMMDD')||TRIM(icode) in (" + mq + ") and trim(inspected)='Y' and trim(store)='Y' and iqtyin>0"; }
                            sql_cmd = mq1;
                            xcount = Convert.ToInt32(fn_seek_iname(team6.col1, "", sql_cmd, "xcount"));
                            if (xcount > 0)
                            {
                                list2 = new List<Team6>();
                                list2.Add(new Team6 { col1 = "Failure", col2 = "Sorry, This FG Sticker You Already Scanned Before!", col3 = "-", col4 = "-", col5 = "-", col6 = "Sorry, This Item You Already Scanned Before!", }); ;
                                return list2;
                            }
                        }
                        if (team6.col1 == "ARUB" && team6.col6 == "EP824")
                        {
                            //mq1 = "SELECT 'Success' as col1,trim(a.icode) as col2,a.BRANCHCD||A.TYPE||A.VCHNUM||TO_CHAR(a.VCHDATE,'YYYYMMDD')||TRIM(A.icode) as col3,replace(trim(b.iname),'-','') as col4,'-' as col5,TRIM(nvl(a.IQTYIN,0)) as col6 from IVOUCHER a,item b where trim(a.icode)=trim(B.icode) and a.BRANCHCD='" + work_br + "' and A.TYPE like '17' AND A.VCHDATE " + xprdRange + " AND TRIM(A.icode) in (" + mq_ss + ") and BTCHNO='" + mq_ss_icode + "' and a.iqtyin>0 ORDER BY A.VCHDATE DESC";
                            mq1 = "Select 'Success' as col1, trim(A.icode)||TRIM(BTCHNO) as col2,TRIM(btchno) as col3,replace(trim(b.iname),'-','') as col4,TRIM(BTCHNO) as col5,trim(A.icode) as ERP_Code,sum(reelop)+sum(reelinw)-sum(reeloutw) as col6 from (select branchcd,icode,0 as op,0 as cdr,0 as ccr,0 as clos,0 as reelop,iqtyin as reelinw,0 as reeloutw,0 as reelclos,btchno from ivoucher where branchcd='" + work_br + "' and type in ('17','19') and VCHDATE " + xprdRange + "  and icode=" + mq_ss + " AND BTCHNO='" + mq_ss_icode + "' union all select branchcd, icode,0 as op,0 as cdr,0 as ccr,0 as clos,0 as reelop,0 as reelinw,qtysupp as reeloutw,0 as reelclos,No_bdls from despatch where branchcd = '" + work_br + "' and(type like '4%' or type like '6%') and packdate " + xprdRange + " and icode = " + mq_ss + " AND NO_BDLS = '" + mq_ss_icode + "') a , item b, type c,type d where c.id = 'B' and trim(A.branchcd)= trim(c.type1) and d.id = 'Y' and substr(A.icode,1,2)= trim(d.type1) and trim(A.icode)= trim(B.icodE)  group by c.Vchnum,d.Name,b.Iname,trim(A.icode),b.unit,b.cpartno,a.branchcd,substr(trim(a.icode), 1, 2),substr(trim(a.icode), 1, 4),b.SERVICABLE ,TRIM(a.BTCHNO) having sum(reelop)+sum(reelinw) + sum(reeloutw) > 0 order by substr(trim(a.icode), 1, 4),b.Iname";
                            dt = getdata(team6.col1, "-", mq1);
                        }
                        else
                        {
                            mq1 = "SELECT 'Success' as col1,trim(a.icode) as col2,a.BRANCHCD||A.TYPE||A.VCHNUM||TO_CHAR(a.VCHDATE,'YYYYMMDD')||TRIM(A.icode) as col3,replace(trim(b.iname),'-','') as col4,'-' as col5,TRIM(nvl(a.IQTYIN,0)) as col6 from IVOUCHER a,item b where trim(a.icode)=trim(B.icode) and a.BRANCHCD='" + work_br + "' and A.TYPE like '1%' AND A.VCHDATE " + xprdRange + " AND a.BRANCHCD||A.TYPE||A.VCHNUM||TO_CHAR(a.VCHDATE,'YYYYMMDD')||TRIM(A.icode) in (" + mq + ") and a.iqtyin>0 ORDER BY A.VCHDATE DESC";
                            dt = getdata(team6.col1, "-", mq1);
                        }
                        break;
                    default:
                        switch (team6.col6)
                        {
                            case "FG173C":
                                //prodn rcvd
                                mq1 = "SELECT 'Success' as col1,trim(a.icode) as col2,a.BRANCHCD||A.TYPE||A.VCHNUM||TO_CHAR(a.VCHDATE,'YYYYMMDD')||TRIM(A.icode) as col3,replace(trim(b.iname),'-','') as col4,TRIM(A.icode)||TRIM(A.invno) as col5,TRIM(nvl(a.IQTYIN,0)) as col6 from IVOUCHER a,item b where trim(a.icode)=trim(B.icode) and a.BRANCHCD='" + work_br + "' and a.iqtyin>0 and a.store='W' and A.stage='69' AND TRIM(A.icode)||TRIM(A.invno) in (" + mq + ") AND TRIM(A.icode)||TRIM(A.invno) not in (select trim(icode)||trim(btchno) from ivoucher where BRANCHCD='" + work_br + "' and type in ('17','19') and TRIM(icode)||TRIM(btchno) in (" + mq + ") )  ORDER BY A.VCHDATE DESC";
                                dt = getdata(team6.col1, "-", mq1);
                                break;
                            case "FGSTACK":
                                mq1 = "SELECT 'Success' as col1,trim(a.icode) as col2,a.BRANCHCD||A.TYPE||A.VCHNUM||TO_CHAR(a.VCHDATE,'YYYYMMDD')||TRIM(A.icode)||TRIM(A.btchno) as col3,replace(trim(b.iname),'-','') as col4,TRIM(A.icode)||TRIM(A.invno) as col5,TRIM(nvl(a.IQTYIN,0)) as col6 from IVOUCHER a,item b where trim(a.icode)=trim(B.icode) and a.BRANCHCD='" + work_br + "' and A.type in ('17','19') AND TRIM(A.icode)||TRIM(A.btchno) in (" + mq + ") and a.iqtyin>0 ORDER BY A.VCHDATE DESC";
                                dt = getdata(team6.col1, "-", mq1);
                                break;
                            default:
                                dt = getdata(team6.col1, "-", "SELECT 'Success' as col1,trim(a.icode) as col2,trim(a.BRANCHCD||A.TYPE||A.VCHNUM||TO_CHAR(a.VCHDATE,'DD/MM/YYYY')||TRIM(A.BINNO)) as col3,replace(trim(b.iname),'-','') as col4,'-' as col5,TRIM(nvl(IQTYIN,0)) as col6 from IVOUCHER a,item b where trim(a.icode)=trim(B.icode) and a.BRANCHCD='" + work_br + "' and A.TYPE ='3A' AND A.VCHDATE " + xprdRange + " AND replace(trim(a.BINNO),'-','') in (" + mq + ") and a.iqtyin>0 ORDER BY A.VCHDATE DESC");
                                break;
                        }
                        break;
                }

                if (dt.Rows.Count > 0) ReturnVal = dt.Rows[0][0].ToString();
                List<Team6> list = new List<Team6>();

                if (1 == 2)
                {

                }
                else
                {
                    list = (from DataRow row in dt.Rows
                            select new Team6()
                            {
                                col1 = row["col1"].ToString(),
                                col2 = row["col2"].ToString(),
                                col3 = row["col3"].ToString(),
                                col4 = row["col4"].ToString(),
                                col5 = row["col5"].ToString(),
                                col6 = row["col6"].ToString(),
                            }).ToList();

                    dtrows = dt.Rows.Count;
                    if (dtrows <= 0)
                    {
                        list.Add(new Team6 { col1 = "Failure", col2 = team6.col2, col3 = "-", col4 = "-", col5 = "-", col6 = "Record not found", });
                    }

                }
                return list;
                //}
            }
            catch (Exception e)
            {
                err = e.Message.ToString();

            }
            List<Team6> mylist = new List<Team6>();
            mylist.Add(new Team6 { col1 = results, col2 = "-", col3 = "-", col4 = "-", col5 = "-", col6 = err, });
            return mylist;
        }

        public List<Team6> aMCTAG_check(Team6 team6)
        {
            //-------------------------
            Fn_set_andapp_opts(team6.col1, "N");
            //------------------------

            string err = "", results = "";
            string Data_found = "N";
            string[] qrlist;
            string[] scodelist;
            string ReturnVal = "";
            int cnt = 0;
            int dtrows = 0;
            string mydate = DateTime.Now.ToString("dd/MM/yyyy");
            string frm_cDt1 = "";
            string frm_cDt2 = "";
            string xprdRange = "";
            frm_cDt1 = fn_seek_iname(team6.col1, "", "Select to_Char(fmdate,'dd/mm/yyyy') as fmdt from co where code like '" + team6.col1 + "%' and FMDATE<=TO_DATE('" + mydate + "','DD/MM/YYYY') AND TODATE>=TO_DATE('" + mydate + "','DD/MM/YYYY') order by fmdate desc", "fmdt");
            frm_cDt2 = fn_seek_iname(team6.col1, "", "Select to_Char(todate,'dd/mm/yyyy') as fmdt from co where code like '" + team6.col1 + "%' and to_CHAR(FMDATE,'DD/MM/YYYY')='" + frm_cDt1 + "' order by fmdate desc", "fmdt");

            xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";

            string fldfevas = "", work_br = "", sman_id = "";
            work_br = "00";
            fldfevas = fn_seek_iname(team6.col1, "", "Select trim(AND_ENTBR)||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team6.col5.ToUpper().Trim() + "'", "fstr");

            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
            }

            try
            {
                mq = "-";
                scodelist = Regex.Split(team6.col2, team6.col5);
                cnt = scodelist.Length;
                for (int i = 0; i < cnt; i++)
                {
                    if (mq.Equals("-")) mq = "'" + scodelist[i].ToString().Trim() + "'";
                    else mq = mq + ",'" + scodelist[i].ToString().Trim() + "'";

                }

                branchwise(team6.col1, "", team6.col5);

                dt = new DataTable();


                if (team6.col1 == "ADVG" || team6.col1 == "CHPL")
                {
                    dt = getdata(team6.col1, "-", "SELECT 'Success' as col1,replace(trim(a.assetid),'-','') as col2,replace(trim(a.assetname),'-','') as col3,replace(trim(a.ast_Desc),'-','') as col4,replace(trim(a.assetsupp),'-','') as col5,to_char(a.instdt,'dd/mm/yyyy') as col6 from wb_Fa_pur a where A.TYPE ='10' AND trim(a.branchcd)||'-'||trim(a.grpcode)||'-'||trim(a.sgrpcode)||'-'||trim(a.acode) in (" + mq + ") ");
                }
                else
                {
                    dt = getdata(team6.col1, "-", "SELECT 'Success' as col1,trim(a.mchname) as col2,trim(a.BRANCHCD||A.TYPE||A.VCHNUM||TO_CHAR(a.VCHDATE,'DD/MM/YYYY')||TRIM(A.mchcode)) as col3,replace(trim(a.mchname),'-','') as col4,'-' as col5,1 as col6 from pmaint a where a.BRANCHCD='" + work_br + "' and A.TYPE ='10' AND replace(trim(a.mchcode),'-','') in (" + mq + ") ");
                }




                if (dt.Rows.Count > 0) ReturnVal = dt.Rows[0][0].ToString();
                List<Team6> list = new List<Team6>();

                if (1 == 2)
                {

                }
                else
                {
                    list = (from DataRow row in dt.Rows
                            select new Team6()
                            {
                                col1 = row["col1"].ToString(),
                                col2 = row["col2"].ToString(),
                                col3 = row["col3"].ToString(),
                                col4 = row["col4"].ToString(),
                                col5 = row["col5"].ToString(),
                                col6 = row["col6"].ToString(),
                            }).ToList();

                    dtrows = dt.Rows.Count;
                    if (dtrows <= 0)
                    {
                        list.Add(new Team6 { col1 = "Failure", col2 = team6.col2, col3 = "-", col4 = "-", col5 = "-", col6 = "Record not found", });
                    }

                }
                return list;
                //}
            }
            catch (Exception e)
            {
                err = e.Message.ToString();

            }
            List<Team6> mylist = new List<Team6>();
            mylist.Add(new Team6 { col1 = results, col2 = "-", col3 = "-", col4 = "-", col5 = "-", col6 = err, });
            return mylist;
        }

        //=================================================================
        public List<Team6> aCure_check(Team6 team6)
        {
            //-------------------------
            Fn_set_andapp_opts(team6.col1, "N");
            //------------------------

            string err = "", results = "";
            string Data_found = "N";
            string[] qrlist;
            string[] scodelist;
            string ReturnVal = "";
            int cnt = 0;
            int dtrows = 0;
            try
            {
                mq = "-";
                scodelist = Regex.Split(team6.col2, team6.col5);
                cnt = scodelist.Length;
                for (int i = 0; i < cnt; i++)
                {
                    if (mq.Equals("-")) mq = "'" + scodelist[i].ToString().Trim() + "'";
                    else mq = mq + ",'" + scodelist[i].ToString().Trim() + "'";

                }

                branchwise(team6.col1, "", team6.col5);

                dt = new DataTable();

                if (team6.col2.Substring(6, 1) == "0")
                {
                    Squery = "select (Case when Mins_elapse>=720 then 'Ok to Tfr' Else 'Pending Cure' end) as Col1,iname as col2,Serial_NO as Col3,Cdrgno as col4,ENTRY_dT as col5,Mins_elapse as col6 from (SELECT B.iNAME,TRIM(UPPER(A.COL4)) AS Serial_NO,trim(A.ICODE) as ERP_Code,b.Cdrgno,MAX(a.ENT_dT) AS ENTRY_dT,max(time_elap) as Mins_elapse,SUM(QTY) AS Serial_Qty FROM (SELECT ICODE,COL4,1 AS QTY,ENT_DT,round(sysdate-ENT_DT,2)*60*24 as time_elap FROM MULTIVCH WHERE " + branch_cd + " AND TYPE='YR' and vchdaTE>to_DaTE('01/04/2021','dd/mm/yyyy') UNION ALL SELECT ICODE,COL4,-1 AS QTY,NULL AS ENT_DT,NULL AS VCHDATE FROM MULTIVCH WHERE " + branch_cd + " AND TYPE='YI' and vchdaTE>to_DaTE('01/04/2021','dd/mm/yyyy') )a,item b where trim(A.icode)=trim(B.icode)  GROUP BY b.Iname,b.Cdrgno,TRIM(a.ICODE),TRIM(UPPER(a.COL4)) HAVING SUM(a.QTY)>0 ORDER BY TRIM(UPPER(A.COL4))) where Serial_NO in (" + mq + ") ";
                }
                else
                {
                    Squery = "select (Case when Mins_elapse>=Cure_time then 'Ok to Tfr' Else 'Pending Cure' end) as Col1,iname as col2,Serial_NO as Col3,Cdrgno as col4,ENTRY_dT as col5,Mins_elapse as col6 from (SELECT B.iNAME,TRIM(UPPER(A.COL4)) AS Serial_NO,trim(A.ICODE) as ERP_Code,b.Cdrgno,MAX(a.ENT_dT) AS ENTRY_dT,max(time_elap) as Mins_elapse,SUM(QTY) AS Serial_Qty,nvl(b.oprate1,0) as Cure_time FROM (SELECT ICODE,COL4,1 AS QTY,ENT_DT,round(sysdate-ENT_DT,2)*60*24 as time_elap FROM MULTIVCH WHERE " + branch_cd + " AND TYPE='BR' and vchdaTE>to_DaTE('01/04/2021','dd/mm/yyyy') UNION ALL SELECT ICODE,COL4,-1 AS QTY,NULL AS ENT_DT,NULL AS VCHDATE FROM MULTIVCH WHERE " + branch_cd + " AND TYPE='BI' and vchdaTE>to_DaTE('01/04/2021','dd/mm/yyyy') )a,item b where trim(A.icode)=trim(B.icode)  GROUP BY nvl(b.oprate1,0),b.Iname,b.Cdrgno,TRIM(a.ICODE),TRIM(UPPER(a.COL4)) HAVING SUM(a.QTY)>0 ORDER BY TRIM(UPPER(A.COL4))) where Serial_NO in (" + mq + ") ";
                }


                dt = getdata(team6.col1, "-", Squery);
                if (dt.Rows.Count > 0) ReturnVal = dt.Rows[0][0].ToString();
                List<Team6> list = new List<Team6>();

                if (1 == 2)
                {

                }
                else
                {
                    list = (from DataRow row in dt.Rows
                            select new Team6()
                            {
                                col1 = row["col1"].ToString(),
                                col2 = row["col2"].ToString(),
                                col3 = row["col3"].ToString(),
                                col4 = row["col4"].ToString(),
                                col5 = row["col5"].ToString(),
                                col6 = row["col6"].ToString(),
                            }).ToList();

                    dtrows = dt.Rows.Count;
                    if (dtrows <= 0)
                    {
                        list.Add(new Team6 { col1 = "Failure", col2 = team6.col2, col3 = "-", col4 = "-", col5 = "-", col6 = "Record not found", });
                    }

                }
                return list;
                //}
            }
            catch (Exception e)
            {
                err = e.Message.ToString();

            }
            List<Team6> mylist = new List<Team6>();
            mylist.Add(new Team6 { col1 = results, col2 = "-", col3 = "-", col4 = "-", col5 = "-", col6 = err, });
            return mylist;
        }
        //---------------------------------------------------------------------------------

        //=================================================================
        public List<Team> areel_issue(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";
            //------------------------

            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";

            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 
            string err_fld = "";
            int no_of_ent = 0;
            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            object sm;
            string tabname = "REELVCH";
            string req_Dt = "";
            string mv_branch = "", mymsg = "";
            string fix_doc_no = "";
            string fix_type = "";
            string mymg = "";
            string dept_code = "", wip_stage = "";
            fix_doc_no = team.col5.ToString();


            string fldfevas = "", work_br = "", sman_id = "";
            fldfevas = fn_seek_iname(team.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "fstr");
            work_br = "00";
            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
            }


            string mq1 = "", mq2 = "", mq3 = "";
            string mv_type = "";
            string xmv_reel_icode = "", xmv_reel_no = "", xmv_reel_jobno = "";
            string xmv_reel_jobdt = "", xmv_reel_qty = "";
            int err_itm_cnt = 0;
            string chk_Stk = "", stk_item = "", stk_avail = "", err_itm_dtl = "", xreel_no = "", xjob_no = "";
            List<Team> mylist = new List<Team>();
            execute_cmd1(cocd, "ALTER SESSION SET NLS_DATE_FORMAT = 'DD/MM/YYYY'");
            try
            {

                vchdate = fn_seek_iname(cocd, "", "SELECT TO_cHAR(SYSDATE,'DD/MM/YYYY') AS SYD FROM DUAL", "syd");
                DateTime date = DateTime.ParseExact(vchdate, "dd/MM/yyyy", null);
                //Saving costestimate type 40 -------------------------------------------------------------------------------
                //try
                {
                    DataTable dtw = new DataTable();
                    string mycocd = team.col1.ToString();

                    dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                    if (dtw.Rows.Count > 0)
                    {
                        frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                        frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                        xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                    }


                    //-------------------------------------
                    // stock checking
                    //-------------------------------------
                    string yr_fld = "";
                    yr_fld = fn_seek_iname(team.col1, "", "Select to_char(to_date('" + frm_cDt1 + "','dd/mm/yyyy'),'yyyy') as fmdt from dual", "fmdt");

                    DataTable dtQty = new DataTable();
                    dtQty.Columns.Add(new DataColumn("icode", typeof(string)));
                    dtQty.Columns.Add(new DataColumn("qty", typeof(double)));
                    DataRow drQty = null;

                    err_fld = "";
                    for (int i = 0; i < qrlist.Length; i++)
                    {
                        string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");
                        if (colsVal.Length <= 1)
                        {

                        }
                        else
                        {
                            type = colsVal[1].ToString().Trim();
                            xmv_reel_icode = colsVal[2].ToString().Trim();
                            xreel_no = colsVal[3].ToString().Trim();
                            xmv_reel_qty = colsVal[4].ToString().Trim();
                            xjob_no = colsVal[5].ToString().Trim();
                            xmv_reel_jobdt = colsVal[6].ToString().Trim();
                            drQty = dtQty.NewRow();
                            drQty["icode"] = xmv_reel_icode.Trim();
                            drQty["qty"] = makeDouble(xmv_reel_qty);
                            dtQty.Rows.Add(drQty);

                            if (team.col1 == "PANO")
                            {   // reel checking like it is issued before or not.

                                int xcount = Convert.ToInt32(fn_seek_iname(team.col1, "", "select count(*) as xcount from reelvch where branchcd='" + work_br + "' and type='31' and icode='" + xmv_reel_icode + "' and kclreelno='" + xreel_no + "' and job_no='" + xjob_no + "' and job_dt='" + xmv_reel_jobdt + "'", "xcount"));
                                if (xcount > 0)
                                {
                                    msg = "This Reel No. : " + xreel_no + "  You Already Issued Against This JOB Card!";
                                    err_itm_cnt = err_itm_cnt + 1;
                                }
                            }
                        }
                    }


                    DataView distQty = new DataView(dtQty, "", "icode", DataViewRowState.CurrentRows);
                    DataTable dtQty1 = new DataTable();
                    dtQty1 = distQty.ToTable(true, "icode");
                    foreach (DataRow drQty1 in dtQty1.Rows)
                    {
                        sm = dtQty.Compute("sum(qty)", "icode='" + drQty1["icode"].ToString().Trim() + "'");
                        xmv_reel_icode = drQty1["icode"].ToString().Trim();


                        mq1 = "select b.iname||'^'||(sum(a.opening)+sum(a.cdr)-sum(a.ccr)) as closing from (Select icode, yr_" + yr_fld + " as opening,0 as cdr,0 as ccr,0 as clos from itembal where BRANCHCD='" + work_br + "' and icode='" + xmv_reel_icode + "' union all  ";
                        mq2 = "select icode,0 as op,nvl(iqtyin,0) as cdr,nvl(iqtyout,0) as ccr,0 as clos from ivoucher where BRANCHCD='" + work_br + "' and type like '%' and vchdate " + xprdRange + " and store='Y' and icode='" + xmv_reel_icode + "' ) a,ITEM B WHERE TRIM(A.ICODE)=TRIM(b.ICODE) group by b.iname ";
                        mq3 = mq1 + mq2;
                        chk_Stk = fn_seek_iname(team.col1, "", mq3, "closing");

                        if (chk_Stk.Trim() != "0")
                        {
                            stk_item = chk_Stk.Split('^')[0];
                            stk_avail = chk_Stk.Split('^')[1];
                        }

                        if (makeDouble(stk_avail) < makeDouble(sm.ToString()))
                        {
                            msg = "Stores Stock Not Available";
                            err_itm_cnt = err_itm_cnt + 1;
                            err_itm_dtl = err_itm_dtl + "|" + stk_item.Trim() + "|" + stk_avail + "|";
                        }
                    }

                    if (type.Substring(0, 1) == "1")
                    {
                        err_itm_cnt = 0;
                    }

                    if (err_itm_cnt > 0)
                    {
                        try
                        {
                            mylist.Add(new Team { col1 = msg, col2 = err_itm_dtl, col3 = "-", col4 = "-", col5 = "-", });
                        }
                        catch { }
                        return mylist;
                    }

                    //-------------------------------------
                    //stock checking end
                    //-------------------------------------
                    string sn1 = "", sn2 = "", sn3 = "", sn4 = "", it_name = "";
                    oDS = new DataSet();
                    oporow = null;
                    oDS = fill_schema(cocd, tabname);

                    string reel_Dtls = "";
                    err_fld = "";

                    for (int i = 0; i < qrlist.Length; i++)
                    {

                        string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");

                        if (colsVal.Length <= 1)
                        {

                        }
                        else
                        {

                            #region Fields Getting
                            branchcd = colsVal[0].ToString().Trim();
                            branchcd = work_br;
                            type = colsVal[1].ToString().Trim();

                            xmv_reel_icode = colsVal[2].ToString().Trim();
                            xmv_reel_no = colsVal[3].ToString().Trim();
                            xmv_reel_qty = colsVal[4].ToString().Trim();
                            xmv_reel_jobno = colsVal[5].ToString().Trim();
                            xmv_reel_jobdt = colsVal[6].ToString().Trim();
                            wip_stage = colsVal[7].ToString().Trim();

                            #endregion
                            //dept_code = fn_seek_iname(team.col1, "", "Select trim(b.TYPE1) as DEPT_CODE||'^'||TRIM(B.NAME) AS DEPT_NAME from WB_ISS_REQ a, TYPE B WHERE trim(a.branchcd)='" + work_br + "' AND TRIM(A.VCHNUM)='" + xmv_reel_jobno + "' AND TO_CHAR(A.VCHDATE, 'DD/MM/YYYY')='" + xmv_reel_jobdt + "' and TRIM(B.ID)='M' AND TRIM(A.ACODE)=TRIM(B.TYPE1)", "DEPT_NAME"); //updated by shivam  ==> svpl DEPARTMENT
                            dept_code = fn_seek_iname(team.col1, "", "Select trim(b.TYPE1)||'^'||TRIM(B.NAME) AS DEPT_NAME from WB_ISS_REQ a, TYPE B WHERE trim(a.branchcd)='" + work_br + "' AND TRIM(A.VCHNUM)='" + xmv_reel_jobno + "' AND TO_CHAR(A.VCHDATE, 'DD/MM/YYYY')='" + xmv_reel_jobdt + "' and TRIM(B.ID)='M' AND TRIM(A.ACODE)=TRIM(B.TYPE1)", "DEPT_NAME"); //updated by shivam  ==> svpl DEPARTMENT

                            string mx = "1";
                            mx += " 2";

                            try
                            {
                                #region Vnum Generation
                                if (no_of_ent == 0)
                                {
                                    int p = 0;
                                    string error = "Y";
                                    do
                                    {
                                        vchdate = DateTime.Now.ToString("dd/MM/yyyy");

                                        vchnum = next_no(team.col1, branchcd, "-", "select max(vchnum)+" + p + " as max from     ivoucher     where branchcd='" + branchcd + "' and type ='" + type + "' and vchdate " + xprdRange + " ", 6, "max");

                                        error = fn_chk_pk("IVOUCHER" + branchcd + type + vchnum + vchdate, team.col1, branchcd, type, vchnum, vchdate, acode, "WEBAPI").Trim();
                                        if (p > 10)
                                        { error = "N"; }
                                        p++;
                                    }
                                    while (error.Equals("Y"));
                                }
                                no_of_ent = no_of_ent + 1;
                                #endregion
                            }
                            catch (Exception exx)
                            {
                                mx = exx.Message;
                            }

                            #region Saving to Oracle in 4 series

                            oporow = oDS.Tables[0].NewRow();



                            oporow["BRANCHCD"] = branchcd;
                            oporow["TYPE"] = type;
                            fix_type = type;
                            oporow["VCHNUM"] = vchnum;

                            oporow["VCHDATE"] = fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE(to_char(sysdate,'dd/mm/yyyy'),'dd/mm/yyyy') as vchdate from dual", "vchdate");



                            fix_doc_no = branchcd + type + vchnum + fn_seek_iname(team.col1, branchcd, "SELECT to_char(sysdate,'dd/mm/yyyy') as vchdate from dual", "vchdate");

                            msg = "Data Saved : " + fix_doc_no;

                            oporow["icode"] = xmv_reel_icode.Trim();
                            oporow["srno"] = i;
                            oporow["rlocn"] = "61";
                            oporow["STORE_NO"] = "61";
                            oporow["kclreelno"] = xmv_reel_no.Trim();
                            oporow["job_no"] = xmv_reel_jobno.Trim();
                            oporow["job_dt"] = xmv_reel_jobdt;

                            oporow["REFNUM"] = xmv_reel_jobno.Trim();
                            oporow["REFDATE"] = DateTime.Now.ToString();

                            if (team.col1.Trim() == "SVPL" || team.col1.Trim() == "GDOT")
                            {
                                oporow["REFNUM"] = xmv_reel_jobno.Trim();
                                oporow["REFDATE"] = fn_seek_iname(team.col1, branchcd, "select to_Date('" + xmv_reel_jobdt + "','dd/mm/yyyy') as ldt from dual", "ldt");

                            }
                            oporow["po_num"] = "-";

                            if (team.col1.Trim() == "SGRP")
                            {
                                Squery = "SELECT trim(acode)||'^'||trim(stage)||'^'||jobno||'^'||to_char(jobdt,'dd/mm/yyyy') AS fstr FROM wb_iss_req WHERE branchcd='" + work_br + "' and type like '" + type + "%'  and TRIM(vchnum)='" + xmv_reel_jobno.Trim() + "' and to_Char(vchdate,'dd/mm/yyyy')='" + xmv_reel_jobdt + "' and trim(icode)='" + xmv_reel_icode.Trim() + "'";
                                it_name = fn_seek_iname(cocd, branchcd, Squery, "fstr");

                                if (it_name.Trim() != "0")
                                {
                                    oporow["REFNUM"] = xmv_reel_jobno.Trim();
                                    oporow["REFDATE"] = fn_seek_iname(team.col1, branchcd, "select to_Date('" + xmv_reel_jobdt + "','dd/mm/yyyy') as ldt from dual", "ldt");

                                    sn1 = it_name.Split('^')[0];
                                    sn2 = it_name.Split('^')[1];
                                    sn3 = it_name.Split('^')[2];
                                    sn4 = it_name.Split('^')[3];

                                    oporow["po_num"] = sn1;
                                    oporow["rlocn"] = sn2;
                                    oporow["store_no"] = sn2;
                                    oporow["job_no"] = sn3;
                                    oporow["job_dt"] = sn4.Trim();
                                }
                            }


                            if (type.Substring(0, 1) == "1")
                            {

                                oporow["reelwin"] = makeDouble(xmv_reel_qty); ;
                                oporow["reelwout"] = 0;
                                oporow["rec_iss"] = "D";
                            }
                            else
                            {
                                oporow["reelwin"] = 0;
                                oporow["reelwout"] = makeDouble(xmv_reel_qty);
                                oporow["rec_iss"] = "C";
                            }
                            oporow["reelhin"] = 0;

                            reel_Dtls = fn_seek_iname(team.col1, branchcd, "SELECT trim(coreelno)||'^'||trim(Acode)||'^'||irate||'^'||branchcd||type||trim(vchnum)||to_Char(vchdate,'dd/mm/yyyy')||trim(icode) as fstr from reelvch where branchcd='" + branchcd + "' and trim(icode)='" + xmv_reel_icode + "' and kclreelno='" + xmv_reel_no + "' and reelwin>0 order by vchdate desc,type ", "fstr");
                            oporow["coreelno"] = "-";
                            oporow["acode"] = "-";
                            oporow["irate"] = 0;

                            if (reel_Dtls.Trim() != "0")
                            {
                                oporow["coreelno"] = reel_Dtls.Split('^')[0];
                                oporow["acode"] = reel_Dtls.Split('^')[1];
                                oporow["irate"] = makeDouble(reel_Dtls.Split('^')[2]);
                                if (makeDouble(reel_Dtls.Split('^')[2]) == 0)
                                {
                                    reel_Dtls = fn_seek_iname(team.col1, branchcd, "SELECT irate as fstr from ivoucher where branchcd='" + branchcd + "' and branchcd||type||trim(vchnum)||to_Char(vchdate,'dd/mm/yyyy')||trim(icode)='" + reel_Dtls.Split('^')[3] + "' ", "fstr");
                                    oporow["irate"] = makeDouble(reel_Dtls);
                                }
                            }


                            oporow["REELSPEC1"] = "-";
                            oporow["REELSPEC2"] = "-";
                            oporow["psize"] = 0;
                            oporow["gsm"] = 0;

                            oporow["grade"] = "-";
                            oporow["unlink"] = "N";
                            oporow["posted"] = "Y";

                            oporow["RINSP_BY"] = "-";

                            oporow["UINSP"] = 0;
                            oporow["REELMTR"] = 0;
                            oporow["REEL_AT"] = "-";
                            oporow["REEL_REJQTY"] = 0;

                            oporow["RPAPINSP"] = "-";
                            oporow["REEL_EXPDT"] = "-";
                            oporow["REEL_EXPDT"] = "-";
                            oporow["REEL_MILL"] = "-";
                            oporow["PHY_DT"] = DateTime.Now.ToString();

                            oDS.Tables[0].Rows.Add(oporow);
                            #endregion
                        }

                    }
                    save_data(cocd, oDS, tabname);

                }

                //ivoucher saving type 39,15


                err_fld = "";
                if (1 == 1)
                {
                    {
                        DataTable dt25 = new DataTable();

                        if (team.col1.Trim() == "SGRP")
                        {
                            dt25 = getdatav(cocd, "SELECT po_num as acode,rlocn as stage,job_no,job_Dt,vchdate,refnum,to_char(refdate,'dd/mm/yyyy') As refdate,trim(icode) As icode,sum(reelwin) as reelwin,sum(reelwout) as reelwout FROM reelvch WHERE branchcd||type||vchnum||to_char(vchdate,'dd/mm/yyyy')='" + fix_doc_no.Left(20) + "' group by po_num,rlocn,job_no,job_Dt,vchdate,refnum,to_char(refdate,'dd/mm/yyyy'),trim(icode)");
                        }
                        else
                        {
                            dt25 = getdatav(cocd, "SELECT vchdate,job_no,job_Dt,'61' as stage,trim(icode) As icode,sum(reelwin) as reelwin,sum(reelwout) as reelwout,MAX(IRATE) AS RATE FROM reelvch WHERE branchcd||type||vchnum||to_char(vchdate,'dd/mm/yyyy')='" + fix_doc_no.Left(20) + "' group by vchdate,trim(icode),job_no,job_Dt");
                        }

                        tabname = "ivoucher";
                        oDS = new DataSet();
                        oporow = null;
                        oDS = fill_schema(cocd, tabname);

                        string my_deptt = "";

                        for (int i = 0; i < dt25.Rows.Count; i++)
                        {
                            #region Saving to Oracle in 4 series
                            oporow = oDS.Tables[0].NewRow();
                            oporow["BRANCHCD"] = branchcd;
                            oporow["type"] = fix_type;
                            oporow["VCHNUM"] = fix_doc_no.Substring(4, 6);
                            oporow["VCHDATE"] = fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE(to_char(sysdate,'dd/mm/yyyy'),'dd/mm/yyyy') as vchdate from dual", "vchdate");

                            oporow["store"] = "Y";
                            oporow["inspected"] = "Y";
                            oporow["icode"] = dt25.Rows[i]["icode"];
                            oporow["iqty_wt"] = 0; // prodn

                            oporow["unit"] = fn_seek_iname(team.col1, branchcd, "select UNIT as UNIT from item where icode='" + oporow["icode"].ToString() + "'", "UNIT");

                            if (team.col1 != "SVPL" && team.col1 != "ARUB" && team.col1 != "GDOT")
                            {
                                oporow["acode"] = fn_seek_iname(team.col1, branchcd, "select deptt as dept from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "dept");
                            }
                            else
                            {
                                oporow["acode"] = dept_code.Split('^')[0].ToString(); //dt25.Rows[i]["stage"];  //updated by shivam
                            }

                            oporow["STORE_NO"] = "61";
                            oporow["stage"] = wip_stage; //updated by shivam   ==> BEFORE 61 HARD CODED

                            oporow["INVNO"] = dt25.Rows[i]["job_no"];
                            oporow["INVDATE"] = fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE('" + dt25.Rows[i]["job_dt"] + "','dd/mm/yyyy') as vchdate from dual", "vchdate");

                            if (team.col1.Trim() == "SGRP")
                            {
                                oporow["acode"] = dt25.Rows[i]["acode"];
                                oporow["stage"] = dt25.Rows[i]["stage"];
                                oporow["refnum"] = dt25.Rows[i]["refnum"];
                                oporow["refdate"] = fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE('" + dt25.Rows[i]["refdate"] + "','dd/mm/yyyy') as vchdate from dual", "vchdate");
                            }
                            if (team.col1.Trim() == "SVPL" || team.col1.Trim() == "ARUB" || team.col1.Trim() == "GDOT")
                            {
                                oporow["refnum"] = dt25.Rows[i]["job_no"];
                                oporow["refdate"] = fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE('" + dt25.Rows[i]["job_Dt"] + "','dd/mm/yyyy') as vchdate from dual", "vchdate");
                            }
                            if (i == 0)
                            {
                                my_deptt = fn_seek_iname(team.col1, branchcd, "SELECT name from type where id='M' and type1='" + oporow["acode"] + "'", "name");
                            }
                            oporow["o_deptt"] = my_deptt;

                            oporow["store_no"] = oporow["stage"];

                            if (fix_type.Substring(0, 1) == "1")
                            {
                                oporow["iqtyin"] = dt25.Rows[i]["reelwin"];
                                oporow["iqty_chl"] = dt25.Rows[i]["reelwin"];
                                oporow["iqtyout"] = 0;
                                oporow["rec_iss"] = "D";
                            }
                            else
                            {
                                oporow["iqtyout"] = dt25.Rows[i]["reelwout"];
                                oporow["iqty_chl"] = dt25.Rows[i]["reelwout"];
                                oporow["iqtyin"] = 0;
                                oporow["rec_iss"] = "C";
                            }

                            oporow["srno"] = i;
                            oporow["morder"] = i;
                            oporow["PURPOSE"] = "Reel Issue Through Android App";
                            oporow["DESC_"] = "-";


                            oporow["RCODE"] = "-";
                            oporow["IRATE"] = dt25.Rows[i]["RATE"];
                            oporow["freight"] = "-";
                            oporow["btchno"] = "-";
                            oporow["btchdt"] = "-";


                            oporow["ent_by"] = team.col3;
                            oporow["ent_dt"] = DateTime.Now.ToString();
                            oporow["edt_by"] = "-";
                            oporow["edt_dt"] = DateTime.Now.ToString();

                            try
                            {
                                oDS.Tables[0].Rows.Add(oporow);
                            }
                            catch (Exception e)
                            {
                                oporow["acode"] = "61";
                                my_deptt = fn_seek_iname(team.col1, branchcd, "SELECT name from type where id='M' and type1='" + oporow["acode"] + "'", "name");
                                oporow["o_deptt"] = my_deptt;

                                oDS.Tables[0].Rows.Add(oporow);
                            }
                            #endregion
                        }
                        if (oDS.Tables[0].Rows.Count > 0)
                        {
                            save_data(cocd, oDS, tabname);
                        }

                    }
                    //--------------------------------------------------------------------------------
                }
            }
            catch (Exception ex)
            {
                string error_msg = execute_cmd1(cocd, "delete from reelvch where branchcd||type||vchnum||to_char(vchdate,'dd/mm/yyyy')='" + fix_doc_no.Left(20) + "' "); //updated by shivam
                msg = ex.Message + " " + mymsg + " " + vchdate + " " + err_fld;
            }

            try
            {

                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = branchcd + type + vchnum + DateTime.Now.ToString("dd/MM/yyyy"), });
            }
            catch { }
            return mylist;
        }


        public List<Team> MVIN_Dispatch_Note(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";
            //------------------------

            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";

            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 

            string fldfevas = "", work_br = "";
            fldfevas = fn_seek_iname(team.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "fstr");

            work_br = "00";
            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
            }

            string msg = "Data Saved";
            string saved_doc_no = "";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            string my_curr_Dt;
            my_curr_Dt = Fn_curr_dt_time(team.col1, branchcd, "");
            string it_name = "", sn1 = "", sn2 = "", sn3 = "", sn4 = "", sn5 = "", sn6 = "", sn7 = "";


            string tabname = "DESPATCH";
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();

                oDS = new DataSet();
                oporow = null;
                oDS = fill_schema(cocd, tabname);

                int no_of_ent = 0;
                for (int i = 0; i < qrlist.Length; i++)
                {

                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");

                    if (colsVal.Length <= 1)
                    {

                    }
                    else
                    {

                        string mv_branch = "";
                        string mv_type = "";
                        string xmv_acode = "-", xmv_icode = "", xmv_batch = "-", xmv_packno = "-", xmv_packdate = "-";

                        #region Fields Getting



                        branchcd = colsVal[0].ToString().Trim();
                        branchcd = work_br;

                        type = colsVal[1].ToString().Trim();

                        xmv_acode = colsVal[2].ToString().Trim();
                        xmv_icode = colsVal[3].ToString().Trim();
                        xmv_batch = colsVal[4].ToString().Trim();
                        xmv_packno = colsVal[5].ToString().Trim();
                        xmv_packdate = colsVal[6].ToString().Trim();

                        #endregion

                        msg = execute_cmd1(cocd, "UPDATE DESPATCH SET OPR_NAME='Y' WHERE BRANCHCD='" + work_br + "' AND TYPE='" + type + "' AND ACODE='" + xmv_acode + "' AND packno='" + xmv_packno + "' and packdate=to_date('" + xmv_packdate + "', 'dd/mm/yyyy') and icode='" + xmv_icode + "' and no_bdls='" + xmv_batch + "'");

                    }

                }
                save_data(cocd, oDS, tabname);
            }
            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }



        //-----------------------------------------------------------------------------
        public List<Team> areel_issue_MJ(Team team)
        {
            //MJ means multi job
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";
            //------------------------

            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";

            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 -
            string reel_Dtls = "";
            string err_fld = "";
            int no_of_ent = 0;
            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            object sm;
            string tabname = "REEL_CORR";
            string req_Dt = "";
            string mv_branch = "", mymsg = "";
            string fix_doc_no = "";
            string fix_type = "";
            string mymg = "";
            fix_doc_no = team.col5.ToString();


            string fldfevas = "", work_br = "", sman_id = "";
            fldfevas = fn_seek_iname(team.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "fstr");
            work_br = "00";
            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
            }


            string mq1 = "", mq2 = "", mq3 = "";
            string mv_type = "";
            string xmv_reel_icode = "", xmv_reel_no = "", xmv_reel_jobno = "";
            string xmv_reel_jobdt = "", xmv_reel_qty = "";
            string xmv_reel_use = "", xmv_reel_layer = "";
            string xmv_reel_stg = "", xmv_reel_tot = "0";
            int err_itm_cnt = 0;
            string chk_Stk = "", stk_item = "", stk_avail = "", err_itm_dtl = "";
            List<Team> mylist = new List<Team>();
            execute_cmd1(cocd, "ALTER SESSION SET NLS_DATE_FORMAT = 'DD/MM/YYYY'");
            try
            {

                vchdate = fn_seek_iname(cocd, "", "SELECT TO_cHAR(SYSDATE,'DD/MM/YYYY') AS SYD FROM DUAL", "syd");
                DateTime date = DateTime.ParseExact(vchdate, "dd/MM/yyyy", null);
                //Saving costestimate type 40 -------------------------------------------------------------------------------
                //try
                {
                    DataTable dtw = new DataTable();
                    string mycocd = team.col1.ToString();

                    dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                    if (dtw.Rows.Count > 0)
                    {
                        frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                        frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                        xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                    }


                    //-------------------------------------
                    // stock checking
                    //-------------------------------------
                    string yr_fld = "";
                    yr_fld = fn_seek_iname(team.col1, "", "Select to_char(to_date('" + frm_cDt1 + "','dd/mm/yyyy'),'yyyy') as fmdt from dual", "fmdt");

                    DataTable dtQty = new DataTable();
                    dtQty.Columns.Add(new DataColumn("icode", typeof(string)));
                    dtQty.Columns.Add(new DataColumn("qty", typeof(double)));
                    DataRow drQty = null;

                    err_fld = "";
                    for (int i = 0; i < qrlist.Length; i++)
                    {
                        string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");
                        if (colsVal.Length <= 1)
                        {

                        }
                        else
                        {
                            type = colsVal[1].ToString().Trim();
                            xmv_reel_icode = colsVal[2].ToString().Trim();
                            xmv_reel_qty = colsVal[4].ToString().Trim();
                            drQty = dtQty.NewRow();
                            drQty["icode"] = xmv_reel_icode.Trim();
                            drQty["qty"] = makeDouble(xmv_reel_qty);
                            dtQty.Rows.Add(drQty);
                        }

                    }

                    DataView distQty = new DataView(dtQty, "", "icode", DataViewRowState.CurrentRows);
                    DataTable dtQty1 = new DataTable();
                    dtQty1 = distQty.ToTable(true, "icode");
                    foreach (DataRow drQty1 in dtQty1.Rows)
                    {
                        sm = dtQty.Compute("sum(qty)", "icode='" + drQty1["icode"].ToString().Trim() + "'");
                        xmv_reel_icode = drQty1["icode"].ToString().Trim();


                        mq1 = "select b.iname||'^'||(sum(a.opening)+sum(a.cdr)-sum(a.ccr)) as closing from (Select icode, yr_" + yr_fld + " as opening,0 as cdr,0 as ccr,0 as clos from itembal where BRANCHCD='" + work_br + "' and icode='" + xmv_reel_icode + "' union all  ";
                        mq2 = "select icode,0 as op,nvl(iqtyin,0) as cdr,nvl(iqtyout,0) as ccr,0 as clos from ivoucher where BRANCHCD='" + work_br + "' and type like '%' and vchdate " + xprdRange + " and store='Y' and icode='" + xmv_reel_icode + "' ) a,ITEM B WHERE TRIM(A.ICODE)=TRIM(b.ICODE) group by b.iname ";
                        mq3 = mq1 + mq2;
                        chk_Stk = fn_seek_iname(team.col1, "", mq3, "closing");

                        if (chk_Stk.Trim() != "0")
                        {
                            stk_item = chk_Stk.Split('^')[0];
                            stk_avail = chk_Stk.Split('^')[1];
                        }

                        if (makeDouble(stk_avail) < makeDouble(sm.ToString()))
                        {
                            msg = "Stores Stock Not Available";
                            err_itm_cnt = err_itm_cnt + 1;
                            err_itm_dtl = err_itm_dtl + "|" + stk_item.Trim() + "|" + stk_avail + "|";
                        }
                    }

                    if (type.Substring(0, 1) == "1")
                    {
                        err_itm_cnt = 0;
                    }

                    if (err_itm_cnt > 0)
                    {
                        try
                        {
                            mylist.Add(new Team { col1 = msg, col2 = err_itm_dtl, col3 = "-", col4 = "-", col5 = "-", });
                        }
                        catch { }
                        return mylist;
                    }

                    //-------------------------------------
                    //stock checking end
                    //-------------------------------------



                    oDS = new DataSet();
                    oporow = null;
                    oDS = fill_schema(cocd, tabname);
                    err_fld = "";

                    for (int i = 0; i < qrlist.Length; i++)
                    {

                        string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");

                        if (colsVal.Length <= 1)
                        {

                        }
                        else
                        {

                            #region Fields Getting
                            branchcd = colsVal[0].ToString().Trim();
                            branchcd = work_br;
                            type = colsVal[1].ToString().Trim();

                            xmv_reel_icode = colsVal[2].ToString().Trim();
                            xmv_reel_no = colsVal[3].ToString().Trim();
                            xmv_reel_qty = colsVal[4].ToString().Trim();

                            xmv_reel_jobno = colsVal[5].ToString().Trim().Substring(0, 6);
                            xmv_reel_jobdt = colsVal[5].ToString().Trim().Substring(7, 10);
                            xmv_reel_use = colsVal[5].ToString().Trim().Substring(18, 1);

                            xmv_reel_layer = colsVal[6].ToString().Trim();
                            xmv_reel_stg = colsVal[7].ToString().Trim();
                            xmv_reel_tot = colsVal[8].ToString().Trim();

                            #endregion


                            string mx = "1";
                            mx += " 2";

                            try
                            {
                                #region Vnum Generation
                                if (no_of_ent == 0)
                                {
                                    int p = 0;
                                    string error = "Y";
                                    do
                                    {
                                        vchdate = DateTime.Now.ToString("dd/MM/yyyy");
                                        vchnum = next_no(team.col1, branchcd, "-", "select max(vchnum)+" + p + " as max from " + tabname + " where branchcd='" + branchcd + "' and type ='" + type + "' and vchdate " + xprdRange + " ", 6, "max");
                                        error = fn_chk_pk(tabname + branchcd + type + vchnum + vchdate, team.col1, branchcd, type, vchnum, vchdate, acode, "WEBAPI").Trim();
                                        if (p > 10)
                                        { error = "N"; }
                                        p++;
                                    }
                                    while (error.Equals("Y"));
                                }
                                no_of_ent = no_of_ent + 1;
                                #endregion
                            }
                            catch (Exception exx)
                            {
                                mx = exx.Message;
                            }

                            #region Saving to Oracle in 4 series

                            oporow = oDS.Tables[0].NewRow();



                            oporow["BRANCHCD"] = branchcd;
                            oporow["ORIG_BR"] = branchcd;
                            oporow["TYPE"] = type;
                            oporow["VCHNUM"] = vchnum;
                            oporow["VCHDATE"] = fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE(to_char(sysdate,'dd/mm/yyyy'),'dd/mm/yyyy') as vchdate from dual", "vchdate");

                            fix_doc_no = branchcd + type + vchnum + DateTime.Now.ToString("dd/MM/yyyy");
                            msg = "Data Saved : " + fix_doc_no;

                            oporow["MCH_CD"] = "-";
                            oporow["LAYERNO"] = 0;
                            oporow["USE_IN"] = xmv_reel_use;

                            oporow["ICODE"] = xmv_reel_icode.Trim();
                            oporow["OUR_REEL"] = xmv_reel_no.Trim();
                            oporow["REELWT"] = makeDouble(xmv_reel_qty);
                            oporow["SRNO"] = 1;
                            oporow["ent_by"] = team.col3;
                            oporow["ent_date"] = DateTime.Now.ToString();

                            oporow["JOB_NO"] = xmv_reel_jobno.Trim();
                            oporow["JOB_DT"] = xmv_reel_jobdt;
                            oporow["JOB_LAYER"] = xmv_reel_layer;

                            reel_Dtls = fn_seek_iname(team.col1, branchcd, "SELECT trim(coreelno)||'^'||trim(Acode)||'^'||irate as  fstr from reelvch where branchcd='" + branchcd + "' and trim(icode)='" + xmv_reel_icode + "' and kclreelno='" + xmv_reel_no + "' and reelwin>0 and irate>0 order by vchdate desc,type ", "fstr");
                            oporow["REEL_RATE"] = 0;

                            if (reel_Dtls.Trim() != "0")
                            {
                                oporow["REEL_RATE"] = makeDouble(reel_Dtls.Split('^')[2]);
                            }

                            oDS.Tables[0].Rows.Add(oporow);
                            #endregion
                        }

                    }
                    save_data(cocd, oDS, tabname);

                }

                //SAVE TO REELVCH
                err_fld = "";
                if (1 == 1)
                {
                    {

                        DataTable dt25 = new DataTable();
                        dt25 = getdatav(cocd, "SELECT distinct type,vchnum,vchdate,trim(icode) As icode,our_reel,reel_Rate FROM reel_corr WHERE branchcd||type||vchnum||to_char(vchdate,'dd/mm/yyyy')='" + fix_doc_no + "'");
                        tabname = "REELVCH";
                        oDS = new DataSet();
                        oporow = null;
                        oDS = fill_schema(cocd, tabname);


                        for (int i = 0; i < dt25.Rows.Count; i++)
                        {
                            #region Saving to Oracle in 4 series
                            oporow = oDS.Tables[0].NewRow();

                            oporow["BRANCHCD"] = branchcd;
                            oporow["TYPE"] = type;
                            oporow["VCHNUM"] = fix_doc_no.Substring(4, 6);
                            oporow["VCHDATE"] = fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE(to_char(sysdate,'dd/mm/yyyy'),'dd/mm/yyyy') as vchdate from dual", "vchdate");

                            fix_doc_no = branchcd + type + vchnum + DateTime.Now.ToString("dd/MM/yyyy");
                            msg = "Data Saved : " + fix_doc_no;

                            oporow["icode"] = dt25.Rows[i]["icode"];
                            oporow["srno"] = 1;
                            oporow["rlocn"] = xmv_reel_stg;
                            oporow["kclreelno"] = dt25.Rows[i]["our_reel"];
                            oporow["job_no"] = xmv_reel_jobno;
                            oporow["job_dt"] = xmv_reel_jobdt;
                            //fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE(to_char(sysdate,'dd/mm/yyyy'),'dd/mm/yyyy') as vchdate from dual", "vchdate").Trim() ;

                            oporow["reelwin"] = 0;
                            oporow["reelwout"] = makeDouble(xmv_reel_tot);
                            oporow["rec_iss"] = "C";

                            oporow["reelhin"] = 0;

                            reel_Dtls = fn_seek_iname(team.col1, branchcd, "SELECT trim(coreelno)||'^'||trim(Acode)||'^'||irate as  fstr from reelvch where branchcd='" + branchcd + "' and trim(icode)='" + xmv_reel_icode + "' and kclreelno='" + xmv_reel_no + "' and reelwin>0 order by vchdate desc,type ", "fstr");
                            oporow["coreelno"] = "-";
                            oporow["acode"] = "-";
                            oporow["irate"] = 0;

                            if (reel_Dtls.Trim() != "0")
                            {
                                oporow["coreelno"] = reel_Dtls.Split('^')[0];
                                oporow["acode"] = reel_Dtls.Split('^')[1];
                                oporow["irate"] = makeDouble(reel_Dtls.Split('^')[2]);
                            }


                            oporow["REELSPEC1"] = "-";
                            oporow["REELSPEC2"] = "-";
                            oporow["psize"] = 0;
                            oporow["gsm"] = 0;

                            oporow["grade"] = "-";
                            oporow["unlink"] = "N";
                            oporow["posted"] = "Y";
                            oporow["store_no"] = "-";
                            oporow["RINSP_BY"] = team.col3;

                            oporow["UINSP"] = 0;
                            oporow["REELMTR"] = 0;
                            oporow["REEL_AT"] = "-";
                            oporow["REEL_REJQTY"] = 0;
                            oporow["po_num"] = "-";
                            oporow["RPAPINSP"] = "-";
                            oporow["REEL_EXPDT"] = "-";
                            oporow["REEL_EXPDT"] = "-";
                            oporow["REFNUM"] = "-";
                            oporow["REFDATE"] = DateTime.Now.ToString();
                            oporow["REEL_MILL"] = "-";

                            oDS.Tables[0].Rows.Add(oporow);
                            #endregion
                        }
                        if (oDS.Tables[0].Rows.Count > 0)
                        {
                            save_data(cocd, oDS, tabname);
                        }
                    }


                    err_fld = "";

                    // SAVE TO IVOUCHER
                    if (1 == 1)
                    {
                        {

                            DataTable dt25 = new DataTable();
                            dt25 = getdatav(cocd, "SELECT vchdate,trim(icode) As icode,sum(reelwin) as reelwin,sum(reelwout) as reelwout FROM reelvch WHERE branchcd||type||vchnum||to_char(vchdate,'dd/mm/yyyy')='" + fix_doc_no + "' group by vchdate,trim(icode)");
                            tabname = "ivoucher";
                            oDS = new DataSet();
                            oporow = null;
                            oDS = fill_schema(cocd, tabname);


                            for (int i = 0; i < dt25.Rows.Count; i++)
                            {
                                #region Saving to Oracle in 4 series
                                oporow = oDS.Tables[0].NewRow();
                                oporow["BRANCHCD"] = branchcd;
                                oporow["type"] = type;
                                oporow["VCHNUM"] = fix_doc_no.Substring(4, 6);
                                oporow["VCHDATE"] = fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE(to_char(sysdate,'dd/mm/yyyy'),'dd/mm/yyyy') as vchdate from dual", "vchdate");

                                oporow["stage"] = xmv_reel_stg;
                                oporow["store"] = "Y";
                                oporow["inspected"] = "Y";
                                oporow["acode"] = xmv_reel_stg;
                                oporow["icode"] = dt25.Rows[i]["icode"];
                                oporow["iqty_wt"] = 0; // prodn



                                oporow["iqtyout"] = dt25.Rows[i]["reelwout"];
                                oporow["iqty_chl"] = dt25.Rows[i]["reelwout"];
                                oporow["iqtyin"] = 0;
                                oporow["rec_iss"] = "C";


                                oporow["srno"] = i;
                                oporow["morder"] = i;
                                oporow["PURPOSE"] = "Reel Issue";
                                oporow["DESC_"] = "-";

                                oporow["INVNO"] = "-";
                                oporow["INVDATE"] = fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE(to_char(sysdate,'dd/mm/yyyy'),'dd/mm/yyyy') as vchdate from dual", "vchdate");

                                oporow["RCODE"] = "-";
                                oporow["IRATE"] = 0;
                                oporow["freight"] = "-";
                                oporow["btchno"] = "-";
                                oporow["btchdt"] = "-";


                                oporow["ent_by"] = team.col3;
                                oporow["ent_dt"] = DateTime.Now.ToString();
                                oporow["edt_by"] = "-";
                                oporow["edt_dt"] = DateTime.Now.ToString();

                                oDS.Tables[0].Rows.Add(oporow);
                                #endregion
                            }
                            if (oDS.Tables[0].Rows.Count > 0)
                            {
                                save_data(cocd, oDS, tabname);
                            }


                        }

                        //--------------------------------------------------------------------------------
                    }
                }
            }
            catch (Exception ex)
            {
                msg = ex.Message + " " + mymsg + " " + vchdate + " " + err_fld;
            }

            try
            {

                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = branchcd + type + vchnum + DateTime.Now.ToString("dd/MM/yyyy"), });
            }
            catch { }
            return mylist;
        }

        //-----------------------------------------------------------------------------

        public List<Team> aVisitio_ins(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";
            //------------------------

            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";
            string fldfevas = "", work_br = "";
            fldfevas = fn_seek_iname(team.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "fstr");
            work_br = "00";
            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
            }

            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 

            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            string tabname = "WB_VISITOR_REC";
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();

                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }

                oDS = new DataSet();
                oporow = null;


                oDS = fill_schema(cocd, tabname);


                //for (int i = 0; i < qrlist.Length; i++)
                {
                    int i = 0;
                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");
                    //for (int j = 0; j < colsVal.Length; j++)
                    //{

                    string mv_branch = "";
                    string mv_type = "";

                    string mv_VIZ_PHONE = "", mv_VIZ_NAME = "", mv_VIZ_ORG = "", mv_VIZ_ADDRESS = "";
                    string mv_PER2MEET = "", mv_VIZ_PURPOSE = "", mv_VIZ_TIME = "", mv_Viz_inref = "";
                    string mv_vizmatl = "";

                    #region Fields Getting

                    branchcd = colsVal[0].ToString().Trim();
                    branchcd = work_br;

                    type = colsVal[1].ToString().Trim();

                    mv_VIZ_PHONE = colsVal[2].ToString().Trim();
                    mv_VIZ_NAME = colsVal[3].ToString().Trim();
                    mv_VIZ_ORG = colsVal[4].ToString().Trim();
                    mv_VIZ_ADDRESS = colsVal[5].ToString().Trim();
                    mv_PER2MEET = colsVal[6].ToString().Trim();
                    mv_VIZ_PURPOSE = colsVal[7].ToString().Trim();
                    mv_VIZ_TIME = colsVal[8].ToString().Trim();
                    if (type == "1N")
                    {
                        mv_vizmatl = colsVal[9].ToString().Trim();
                    }

                    if (type == "1O")
                    {

                        mv_Viz_inref = mv_PER2MEET;
                        mv_PER2MEET = "-";
                    }

                    #endregion


                    #region Vnum Generation
                    if (i == 0)
                    {
                        int p = 0;
                        string error = "Y";
                        do
                        {
                            vchdate = DateTime.Now.ToString("dd/MM/yyyy");
                            vchnum = next_no(team.col1, branchcd, "-", "select max(vchnum)+" + p + " as max from " + tabname + " where branchcd='" + branchcd + "' and type ='" + type + "' and vchdate " + xprdRange + " ", 6, "max");
                            error = fn_chk_pk(tabname + branchcd + type + vchnum + vchdate, team.col1, branchcd, type, vchnum, vchdate, acode, "WEBAPI").Trim();
                            if (p > 10)
                            { error = "N"; throw new Exception("Test Exception"); }
                            p++;
                        }
                        while (error.Equals("Y"));
                    }
                    #endregion

                    #region Saving to Oracle in 4 series
                    oporow = oDS.Tables[0].NewRow();

                    string my_instdt = "";
                    vchdate = fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE('" + vchdate + "','dd/mm/yyyy') as vchdate from dual", "vchdate");


                    oporow["BRANCHCD"] = branchcd;
                    oporow["TYPE"] = type;
                    oporow["VCHNUM"] = vchnum;
                    oporow["VCHDATE"] = vchdate;

                    oporow["VIZ_PHONE"] = mv_VIZ_PHONE;
                    oporow["VIZ_NAME"] = mv_VIZ_NAME;
                    oporow["VIZ_ORG"] = mv_VIZ_ORG;
                    oporow["VIZ_ADDRESS"] = mv_VIZ_ADDRESS;

                    oporow["PER2MEET"] = mv_PER2MEET;

                    oporow["VIZ_PURPOSE"] = mv_VIZ_PURPOSE;

                    oporow["VIZ_TIME"] = mv_VIZ_TIME;

                    oporow["Viz_inref"] = mv_Viz_inref;

                    oporow["Viz_Material"] = mv_vizmatl;



                    oporow["ent_by"] = team.col3;
                    oporow["ent_dt"] = DateTime.Now.ToString();


                    oDS.Tables[0].Rows.Add(oporow);
                    #endregion



                }
                save_data(cocd, oDS, tabname);

            }
            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }
        //------------------------------------------------------

        public List<Team> afinoms_act(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";

            //------------------------

            //followup for finance / accounts
            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";
            string fldfevas = "", work_br = "";
            fldfevas = fn_seek_iname(team.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "fstr");
            work_br = "00";
            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
            }


            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 

            execute_cmd1(team.col1, "ALTER TABLE WB_OMS_ACT ADD folo_locn varchar2(150) DEFAULT '-'");

            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            string tabname = "WB_OMS_ACT";
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();

                string user_code;
                user_code = fn_seek_iname(team.col1, "", "Select userid from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "userid");


                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }

                oDS = new DataSet();
                oporow = null;
                oDS = fill_schema(cocd, tabname);


                //for (int i = 0; i < qrlist.Length; i++)
                {
                    int i = 0;
                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");
                    //for (int j = 0; j < colsVal.Length; j++)
                    //{

                    string mv_branch = "";
                    string mv_type = "";

                    string xmv_cust_code = "", xmv_inv_ref = "-", xmv_spoke_to = "";
                    string xmv_rzn_given = "-", xmv_next_date = "";
                    string xmv_remarks = "-", xmv_follow = "", xmv_folo_locn = "";

                    #region Fields Getting

                    branchcd = colsVal[0].ToString().Trim();
                    branchcd = work_br;

                    type = colsVal[1].ToString().Trim();


                    xmv_cust_code = colsVal[2].ToString().Trim();
                    xmv_inv_ref = colsVal[3].ToString().Trim();
                    xmv_spoke_to = colsVal[4].ToString().Trim();
                    xmv_rzn_given = colsVal[5].ToString().Trim();
                    xmv_next_date = colsVal[6].ToString().Trim();
                    xmv_remarks = colsVal[7].ToString().Trim();
                    xmv_follow = colsVal[8].ToString().Trim();
                    xmv_folo_locn = colsVal[9].ToString().Trim();

                    #endregion


                    #region Vnum Generation
                    if (i == 0)
                    {
                        int p = 0;
                        string error = "Y";
                        do
                        {
                            vchdate = DateTime.Now.ToString("dd/MM/yyyy");
                            vchnum = next_no(team.col1, branchcd, "-", "select max(oacno)+" + p + " as max from " + tabname + " where branchcd='" + branchcd + "' and type ='" + type + "' and oacdt " + xprdRange + " ", 6, "max");
                            error = fn_chk_pk(tabname + branchcd + type + vchnum + vchdate, team.col1, branchcd, type, vchnum, vchdate, acode, "WEBAPI").Trim();
                            if (p > 20)
                            { error = "N"; throw new Exception("Test Exception"); }
                            p++;
                        }
                        while (error.Equals("Y"));
                    }
                    #endregion

                    #region Saving to Oracle in 4 series
                    oporow = oDS.Tables[0].NewRow();

                    vchdate = fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE('" + vchdate + "','dd/mm/yyyy') as vchdate from dual", "vchdate");

                    oporow["BRANCHCD"] = branchcd;
                    oporow["TYPE"] = type;
                    oporow["OACNO"] = vchnum;
                    oporow["OACDT"] = vchdate;

                    oporow["SRNO"] = 1;

                    oporow["tcode"] = user_code;
                    oporow["CCODE"] = xmv_cust_code;
                    oporow["agree_amt"] = 0;


                    oporow["agree_Dt"] = fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE('" + xmv_next_date + "','dd/mm/yyyy') as vchdate from dual", "vchdate");

                    oporow["REMARKS"] = xmv_inv_ref;

                    oporow["os_amt"] = 0;

                    oporow["act_mode"] = xmv_spoke_to;

                    oporow["naration"] = xmv_remarks;
                    oporow["oth_info"] = xmv_rzn_given + " " + xmv_follow;
                    oporow["folo_locn"] = xmv_folo_locn;

                    oporow["ent_by"] = team.col3;
                    oporow["ent_dt"] = DateTime.Now.ToString();

                    oporow["edt_by"] = "-";
                    oporow["edt_dt"] = DateTime.Now.ToString();


                    oDS.Tables[0].Rows.Add(oporow);
                    #endregion



                }
                save_data(cocd, oDS, tabname);

            }
            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }


        public List<Team> aPuroms_act(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";
            //------------------------

            //followup for po material
            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";
            string fldfevas = "", work_br = "";
            fldfevas = fn_seek_iname(team.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "fstr");
            work_br = "00";
            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
            }

            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 

            execute_cmd1(team.col1, "ALTER TABLE WB_PUROMS_ACT ADD folo_locn varchar2(150) DEFAULT '-'");

            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            string tabname = "WB_PUROMS_ACT";
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();

                string user_code;
                user_code = fn_seek_iname(team.col1, "", "Select userid from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "userid");


                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }

                oDS = new DataSet();
                oporow = null;
                oDS = fill_schema(cocd, tabname);


                //for (int i = 0; i < qrlist.Length; i++)
                {
                    int i = 0;
                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");
                    //for (int j = 0; j < colsVal.Length; j++)
                    //{

                    string mv_branch = "";
                    string mv_type = "";

                    string xmv_supp_code = "", xmv_po_ref = "-", xmv_spoke_to = "";
                    string xmv_rzn_given = "-", xmv_next_date = "";
                    string xmv_remarks = "-", xmv_folo_locn = "-";

                    #region Fields Getting

                    branchcd = colsVal[0].ToString().Trim();
                    branchcd = work_br;

                    type = colsVal[1].ToString().Trim();

                    xmv_supp_code = colsVal[2].ToString().Trim();
                    xmv_po_ref = colsVal[3].ToString().Trim();
                    xmv_spoke_to = colsVal[4].ToString().Trim();
                    xmv_rzn_given = colsVal[5].ToString().Trim();
                    xmv_next_date = colsVal[6].ToString().Trim();
                    xmv_remarks = colsVal[7].ToString().Trim();
                    xmv_folo_locn = colsVal[8].ToString().Trim();


                    #endregion


                    #region Vnum Generation
                    if (i == 0)
                    {
                        int p = 0;
                        string error = "Y";
                        do
                        {
                            vchdate = DateTime.Now.ToString("dd/MM/yyyy");
                            vchnum = next_no(team.col1, branchcd, "-", "select max(vchnum)+" + p + " as max from " + tabname + " where branchcd='" + branchcd + "' and type ='" + type + "' and vchdate " + xprdRange + " ", 6, "max");
                            error = fn_chk_pk(tabname + branchcd + type + vchnum + vchdate, team.col1, branchcd, type, vchnum, vchdate, acode, "WEBAPI").Trim();
                            if (p > 20)
                            { error = "N"; throw new Exception("Test Exception"); }
                            p++;
                        }
                        while (error.Equals("Y"));
                    }
                    #endregion

                    #region Saving to Oracle in 4 series
                    oporow = oDS.Tables[0].NewRow();

                    vchdate = fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE('" + vchdate + "','dd/mm/yyyy') as vchdate from dual", "vchdate");

                    oporow["BRANCHCD"] = branchcd;
                    oporow["TYPE"] = type;
                    oporow["vchnum"] = vchnum;
                    oporow["vchdate"] = vchdate;
                    oporow["SRNO"] = 1;

                    oporow["Acode"] = xmv_supp_code;
                    oporow["PO_REF"] = xmv_po_ref;
                    oporow["SPOKE_TO"] = xmv_spoke_to;
                    oporow["REASONS"] = xmv_rzn_given;
                    oporow["TARGET_DT"] = fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE('" + xmv_next_date + "','dd/mm/yyyy') as vchdate from dual", "vchdate");

                    oporow["REMARKS"] = xmv_remarks;
                    oporow["folo_locn"] = xmv_folo_locn;


                    oporow["ent_by"] = team.col3;
                    oporow["ent_dt"] = DateTime.Now.ToString();

                    oporow["edt_by"] = "-";
                    oporow["edt_dt"] = DateTime.Now.ToString();


                    oDS.Tables[0].Rows.Add(oporow);
                    #endregion



                }
                save_data(cocd, oDS, tabname);

            }
            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }


        public List<Team> aCrmFolo_act(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";
            //------------------------

            //followup for po material
            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";
            string fldfevas = "", work_br = "";
            fldfevas = fn_seek_iname(team.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "fstr");
            work_br = "00";
            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
            }


            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 

            execute_cmd1(team.col1, "ALTER TABLE WB_PUROMS_ACT ADD folo_locn varchar2(150) DEFAULT '-'");

            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            string tabname = "WB_LEAD_ACT";
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();

                string user_code;
                user_code = fn_seek_iname(team.col1, "", "Select userid from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "userid");


                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }

                oDS = new DataSet();
                oporow = null;
                oDS = fill_schema(cocd, tabname);


                //for (int i = 0; i < qrlist.Length; i++)
                {
                    int i = 0;
                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");
                    //for (int j = 0; j < colsVal.Length; j++)
                    //{

                    string mv_branch = "";
                    string mv_type = "";

                    string xmv_supp_code = "", xmv_po_ref = "-", xmv_spoke_to = "";
                    string xmv_rzn_given = "-", xmv_next_date = "";
                    string xmv_remarks = "-", xmv_folo_locn = "-";

                    #region Fields Getting

                    branchcd = colsVal[0].ToString().Trim();
                    branchcd = work_br;
                    type = "LA";

                    xmv_supp_code = colsVal[2].ToString().Trim();
                    xmv_po_ref = colsVal[3].ToString().Trim();
                    xmv_spoke_to = colsVal[4].ToString().Trim();
                    xmv_rzn_given = colsVal[5].ToString().Trim();
                    xmv_next_date = colsVal[6].ToString().Trim();
                    xmv_remarks = colsVal[7].ToString().Trim();
                    xmv_folo_locn = colsVal[8].ToString().Trim();


                    #endregion


                    #region Vnum Generation
                    if (i == 0)
                    {
                        int p = 0;
                        string error = "Y";
                        do
                        {
                            vchdate = DateTime.Now.ToString("dd/MM/yyyy");
                            vchnum = next_no(team.col1, branchcd, "-", "select max(lacno)+" + p + " as max from " + tabname + " where branchcd='" + branchcd + "' and type ='" + type + "' and LACDT " + xprdRange + " ", 6, "max");
                            error = fn_chk_pk(tabname + branchcd + type + vchnum + vchdate, team.col1, branchcd, type, vchnum, vchdate, acode, "WEBAPI").Trim();
                            if (p > 20)
                            { error = "N"; throw new Exception("Test Exception"); }
                            p++;
                        }
                        while (error.Equals("Y"));
                    }
                    #endregion

                    #region Saving to Oracle in 4 series
                    oporow = oDS.Tables[0].NewRow();

                    vchdate = fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE('" + vchdate + "','dd/mm/yyyy') as vchdate from dual", "vchdate");

                    oporow["BRANCHCD"] = branchcd;
                    oporow["ORIGNALBR"] = branchcd;
                    oporow["TYPE"] = type;
                    oporow["LACNO"] = vchnum;
                    oporow["LACDT"] = vchdate;
                    oporow["SRNO"] = i;

                    //oporow["Lead_Dsg"] = txtlbl4.Value.ToUpper().Trim();
                    //oporow["Lvertical"] = ddModule.Value;
                    //oporow["Ldescr"] = txtlbl8.Value.ToUpper().Trim();

                    //oporow["Lgrade"] = txtlbl9.Value;
                    //oporow["Lsubject"] = ddIssueType.Value;

                    //oporow["CONT_NAME"] = txtlbl2.Value.ToUpper().Trim();
                    //oporow["CONT_NO"] = txtlbl3.Value.ToUpper().Trim();
                    //oporow["CONT_EMAIL"] = txtlbl5.Value.ToUpper().Trim();

                    //oporow["LRCNO"] = txtvchnum.Value.Trim();
                    //oporow["LRCDT"] = txtvchdate.Value.Trim();

                    //oporow["Acode"] = xmv_supp_code;
                    //oporow["PO_REF"] = xmv_po_ref;
                    //oporow["SPOKE_TO"] = xmv_spoke_to;
                    //oporow["REASONS"] = xmv_rzn_given;
                    //oporow["TARGET_DT"] = fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE('" + xmv_next_date + "','dd/mm/yyyy') as vchdate from dual", "vchdate");

                    //oporow["REMARKS"] = xmv_remarks;
                    //oporow["folo_locn"] = xmv_folo_locn;

                    //oporow["Curr_stat"] = txtstage.Value.Trim();
                    //oporow["Input_from"] = txtAssgn.Value;
                    //oporow["Act_mode"] = ddCmode.Value;
                    //oporow["Next_Folo"] = ddnextfolo.Value;
                    //oporow["LMAIN_GRPCODE"] = txtmaingrpcode.Value;
                    //oporow["LMAIN_GRPNAME"] = txtmaingrpname.Value;
                    //oporow["LSUB_GRPCODE"] = txtsubgrpcode.Value;
                    //oporow["LSUB_GRPNAME"] = txtsubgrpname.Value;


                    oporow["ORemarks"] = "-";

                    oporow["ent_by"] = team.col3;
                    oporow["ent_dt"] = DateTime.Now.ToString();
                    oporow["edt_by"] = "-";
                    oporow["eDt_dt"] = DateTime.Now.ToString();
                    oporow["app_by"] = "-";
                    oporow["app_dt"] = DateTime.Now.ToString();

                    oDS.Tables[0].Rows.Add(oporow);
                    #endregion



                }
                save_data(cocd, oDS, tabname);

            }
            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }

        public List<Team> aCrmcont_ins(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";
            //------------------------

            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";

            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 

            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!!!");
            int res = 0;
            string tabname = "CSMST_CRM";
            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();

                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }

                oDS = new DataSet();
                oporow = null;


                oDS = fill_schema(cocd, tabname);


                //for (int i = 0; i < qrlist.Length; i++)
                {
                    int i = 0;
                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");
                    //for (int j = 0; j < colsVal.Length; j++)
                    //{

                    string mv_branch = "";
                    string mv_type = "";
                    string xmv_contact_company = "";
                    string xmv_contact_person = "";
                    string xmv_contact_designation = "";
                    string xmv_deals_in = "";
                    string xmv_contact_of = "";
                    string xmv_reference_name = "";
                    string xmv_add1 = "";
                    string xmv_add2 = "";
                    string xmv_add3 = "";
                    string xmv_add4 = "";
                    string xmv_state = "";
                    string xmv_contact_no = "";
                    string xmv_fax_no = "";
                    string xmv_mobile_no = "";
                    string xmv_email_id = "";
                    string xmv_country_name = "";

                    #region Fields Getting



                    mv_branch = "00";
                    mv_type = "01";

                    xmv_contact_company = colsVal[2].ToString().Trim();
                    xmv_contact_person = colsVal[3].ToString().Trim();
                    xmv_contact_designation = colsVal[4].ToString().Trim();
                    xmv_deals_in = colsVal[5].ToString().Trim();
                    xmv_contact_of = colsVal[6].ToString().Trim();
                    xmv_reference_name = colsVal[7].ToString().Trim();
                    xmv_add1 = colsVal[8].ToString().Trim();
                    xmv_add2 = colsVal[9].ToString().Trim();
                    xmv_add3 = colsVal[10].ToString().Trim();
                    xmv_add4 = colsVal[11].ToString().Trim();
                    xmv_state = colsVal[12].ToString().Trim();

                    xmv_contact_no = colsVal[13].ToString().Trim();
                    xmv_fax_no = colsVal[14].ToString().Trim();
                    xmv_mobile_no = colsVal[15].ToString().Trim();
                    xmv_email_id = colsVal[16].ToString().Trim();
                    xmv_country_name = colsVal[17].ToString().Trim();

                    #endregion


                    #region Vnum Generation
                    if (i == 0)
                    {
                        int p = 0;
                        string error = "Y";
                        do
                        {
                            vchdate = DateTime.Now.ToString("dd/MM/yyyy");
                            vchnum = next_no(team.col1, branchcd, "-", "select MAX(substr(ACODE,2,6)) as max from " + tabname + " where branchcd='00' and type ='01' ", 6, "max");
                            vchnum = "C" + vchnum.Substring(1, 5);

                            error = fn_chk_pk(tabname + "00" + "01" + vchnum + vchdate, team.col1, "00", "01", vchnum, vchdate, vchnum, "WEBAPI").Trim();
                            if (p > 10)
                            { error = "N"; throw new Exception("Test Exception"); }
                            p++;
                        }
                        while (error.Equals("Y"));
                    }
                    #endregion

                    #region Saving to Oracle in 4 series
                    oporow = oDS.Tables[0].NewRow();

                    string my_instdt = "";
                    vchdate = fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE('" + vchdate + "','dd/mm/yyyy') as vchdate from dual", "vchdate");

                    oporow["BRANCHCD"] = "00";
                    oporow["Type"] = "01";
                    oporow["acode"] = vchnum;
                    oporow["exc_num"] = "-";
                    oporow["rc_num"] = "-";

                    oporow["rc_date"] = DateTime.Now.ToString();

                    oporow["gst_no"] = "-";
                    oporow["girno"] = "-";
                    oporow["exc_div"] = "-";
                    oporow["exc_rng"] = "-";
                    oporow["rc_num2"] = "-";
                    oporow["stkbal"] = 0;
                    oporow["cstaffcd"] = "-";
                    oporow["pname"] = "-";

                    oporow["aname"] = xmv_contact_company;
                    oporow["person"] = xmv_contact_person;
                    oporow["telnum"] = xmv_contact_no;
                    oporow["email"] = xmv_email_id;
                    oporow["mobile"] = xmv_mobile_no;
                    oporow["addr1"] = xmv_add1;
                    oporow["addr2"] = xmv_add2;
                    oporow["addr3"] = xmv_add3;
                    oporow["addr4"] = xmv_add4;

                    oporow["staten"] = xmv_state;
                    oporow["countryn"] = xmv_country_name;
                    oporow["fax"] = xmv_fax_no;
                    oporow["DEALING_IN"] = xmv_deals_in;
                    oporow["CONTACT_OF"] = xmv_contact_of;
                    oporow["vencode"] = "-";
                    oporow["tcsnum"] = xmv_reference_name;
                    oporow["tdsnum"] = xmv_contact_designation;

                    //xmv_contact_company = colsVal[2].ToString().Trim();
                    //xmv_contact_person = colsVal[3].ToString().Trim();
                    //xmv_contact_no = colsVal[13].ToString().Trim();
                    //xmv_email_id = colsVal[16].ToString().Trim();
                    //xmv_mobile_no = colsVal[15].ToString().Trim();
                    //xmv_add1 = colsVal[8].ToString().Trim();
                    //xmv_add2 = colsVal[9].ToString().Trim();
                    //xmv_add3 = colsVal[10].ToString().Trim();
                    //xmv_add4 = colsVal[11].ToString().Trim();
                    //xmv_state = colsVal[12].ToString().Trim();
                    //xmv_country_name = colsVal[17].ToString().Trim();
                    //xmv_deals_in = colsVal[5].ToString().Trim();
                    //xmv_contact_of = colsVal[6].ToString().Trim();
                    //xmv_fax_no = colsVal[14].ToString().Trim();

                    //xmv_contact_designation = colsVal[4].ToString().Trim();
                    //xmv_reference_name = colsVal[7].ToString().Trim();


                    oporow["cstdt"] = DateTime.Now.ToString("dd/MM/yyyy");
                    oporow["ent_by"] = team.col3;
                    oporow["ent_dt"] = DateTime.Now.ToString();



                    oDS.Tables[0].Rows.Add(oporow);
                    #endregion



                }
                save_data(cocd, oDS, tabname);

            }
            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }


            List<Team> mylist = new List<Team>();
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
            }
            catch { }
            return mylist;
        }



        public List<Team> aInvchlOut_ins(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            string co_tbl_cd = team.col1;
            if (team.col1 == "MCPL2" || team.col1 == "MCPL4") co_tbl_cd = "MCPL";
            //------------------------

            string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";


            //col1 - company code
            //col2 - data string
            //col3 - EntBy
            //col4 - CurrentYear
            //col5 - 

            string fldfevas = "", work_br = "";
            fldfevas = fn_seek_iname(team.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "fstr");
            work_br = "00";
            if (fldfevas.Trim() != "0")
            {
                work_br = fldfevas.Split('^')[0];
            }
            string saved_doc_no = "";
            string msg = "Data Saved";
            string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
            string cocd = team.col1;
            String mq0 = team.col2;
            string[] qrlist = Regex.Split(mq0, "!~!~!");
            int res = 0;
            string xparty_code = "";
            string xinv_no = "";
            string xinv_dt = "";
            string xitem = "";
            string xqty = "";
            string xno_of_box = "";
            string tabname = "IVOUCHERP";
            string doctype = "", vehicle_no = "";
            int err_itm_cnt = 0;
            List<Team> mylist = new List<Team>();
            string chk_scan = "", err_itm_dtl = "";
            //---------------------------------------------
            try
            {
                for (int i = 0; i < qrlist.Length; i++)
                {
                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");
                    if (colsVal.Length <= 1)
                    {

                    }
                    else
                    {
                        branchcd = colsVal[0].ToString().Trim();
                        branchcd = work_br;
                        xparty_code = colsVal[2].ToString().Trim();
                        xinv_no = colsVal[3].ToString().Trim();
                        xinv_dt = colsVal[4].ToString().Trim();

                        chk_scan = fn_seek_iname(team.col1, "", "select * from (Select trim(ent_by)||'-'||to_char(ent_dt,'dd/mm/yyyy :hh24:mi:ss') as fstr from ivoucherp where branchcd='" + branchcd + "' and type='2G' and finvno='" + branchcd + xparty_code + xinv_no + xinv_dt + "') where rownum<2", "fstr");

                        if (chk_scan.Trim() != "0")
                        {

                            err_itm_cnt = err_itm_cnt + 1;
                            err_itm_dtl = err_itm_dtl + "|" + chk_scan.Trim() + "|";
                            msg = "Document Already Scanned " + err_itm_dtl;
                        }
                    }
                }
            }

            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Please Scan Correctly";
            }
            if (err_itm_cnt > 0)
            {

                try
                {
                    mylist.Add(new Team { col1 = msg, col2 = err_itm_dtl, col3 = "-", col4 = "-", col5 = "-", });
                }
                catch { }
                return mylist;
            }



            try
            {
                DataTable dtw = new DataTable();
                string mycocd = team.col1.ToString();

                dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + co_tbl_cd + team.col4 + "'");
                if (dtw.Rows.Count > 0)
                {
                    frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
                    frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
                    xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
                }

                oDS = new DataSet();
                oporow = null;
                oDS = fill_schema(cocd, tabname);

                int no_of_ent = 0;
                for (int i = 0; i < qrlist.Length; i++)
                {

                    string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");

                    if (colsVal.Length <= 1)
                    {

                    }
                    else
                    {

                        #region Fields Getting
                        branchcd = colsVal[0].ToString().Trim();
                        branchcd = work_br;
                        type = "2G";
                        xparty_code = colsVal[2].ToString().Trim();
                        xinv_no = colsVal[3].ToString().Trim();
                        xinv_dt = colsVal[4].ToString().Trim();
                        xitem = colsVal[5].ToString().Trim();
                        xqty = colsVal[6].ToString().Trim();
                        xno_of_box = colsVal[7].ToString().Trim();
                        vehicle_no = colsVal[8].ToString().Trim();


                        #endregion

                        #region Vnum Generation
                        if (no_of_ent == 0)
                        {
                            int p = 0;
                            string error = "Y";
                            do
                            {
                                vchdate = DateTime.Now.ToString("dd/MM/yyyy");
                                vchnum = next_no(team.col1, branchcd, "-", "select max(vchnum)+" + p + " as max from " + tabname + " where branchcd='" + branchcd + "' and type ='" + type + "' and vchdate " + xprdRange + " ", 6, "max");
                                error = fn_chk_pk(tabname + branchcd + type + vchnum + vchdate, team.col1, branchcd, type, vchnum, vchdate, acode, "WEBAPI").Trim();
                                if (p > 10)
                                { error = "N"; throw new Exception("Test Exception"); }
                                p++;
                            }
                            while (error.Equals("Y"));
                        }
                        no_of_ent = no_of_ent + 1;
                        #endregion

                        #region Saving to Oracle in 4 series
                        oporow = oDS.Tables[0].NewRow();

                        vchdate = fn_seek_iname(team.col1, branchcd, "select to_Date(to_char(sysdate,'dd/mm/yyyy'),'dd/mm/yyyy') as ldt from dual", "ldt");

                        oporow["BRANCHCD"] = branchcd;
                        oporow["TYPE"] = type;
                        oporow["vchnum"] = vchnum;
                        oporow["vchdate"] = vchdate;

                        saved_doc_no = branchcd + type + vchnum + DateTime.Now.ToString("dd/MM/yyyy");
                        msg = "Gate Outward Saved : " + saved_doc_no;

                        oporow["no_bdls"] = xno_of_box;

                        oporow["INVNO"] = xinv_no;
                        oporow["INVDATE"] = fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE('" + xinv_dt + "','dd/mm/yyyy') as vchdate from dual", "vchdate");

                        oporow["REFNUM"] = xinv_no;
                        oporow["REFDATE"] = fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE('" + xinv_dt + "','dd/mm/yyyy') as vchdate from dual", "vchdate");


                        if (i == 0)
                        {
                            doctype = fn_seek_iname(team.col1, "", "Select (case when (substr(type,1,1)='4' or substr(type,1,2)='65') then 'IN' else 'CH' end)||'^'||branchcd||trim(Acode)||vchnum||to_char(vchdate,'dd/mm/yyyy') as fstr from ivoucher where branchcd||trim(Acode)||vchnum||to_char(vchdate,'dd/mm/yyyy')='" + branchcd + xparty_code + xinv_no + xinv_dt + "'", "fstr");
                        }
                        if (doctype.Trim() != "0")
                        {
                            oporow["PRNUM"] = doctype.Split('^')[0];
                            oporow["finvno"] = doctype.Split('^')[1];
                        }
                        else
                        {
                            oporow["PRNUM"] = "-";
                            oporow["finvno"] = "-";
                        }

                        oporow["naration"] = "-";
                        oporow["mode_tpt"] = vehicle_no;
                        oporow["thru"] = "-";

                        oporow["MORDER"] = i;
                        oporow["SRNO"] = i;

                        oporow["acode"] = xparty_code;
                        oporow["icode"] = xitem;
                        oporow["rej_sdp"] = xqty;
                        oporow["IQTY_CHL"] = xqty;

                        oporow["iqty_chlwt"] = 0;
                        oporow["iqty_WT"] = 0;

                        oporow["IRATE"] = 0;
                        oporow["no_bdls"] = xno_of_box;
                        oporow["desc_"] = "-";

                        oporow["PONUM"] = "-";
                        oporow["PODATE"] = vchdate;
                        oporow["RGPNUM"] = "-";
                        oporow["RGPdate"] = vchdate;



                        oporow["ent_by"] = team.col3;
                        oporow["ent_dt"] = DateTime.Now.ToString();

                        oporow["edt_by"] = "-";
                        oporow["edt_dt"] = DateTime.Now.ToString();

                        oDS.Tables[0].Rows.Add(oporow);
                        #endregion

                    }

                }
                save_data(cocd, oDS, tabname);

            }
            catch (Exception e)
            {
                msg = e.Message.ToString() + " --> " + "Data Not Saved";
            }
            try
            {
                mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });

                #region send mail
                {
                    foreach (DataRow gr in oDS.Tables[0].Rows)
                    {
                        {
                            string drivername = "", mobileno = "", vehino = "", vardate = "";
                            string cond = "and trim(a.branchcd)||TRIM(a.type)||trim(a.vchnum)||to_char(a.vchdate,'dd/mm/yyyy')='" + branchcd + xparty_code + xinv_no + xinv_dt + "'";
                            Squery = "Select a.*,b.aname,b.email,to_char(a.vchdate,'dd/mm/yyyy') as vhd,c.iname,c.cpartno,c.cdrgno,d.drv_name,d.drv_mobile,d.mo_vehi,d.mode_tpt from ivoucher a,famst b,item c,sale d where trim(a.acode)=trim(b.acodE) and trim(a.icode)=trim(c.icodE) and trim(a.branchcd)||TRIM(a.type)||trim(a.vchnum)||to_char(a.vchdate,'dd/mm/yyyy')=trim(d.branchcd)||TRIM(d.type)||trim(d.vchnum)||to_char(d.vchdate,'dd/mm/yyyy') " + cond + " ORDER BY A.SRNO";
                            dt = getdatav(team.col1, Squery);
                            if (dt.Rows.Count > 0)
                            {
                                System.Text.StringBuilder msb = new System.Text.StringBuilder();
                                msb.Append("<html><body>");
                                msb.Append("M/s  " + dt.Rows[0]["aname"].ToString().Trim() + ",<br/><br/>");
                                msb.Append("for your kind information below item(s) " + (dt.Rows.Count > 1 ? "have" : "has") + " despatched to you<br/><br/>");
                                msb.Append("<table style='border-collapse: collapse; border: 1px solid black;'>");
                                msb.Append("<tr style='border-collapse: collapse; border: 1px solid black;'>" +
                                    "<td style='border-collapse: collapse; border: 1px solid black;'><b>Invoice No</b></td><td style='border-collapse: collapse; border: 1px solid black;'><b>Invoice Date</b></td><td style='border-collapse: collapse; border: 1px solid black;'><b>Po.No.</b></td><td style='border-collapse: collapse; border: 1px solid black;'><b>Description</b></td><td style='border-collapse: collapse; border: 1px solid black;'><b>Qty.</b></td></tr>");
                                foreach (DataRow dr in dt.Rows)
                                {
                                    msb.Append("<tr style='border-collapse: collapse; border: 1px solid black;'><td style='border-collapse: collapse; border: 1px solid black;'>");
                                    msb.Append(dr["invno"].ToString());
                                    msb.Append("</td>");
                                    msb.Append("<td style='border-collapse: collapse; border: 1px solid black;'>");
                                    msb.Append(dr["vhd"].ToString());
                                    msb.Append("</td>");
                                    msb.Append("<td style='border-collapse: collapse; border: 1px solid black;'>");
                                    msb.Append(dr["cpartno"].ToString());
                                    msb.Append("</td>");
                                    msb.Append("<td style='border-collapse: collapse; border: 1px solid black; width:250px'>");
                                    msb.Append(dr["iname"].ToString());
                                    msb.Append("</td>");
                                    msb.Append("<td style='border-collapse: collapse; border: 1px solid black;'>");
                                    msb.Append(dr["iqtyout"].ToString());
                                    msb.Append("</td>");

                                    msb.Append("</tr>");

                                    drivername = dr["drv_name"].ToString().Trim();
                                    mobileno = dr["drv_mobile"].ToString().Trim();
                                    vehino = dr["mo_vehi"].ToString().Trim();
                                }
                                msb.Append("</table><br/><br/>");

                                msb.Append("<br><br>");
                                vardate = fn_seek_iname(team.col1, "00", "SELECT TO_CHAR(SYSDATE,'HH24:MI:SS DD/MM/YYYY') AS LDT FROM DUAL", "LDT");

                                msb.Append("Gate Out Time : " + vardate + "<br>");
                                msb.Append("Driver Name   : " + drivername + "<br>");
                                msb.Append("Driver Phone  : " + mobileno + "<br>");
                                msb.Append("Vehicle No.   : " + vehino + "<br>");

                                msb.Append("<br><br>");

                                msb.Append("<br>===========================================================<br>");
                                msb.Append("<br>This Report is Auto generated from the Finsys ERP.");
                                msb.Append("<br>The above details are to be best of information and data available to the ERP system.");
                                msb.Append("<br>Errors or Omissions if any are regretted.");
                                msb.Append("Thanks and Regards,<br/>");
                                msb.Append(team.col1);
                                msb.Append("</body></html>");
                                string subj = "Invoice Gate Out by Scan at " + vardate + "";

                                sendemailNew(team.col1, dt.Rows[0]["email"].ToString().Trim(), "", "", subj, msb.ToString());
                            }
                        }
                    }
                }
                #endregion
            }
            catch { }
            return mylist;
        }


        //-----------------------------------------------------------------------------------------
        // old API 

        public string check_filed_name(string pco_Cd, string Table_Name, string Filed_Name)
        {
            string mhd = fn_seek_iname(pco_Cd, "", "SELECT upper(COLUMN_NAME) as COLUMN_NAME FROM USER_TAB_COLUMNS WHERE upper(TABLE_NAME)='" + Table_Name.Trim().ToUpper() + "' AND upper(COLUMN_NAME)='" + Filed_Name.Trim().ToUpper() + "'", "column_name");

            return mhd.Trim();
        }

        public List<Team> showdata(Team team)
        {
            //-------------------------
            Fn_set_andapp_opts(team.col1, "N");
            //------------------------

            string cd = "UKB";
            if (team.col1 == "101")
            { mq = "SELECT TO_CHAR(VCHDATE,'DD/MM/YYYY') AS COL1,SUM(BILL_TOT) AS COL2,'-' AS COL3,'-' AS COL4,TO_CHAR(VCHDATE,'YYYYMMDD') AS COL5 FROM SALE WHERE VCHDATE BETWEEN TO_DATE('01/04/2016','DD/MM/YYYY') AND TO_DATE('31/03/2017','DD/MM/YYYY') GROUP BY TO_CHAR(VCHDATE,'DD/MM/YYYY'),TO_CHAR(VCHDATE,'YYYYMMDD')"; }
            else if (team.col1 == "102")
            { mq = "SELECT TO_CHAR(VCHDATE,'DD/MM/YYYY') AS COL1,SUM(bill_qty) AS COL2,'-' AS COL3,'-' AS COL4,TO_CHAR(VCHDATE,'YYYYMMDD') AS COL5 FROM SALE WHERE VCHDATE BETWEEN TO_DATE('01/04/2016','DD/MM/YYYY') AND TO_DATE('31/03/2017','DD/MM/YYYY') GROUP BY TO_CHAR(VCHDATE,'DD/MM/YYYY'),TO_CHAR(VCHDATE,'YYYYMMDD')"; }

            DataTable dt = new DataTable();
            dt = getdata(cd, "-", mq);

            if (team.col4.Trim() == "-" || team.col4.Trim() == "") { }
            else { dt = searchDataTable(team.col4, dt); }
            List<Team> list = new List<Team>();

            if (team.col2 == "drlist")
            {
                list = (from DataRow row in dt.Rows
                        select new Team()
                        {
                            col1 = row["col1"].ToString(),
                            col2 = row["col2"].ToString(),
                            col3 = row["col3"].ToString(),
                            col4 = row["col4"].ToString(),
                            col5 = row["Image"].ToString(),

                        }).ToList();

            }
            else
            {
                list = (from DataRow row in dt.Rows
                        select new Team()
                        {
                            col1 = row["col1"].ToString(),
                            col2 = row["col2"].ToString(),
                            col3 = row["col3"].ToString(),
                            col4 = row["col4"].ToString(),
                            col5 = row["col5"].ToString(),


                        }).ToList();

            }
            return list;
        }
        //End Web Methods
        // ideal function
        public List<Customer> AddPayee(Customer customer)
        {
            List<Customer> mylist = new List<Customer>();
            try
            {
                mylist.Add(new Customer() { CustomerName = customer.CustomerName, Address = customer.Address, });
            }
            catch { }
            mylist.Add(new Customer() { CustomerName = "old", Address = "OLD", });
            mylist.Add(new Customer() { CustomerName = "OLD", Address = "OLD", });
            //Customer customer = new Customer()
            //{
            //    CustomerName = Name,
            //    Address = City,
            //};

            return mylist;
        }
        //-----------------------------------------------------------------------------------------

        double makeDouble(string value)
        {
            double d1 = 0;
            try
            {
                d1 = Convert.ToDouble(value);
            }
            catch { d1 = 0; }
            return d1;
        }

        string make_def_Date(string mtext, string mtext2)
        {
            string result = "-";
            try
            {
                if (mtext == null) mtext = mtext2;
                result = mtext.Trim();

                if (mtext == "") mtext = mtext2;
                result = mtext.Trim();

                if (mtext == "-") mtext = mtext2;
                result = mtext.Trim();
            }
            catch { result = "-"; }
            return result;
        }

    }

    public static class myExt
    {
        public static string Left(this string input, int count)
        {
            return input.Substring(0, Math.Min(input.Length, count));
        }
        public static string Right(this string input, int count)
        {
            return input.Substring(Math.Max(input.Length - count, 0), Math.Min(count, input.Length));
        }
    }
}

//////oporow["TOTAL = Round(Val(sg.text(i, 4)), 3)
//////oporow["DAY1 = Round(Val(sg.text(i, 5)), 3)
//////oporow["day2 = Round(Val(sg.text(i, 6)), 3)
//////oporow["day3 = Round(Val(sg.text(i, 7)), 3)
//////oporow["day4 = Round(Val(sg.text(i, 8)), 3)
//////oporow["day5 = Round(Val(sg.text(i, 9)), 3)
//////oporow["day6 = Round(Val(sg.text(i, 10)), 3)
//////oporow["day7 = Round(Val(sg.text(i, 11)), 3)
//////oporow["day8 = Round(Val(sg.text(i, 12)), 3)
//////oporow["day9 = Round(Val(sg.text(i, 13)), 3)
//////oporow["day10 = Round(Val(sg.text(i, 14)), 3)
//////oporow["day11 = Round(Val(sg.text(i, 15)), 3)
//////oporow["day12 = Round(Val(sg.text(i, 16)), 3)
//////oporow["day13 = Round(Val(sg.text(i, 17)), 3)
//////oporow["day14 = Round(Val(sg.text(i, 18)), 3)
//////oporow["day15 = Round(Val(sg.text(i, 19)), 3)
//////oporow["day16 = Round(Val(sg.text(i, 20)), 3)
//////oporow["day17 = Round(Val(sg.text(i, 21)), 3)
//////oporow["day18 = Round(Val(sg.text(i, 22)), 3)
//////oporow["day19 = Round(Val(sg.text(i, 23)), 3)
//////oporow["day20 = Round(Val(sg.text(i, 24)), 3)
//////oporow["day21 = Round(Val(sg.text(i, 25)), 3)
//////oporow["day22 = Round(Val(sg.text(i, 26)), 3)
//////oporow["day23 = Round(Val(sg.text(i, 27)), 3)
//////oporow["day24 = Round(Val(sg.text(i, 28)), 3)
//////oporow["day25 = Round(Val(sg.text(i, 29)), 3)
//////oporow["day26 = Round(Val(sg.text(i, 30)), 3)
//////oporow["day27 = Round(Val(sg.text(i, 31)), 3)
//////oporow["day28 = Round(Val(sg.text(i, 32)), 3)
//////oporow["day29 = Round(Val(sg.text(i, 33)), 3)
//////oporow["day30 = Round(Val(sg.text(i, 34)), 3)
//////oporow["day31 = Round(Val(sg.text(i, 35)), 3)


//////oporow["Amdtno"] = 0;





//////// corrected by shivam 
//////public List<Team> aDnote_ins_bad(Team team)
//////{
//////    string branchcd = "-", type = "-", vchnum = "-", vchdate = "-", icode = "-", acode = "-";

//////    //col1 - company code
//////    //col2 - data string
//////    //col3 - EntBy
//////    //col4 - CurrentYear
//////    //col5 - 

//////    string fldfevas = "", work_br = "";
//////    fldfevas = fn_seek_iname(team.col1, "", "Select AND_ENTBR||'^'||upper(Trim(nvl(SMAN_IDEN,'-'))) as fstr from evas where upper(Trim(username))='" + team.col3.ToUpper().Trim() + "'", "fstr");

//////    work_br = "00";
//////    if (fldfevas.Trim() != "0")
//////    {
//////        work_br = fldfevas.Split('^')[0];
//////    }

//////    string msg = "Data Saved";
//////    string saved_doc_no = "";
//////    string frm_cDt1 = "", frm_cDt2 = "", xprdRange = "";
//////    string cocd = team.col1;
//////    String mq0 = team.col2;
//////    string[] qrlist = Regex.Split(mq0, "!~!~!");
//////    //string[] qrlist = Regex.Split(mq0, "!!!");
//////    int res = 0;
//////    string my_curr_Dt;
//////    my_curr_Dt = Fn_curr_dt_time(team.col1, branchcd, "");
//////    string it_name = "", sn1 = "", sn2 = "", sn3 = "", sn4 = "", sn5 = "", sn6 = "", sn7 = "";

//////    string tabname = "DESPATCH";
//////    try
//////    {
//////        DataTable dtw = new DataTable();
//////        string mycocd = team.col1.ToString();

//////        dtw = getdatav(team.col1, "select code,to_char(fmdate,'yyyy')||'-'||to_char(todate,'yyyy') as fstr,to_char(fmdate,'dd/mm/yyyy') as cdt1,to_char(todate,'dd/mm/yyyy') as cdt2,branch from co where trim(code)='" + mycocd + team.col4 + "'");
//////        if (dtw.Rows.Count > 0)
//////        {
//////            frm_cDt1 = dtw.Rows[0]["cdt1"].ToString().Trim();
//////            frm_cDt2 = dtw.Rows[0]["cdt2"].ToString().Trim();
//////            xprdRange = "between to_date('" + frm_cDt1 + "','dd/mm/yyyy') and to_date('" + frm_cDt2 + "','dd/mm/yyyy')";
//////        }

//////        oDS = new DataSet();
//////        oporow = null;
//////        oDS = fill_schema(cocd, tabname);
//////        mq = "delete from wsr_Ctrl where branchcd='" + branchcd + "' and type ='" + type + "' and branchcd||type||vchnum||to_char(Vchdate,'dd/mm/yyyy') not in (select branchcd||type||vchnum||to_char(Vchdate,'dd/mm/yyyy') from " + tabname + " where to_char(vchdate,'dd/mm/yyyy')=to_char(sysdate,'dd/mm/yyyy'))";
//////        mq1 = execute_cmd1(team.col1, mq);

//////        int no_of_ent = 0;
//////        for (int i = 0; i < qrlist.Length; i++)
//////        {

//////            string[] colsVal = Regex.Split(qrlist[i].ToString(), "#~#");

//////            if (colsVal.Length <= 1)
//////            {

//////            }
//////            else
//////            {

//////                string mv_branch = "";
//////                string mv_type = "";
//////                string xmv_acode = "-", xmv_icode = "", xmv_qtyord = "-", xmv_batch = "-", xmv_ordno = "-", xmv_orddt = "-";

//////                #region Fields Getting



//////                branchcd = colsVal[0].ToString().Trim();
//////                branchcd = work_br;

//////                type = colsVal[1].ToString().Trim();
//////                type = "40";

//////                xmv_acode = colsVal[2].ToString().Trim();
//////                xmv_icode = colsVal[3].ToString().Trim();
//////                xmv_qtyord = colsVal[4].ToString().Trim();

//////                xmv_batch = colsVal[5].ToString().Trim();

//////                xmv_ordno = colsVal[6].ToString().Trim();
//////                xmv_orddt = colsVal[7].ToString().Trim();

//////                #endregion


//////                #region Vnum Generation
//////                if (no_of_ent == 0)
//////                {
//////                    int p = 0;
//////                    string error = "Y";
//////                    do
//////                    {
//////                        vchdate = DateTime.Now.ToString("dd/MM/yyyy");
//////                        vchnum = next_no(team.col1, branchcd, "-", "select max(packno)+" + p + " as max from " + tabname + " where branchcd='" + branchcd + "' and type ='" + type + "' and packdate " + xprdRange + " ", 6, "max");
//////                        error = fn_chk_pk(tabname + branchcd + type + vchnum + vchdate, team.col1, branchcd, type, vchnum, vchdate, acode, "WEBAPI").Trim();
//////                        if (p > 10)
//////                        { error = "N"; throw new Exception("Test Exception"); }
//////                        p++;
//////                    }
//////                    while (error.Equals("Y"));
//////                }
//////                no_of_ent = no_of_ent + 1;
//////                #endregion

//////                #region Saving to Oracle in 4 series
//////                oporow = oDS.Tables[0].NewRow();

//////                vchdate = fn_seek_iname(team.col1, branchcd, "select to_Date(to_char(sysdate,'dd/mm/yyyy'),'dd/mm/yyyy') as ldt from dual", "ldt");

//////                oporow["BRANCHCD"] = branchcd;
//////                oporow["TYPE"] = type;
//////                oporow["packno"] = vchnum;
//////                oporow["packdate"] = vchdate;
//////                oporow["INVNO"] = vchnum;
//////                oporow["INVDATE"] = vchdate;
//////                oporow["ordno"] = xmv_ordno.Substring(0, 6);

//////                oporow["orddt"] = fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE('" + xmv_orddt.Substring(0,10) + "','dd/mm/yyyy') as vchdate from dual", "vchdate");
//////                    //Convert.ToDateTime(xmv_orddt).ToString("dd/MM/yyyy"); ;
//////                oporow["acode"] = xmv_acode;
//////                oporow["icode"] = xmv_icode.Trim();
//////                oporow["qtysupp"] = makeDouble(xmv_qtyord);

//////                saved_doc_no = branchcd + type + vchnum + DateTime.Now.ToString("dd/MM/yyyy");

//////                msg = "Dispatch Advice/Note Saved : " + saved_doc_no;


//////                oporow["BILLCODE"] = "-";
//////                oporow["ST_TYPE"] = "-";


//////                it_name = fn_seek_iname(cocd, branchcd, "SELECT pordno||'^'||to_char(porddt,'dd/mm/yyyy')||'^'||trim(ciname)||'^'||cpartno||'^'||irate||'^'||cscode AS fstr FROM somas WHERE branchcd='" + branchcd + "' and type like '" + type + "%'  and TRIM(ACODE)='" + xmv_acode + "' and TRIM(ICODE)='" + xmv_icode + "' and TRIM(ordno)='" + xmv_ordno.Substring(0, 6) + "' and to_Char(orddt,'dd/mm/yyyy')='" + xmv_orddt.Substring(0,10) + "' and trim(nvl(icat,'-'))<>'Y'", "fstr");
//////                sn1 = "";
//////                sn2 = "";
//////                oporow["PORDNO"] = "-";
//////                oporow["PORDDT"] = vchdate;
//////                oporow["CINAME"] = "-";
//////                oporow["CPARTNO"] = "-";
//////                oporow["IRATE"] = 0;
//////                oporow["CSCODE"] = "-";
//////                if (it_name.Trim() != "0")
//////                {
//////                    sn1 = it_name.Split('^')[0];
//////                    sn2 = it_name.Split('^')[1];
//////                    sn3 = it_name.Split('^')[2];
//////                    sn4 = it_name.Split('^')[3];
//////                    sn5 = it_name.Split('^')[4];
//////                    sn6 = it_name.Split('^')[5];
//////                    oporow["PORDNO"] = sn1;
//////                    oporow["PORDDT"] = fn_seek_iname(team.col1, branchcd, "SELECT TO_DATE('" + sn2 + "','dd/mm/yyyy') as vchdate from dual", "vchdate"); 
//////                    oporow["CINAME"] = sn3;
//////                    oporow["CPARTNO"] = sn4;
//////                    oporow["IRATE"] = makeDouble(sn5);
//////                    oporow["CSCODE"] = sn6;

//////                }


//////                oporow["NO_BDLS"] = xmv_batch.Substring(4, 8);

//////                sn1 = "SELECT job_no||'^'||un_melt AS fstr FROM prod_stkr WHERE branchcd='" + branchcd + "' and type like '15%'  and TRIM(ICODE)='" + xmv_icode + "' and TRIM(vchnum)='" + xmv_batch.Substring(4, 8) + "' and to_char(vchdate,'yyyymmdd')='" + xmv_batch.Substring(12, 8) + "' and TRIM(acode)='" + xmv_batch.Substring(28, 2) + "'";
//////                it_name = fn_seek_iname(cocd, branchcd, sn1, "fstr");
//////                sn1 = "-";
//////                sn2 = "-";
//////                if (it_name.Trim() != "0")
//////                {
//////                    sn1 = it_name.Split('^')[0];
//////                    sn2 = it_name.Split('^')[1];
//////                }

//////                oporow["WEIGHT"] = sn1;
//////                oporow["PVT_MARK"] = sn2;

//////                oporow["ICAT"] = "-";
//////                oporow["QTYORD"] = 0;

//////                oporow["QTYBAL"] = 0;
//////                oporow["DELIVERY"] = 0;
//////                oporow["QD"] = 0;
//////                oporow["SD"] = 0;
//////                oporow["FOC"] = "-";
//////                oporow["CLASS"] = "-";
//////                oporow["ZONE"] = "-";
//////                oporow["QDAVAILED"] = 0;
//////                oporow["SDAVAILED"] = 0;
//////                oporow["SDBQTY"] = 0;
//////                oporow["MS_CONT"] = "-";
//////                oporow["AMDT1"] = "-";
//////                oporow["AMDT2"] = "-";
//////                oporow["AMDT3"] = "-";
//////                oporow["REMARK"] = "-";
//////                oporow["GRNO"] = "-";
//////                oporow["GRDATE"] = vchdate;
//////                oporow["FDUE"] = "-";
//////                oporow["INVTIME"] = "-";
//////                oporow["REMVDATE"] = vchdate;
//////                oporow["REMVTIME"] = "-";
//////                oporow["MODE_TPT"] = "-";
//////                oporow["MO_VEHI"] = "-";
//////                oporow["THRU"] = "-";
//////                oporow["DESP_TO"] = "-";



//////                oporow["FREIGHT"] = "-";
//////                oporow["ORG_INVNO"] = "-";
//////                oporow["ORG_INVDT"] = vchdate;
//////                oporow["CU_CHLNO"] = "-";
//////                oporow["CU_CHLDT"] = vchdate;
//////                oporow["REFDATE"] = vchdate;
//////                oporow["POST"] = "-";

//////                oporow["PACK"] = 0;
//////                oporow["AMT_SALE"] = 0;
//////                oporow["AMT_FRT"] = 0;
//////                oporow["AMT_SD"] = 0;
//////                oporow["AMT_EXC"] = 0;
//////                oporow["CDISC"] = 0;
//////                oporow["FRGHT"] = 0;
//////                oporow["EXC_57F4"] = "-";

//////                oporow["SRNO"] = i;
//////                oporow["app_BY"] = "-";
//////                oporow["app_DT"] = DateTime.Now.ToString();
//////                oporow["ENT_BY"] = team.col3;
//////                oporow["IPACK"] = 0;
//////                oporow["NARATION"] = "-";
//////                oporow["AVGPCWT"] = 0;
//////                oporow["CURRENCY"] = "-";
//////                oporow["RLPRC"] = 0;
//////                oporow["CLO_BY"] = "-";
//////                oporow["CLO_DT"] = DateTime.Now.ToString();
//////                oporow["SHF_NAME"] = "-";
//////                oporow["OPR_NAME"] = "-";
//////                oporow["GTAX1"] = 0;
//////                oporow["GTAX2"] = 0;
//////                oporow["ORDLINE"] = "-";
//////                oporow["ENT_DT"] = DateTime.Now.ToString();
//////                oporow["EDT_BY"] = "-";
//////                oporow["EDT_DT"] = DateTime.Now.ToString();
//////                oporow["ITM_SPEC1"] = "-";
//////                oporow["ITM_SPEC2"] = "-";
//////                oporow["ITM_SPEC3"] = "-";


//////                ////oporow["solink"] = branchcd + sn1 + sn2 + sn3;

//////                ////oporow["ppordno"] = sn4;

//////                ////oporow["ccpartno"] = sn5;
//////                ////oporow["srate"] = makeDouble(sn6);
//////                ////oporow["cons_dtl"] = sn7;

//////                ////oporow["tolerance"] = 0;
//////                ////oporow["sodesc1"] = "-";


//////                ////oporow["soremarks"] = "-";
//////                ////oporow["socat"] = "-";


//////                ////oporow["JOBCARDNO"] = "-";
//////                ////oporow["JOBCARDQTY"] = 0;

//////                //////oporow["app_by"] = "-";
//////                //////oporow["app_dt"]=vchdate;

//////                ////oporow["FROMSO"] = "N";
//////                ////oporow["jobcardrqd"] = "Y";

//////                ////oporow["req_Closedby"] = "-";

//////                oDS.Tables[0].Rows.Add(oporow);
//////                #endregion



//////            }

//////        }
//////        save_data(cocd, oDS, tabname);
//////    }
//////    catch (Exception e)
//////    {
//////        msg = e.Message.ToString() + " --> " + "Data Not Saved";
//////    }


//////    List<Team> mylist = new List<Team>();
//////    try
//////    {
//////        mylist.Add(new Team { col1 = msg, col2 = "-", col3 = "-", col4 = "-", col5 = "-", });
//////    }
//////    catch { }
//////    return mylist;
//////}
